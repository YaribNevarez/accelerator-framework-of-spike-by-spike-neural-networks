// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sbs_fixedpoint_spike,hls_ip_2019_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.732000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1180,HLS_SYN_LUT=1108,HLS_VERSION=2019_1_1}" *)

module sbs_fixedpoint_spike (
        ap_clk,
        ap_rst_n,
        stream_in_TDATA,
        stream_in_TVALID,
        stream_in_TREADY,
        stream_in_TKEEP,
        stream_in_TSTRB,
        stream_in_TUSER,
        stream_in_TLAST,
        stream_in_TID,
        stream_in_TDEST,
        stream_out_TDATA,
        stream_out_TVALID,
        stream_out_TREADY,
        stream_out_TKEEP,
        stream_out_TSTRB,
        stream_out_TUSER,
        stream_out_TLAST,
        stream_out_TID,
        stream_out_TDEST,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] stream_in_TDATA;
input   stream_in_TVALID;
output   stream_in_TREADY;
input  [3:0] stream_in_TKEEP;
input  [3:0] stream_in_TSTRB;
input  [1:0] stream_in_TUSER;
input  [0:0] stream_in_TLAST;
input  [4:0] stream_in_TID;
input  [5:0] stream_in_TDEST;
output  [31:0] stream_out_TDATA;
output   stream_out_TVALID;
input   stream_out_TREADY;
output  [3:0] stream_out_TKEEP;
output  [3:0] stream_out_TSTRB;
output  [1:0] stream_out_TUSER;
output  [0:0] stream_out_TLAST;
output  [4:0] stream_out_TID;
output  [5:0] stream_out_TDEST;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] stream_in_V_data_V_0_data_out;
wire    stream_in_V_data_V_0_vld_in;
wire    stream_in_V_data_V_0_vld_out;
wire    stream_in_V_data_V_0_ack_in;
reg    stream_in_V_data_V_0_ack_out;
reg   [31:0] stream_in_V_data_V_0_payload_A;
reg   [31:0] stream_in_V_data_V_0_payload_B;
reg    stream_in_V_data_V_0_sel_rd;
reg    stream_in_V_data_V_0_sel_wr;
wire    stream_in_V_data_V_0_sel;
wire    stream_in_V_data_V_0_load_A;
wire    stream_in_V_data_V_0_load_B;
reg   [1:0] stream_in_V_data_V_0_state;
wire    stream_in_V_data_V_0_state_cmp_full;
reg   [3:0] stream_in_V_keep_V_0_data_out;
wire    stream_in_V_keep_V_0_vld_in;
wire    stream_in_V_keep_V_0_vld_out;
wire    stream_in_V_keep_V_0_ack_in;
reg    stream_in_V_keep_V_0_ack_out;
reg   [3:0] stream_in_V_keep_V_0_payload_A;
reg   [3:0] stream_in_V_keep_V_0_payload_B;
reg    stream_in_V_keep_V_0_sel_rd;
reg    stream_in_V_keep_V_0_sel_wr;
wire    stream_in_V_keep_V_0_sel;
wire    stream_in_V_keep_V_0_load_A;
wire    stream_in_V_keep_V_0_load_B;
reg   [1:0] stream_in_V_keep_V_0_state;
wire    stream_in_V_keep_V_0_state_cmp_full;
reg   [3:0] stream_in_V_strb_V_0_data_out;
wire    stream_in_V_strb_V_0_vld_in;
wire    stream_in_V_strb_V_0_vld_out;
wire    stream_in_V_strb_V_0_ack_in;
reg    stream_in_V_strb_V_0_ack_out;
reg   [3:0] stream_in_V_strb_V_0_payload_A;
reg   [3:0] stream_in_V_strb_V_0_payload_B;
reg    stream_in_V_strb_V_0_sel_rd;
reg    stream_in_V_strb_V_0_sel_wr;
wire    stream_in_V_strb_V_0_sel;
wire    stream_in_V_strb_V_0_load_A;
wire    stream_in_V_strb_V_0_load_B;
reg   [1:0] stream_in_V_strb_V_0_state;
wire    stream_in_V_strb_V_0_state_cmp_full;
reg   [1:0] stream_in_V_user_V_0_data_out;
wire    stream_in_V_user_V_0_vld_in;
wire    stream_in_V_user_V_0_vld_out;
wire    stream_in_V_user_V_0_ack_in;
reg    stream_in_V_user_V_0_ack_out;
reg   [1:0] stream_in_V_user_V_0_payload_A;
reg   [1:0] stream_in_V_user_V_0_payload_B;
reg    stream_in_V_user_V_0_sel_rd;
reg    stream_in_V_user_V_0_sel_wr;
wire    stream_in_V_user_V_0_sel;
wire    stream_in_V_user_V_0_load_A;
wire    stream_in_V_user_V_0_load_B;
reg   [1:0] stream_in_V_user_V_0_state;
wire    stream_in_V_user_V_0_state_cmp_full;
reg   [4:0] stream_in_V_id_V_0_data_out;
wire    stream_in_V_id_V_0_vld_in;
wire    stream_in_V_id_V_0_vld_out;
wire    stream_in_V_id_V_0_ack_in;
reg    stream_in_V_id_V_0_ack_out;
reg   [4:0] stream_in_V_id_V_0_payload_A;
reg   [4:0] stream_in_V_id_V_0_payload_B;
reg    stream_in_V_id_V_0_sel_rd;
reg    stream_in_V_id_V_0_sel_wr;
wire    stream_in_V_id_V_0_sel;
wire    stream_in_V_id_V_0_load_A;
wire    stream_in_V_id_V_0_load_B;
reg   [1:0] stream_in_V_id_V_0_state;
wire    stream_in_V_id_V_0_state_cmp_full;
reg   [5:0] stream_in_V_dest_V_0_data_out;
wire    stream_in_V_dest_V_0_vld_in;
wire    stream_in_V_dest_V_0_vld_out;
wire    stream_in_V_dest_V_0_ack_in;
reg    stream_in_V_dest_V_0_ack_out;
reg   [5:0] stream_in_V_dest_V_0_payload_A;
reg   [5:0] stream_in_V_dest_V_0_payload_B;
reg    stream_in_V_dest_V_0_sel_rd;
reg    stream_in_V_dest_V_0_sel_wr;
wire    stream_in_V_dest_V_0_sel;
wire    stream_in_V_dest_V_0_load_A;
wire    stream_in_V_dest_V_0_load_B;
reg   [1:0] stream_in_V_dest_V_0_state;
wire    stream_in_V_dest_V_0_state_cmp_full;
reg   [31:0] stream_out_V_data_V_1_data_out;
reg    stream_out_V_data_V_1_vld_in;
wire    stream_out_V_data_V_1_vld_out;
wire    stream_out_V_data_V_1_ack_in;
wire    stream_out_V_data_V_1_ack_out;
reg   [31:0] stream_out_V_data_V_1_payload_A;
reg   [31:0] stream_out_V_data_V_1_payload_B;
reg    stream_out_V_data_V_1_sel_rd;
reg    stream_out_V_data_V_1_sel_wr;
wire    stream_out_V_data_V_1_sel;
wire    stream_out_V_data_V_1_load_A;
wire    stream_out_V_data_V_1_load_B;
reg   [1:0] stream_out_V_data_V_1_state;
wire    stream_out_V_data_V_1_state_cmp_full;
reg   [3:0] stream_out_V_keep_V_1_data_out;
reg    stream_out_V_keep_V_1_vld_in;
wire    stream_out_V_keep_V_1_vld_out;
wire    stream_out_V_keep_V_1_ack_in;
wire    stream_out_V_keep_V_1_ack_out;
reg   [3:0] stream_out_V_keep_V_1_payload_A;
reg   [3:0] stream_out_V_keep_V_1_payload_B;
reg    stream_out_V_keep_V_1_sel_rd;
reg    stream_out_V_keep_V_1_sel_wr;
wire    stream_out_V_keep_V_1_sel;
wire    stream_out_V_keep_V_1_load_A;
wire    stream_out_V_keep_V_1_load_B;
reg   [1:0] stream_out_V_keep_V_1_state;
wire    stream_out_V_keep_V_1_state_cmp_full;
reg   [3:0] stream_out_V_strb_V_1_data_out;
reg    stream_out_V_strb_V_1_vld_in;
wire    stream_out_V_strb_V_1_vld_out;
wire    stream_out_V_strb_V_1_ack_in;
wire    stream_out_V_strb_V_1_ack_out;
reg   [3:0] stream_out_V_strb_V_1_payload_A;
reg   [3:0] stream_out_V_strb_V_1_payload_B;
reg    stream_out_V_strb_V_1_sel_rd;
reg    stream_out_V_strb_V_1_sel_wr;
wire    stream_out_V_strb_V_1_sel;
wire    stream_out_V_strb_V_1_load_A;
wire    stream_out_V_strb_V_1_load_B;
reg   [1:0] stream_out_V_strb_V_1_state;
wire    stream_out_V_strb_V_1_state_cmp_full;
reg   [1:0] stream_out_V_user_V_1_data_out;
reg    stream_out_V_user_V_1_vld_in;
wire    stream_out_V_user_V_1_vld_out;
wire    stream_out_V_user_V_1_ack_in;
wire    stream_out_V_user_V_1_ack_out;
reg   [1:0] stream_out_V_user_V_1_payload_A;
reg   [1:0] stream_out_V_user_V_1_payload_B;
reg    stream_out_V_user_V_1_sel_rd;
reg    stream_out_V_user_V_1_sel_wr;
wire    stream_out_V_user_V_1_sel;
wire    stream_out_V_user_V_1_load_A;
wire    stream_out_V_user_V_1_load_B;
reg   [1:0] stream_out_V_user_V_1_state;
wire    stream_out_V_user_V_1_state_cmp_full;
reg   [0:0] stream_out_V_last_V_1_data_out;
reg    stream_out_V_last_V_1_vld_in;
wire    stream_out_V_last_V_1_vld_out;
wire    stream_out_V_last_V_1_ack_in;
wire    stream_out_V_last_V_1_ack_out;
reg   [0:0] stream_out_V_last_V_1_payload_A;
reg   [0:0] stream_out_V_last_V_1_payload_B;
reg    stream_out_V_last_V_1_sel_rd;
reg    stream_out_V_last_V_1_sel_wr;
wire    stream_out_V_last_V_1_sel;
wire    stream_out_V_last_V_1_load_A;
wire    stream_out_V_last_V_1_load_B;
reg   [1:0] stream_out_V_last_V_1_state;
wire    stream_out_V_last_V_1_state_cmp_full;
reg   [4:0] stream_out_V_id_V_1_data_out;
reg    stream_out_V_id_V_1_vld_in;
wire    stream_out_V_id_V_1_vld_out;
wire    stream_out_V_id_V_1_ack_in;
wire    stream_out_V_id_V_1_ack_out;
reg   [4:0] stream_out_V_id_V_1_payload_A;
reg   [4:0] stream_out_V_id_V_1_payload_B;
reg    stream_out_V_id_V_1_sel_rd;
reg    stream_out_V_id_V_1_sel_wr;
wire    stream_out_V_id_V_1_sel;
wire    stream_out_V_id_V_1_load_A;
wire    stream_out_V_id_V_1_load_B;
reg   [1:0] stream_out_V_id_V_1_state;
wire    stream_out_V_id_V_1_state_cmp_full;
reg   [5:0] stream_out_V_dest_V_1_data_out;
reg    stream_out_V_dest_V_1_vld_in;
wire    stream_out_V_dest_V_1_vld_out;
wire    stream_out_V_dest_V_1_ack_in;
wire    stream_out_V_dest_V_1_ack_out;
reg   [5:0] stream_out_V_dest_V_1_payload_A;
reg   [5:0] stream_out_V_dest_V_1_payload_B;
reg    stream_out_V_dest_V_1_sel_rd;
reg    stream_out_V_dest_V_1_sel_wr;
wire    stream_out_V_dest_V_1_sel;
wire    stream_out_V_dest_V_1_load_A;
wire    stream_out_V_dest_V_1_load_B;
reg   [1:0] stream_out_V_dest_V_1_state;
wire    stream_out_V_dest_V_1_state_cmp_full;
wire   [31:0] layerSize;
wire   [31:0] vectorSize;
reg   [31:0] ip_index;
reg   [3:0] channel_keep_V;
reg   [3:0] channel_strb_V;
reg   [1:0] channel_user_V;
reg   [4:0] channel_id_V;
reg   [5:0] channel_dest_V;
reg   [31:0] random_value;
reg   [63:0] sum;
reg    stream_in_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln26_fu_193_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln40_fu_270_p2;
reg    stream_out_TDATA_blk_n;
wire    ap_CS_fsm_state7;
wire   [0:0] and_ln46_fu_329_p2;
wire    ap_CS_fsm_state8;
reg   [0:0] icmp_ln43_reg_415;
reg   [0:0] and_ln46_reg_445;
reg   [31:0] vectorSize_read_reg_364;
reg   [31:0] layerSize_read_reg_370;
wire   [31:0] add_ln46_fu_177_p2;
reg   [31:0] add_ln46_reg_376;
wire    ap_CS_fsm_state2;
wire   [31:0] add_ln48_fu_182_p2;
reg   [31:0] add_ln48_reg_381;
wire   [31:0] tmp_data_V_3_fu_266_p1;
reg   [31:0] tmp_data_V_3_reg_392;
reg    ap_block_state4;
wire   [30:0] add_ln40_fu_275_p2;
reg   [30:0] add_ln40_reg_400;
wire   [63:0] zext_ln43_fu_289_p1;
reg   [63:0] zext_ln43_reg_410;
wire   [0:0] icmp_ln43_fu_293_p2;
wire   [0:0] icmp_ln46_1_fu_309_p2;
reg   [0:0] icmp_ln46_1_reg_424;
wire   [31:0] add_ln26_fu_314_p2;
wire   [63:0] grp_fu_303_p2;
reg   [63:0] add_ln45_reg_434;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln46_fu_325_p2;
reg   [0:0] icmp_ln46_reg_440;
wire    ap_CS_fsm_state6;
reg    ap_block_state7_io;
wire   [0:0] tmp_last_V_fu_333_p2;
reg   [31:0] empty_reg_147;
reg   [30:0] tmp_data_V_2_reg_158;
reg    ap_block_state3;
reg    ap_predicate_op93_write_state8;
reg    ap_block_state8_io;
wire   [0:0] icmp_ln29_fu_198_p2;
wire   [63:0] grp_fu_303_p1;
reg    grp_fu_303_ce;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 stream_in_V_data_V_0_sel_rd = 1'b0;
#0 stream_in_V_data_V_0_sel_wr = 1'b0;
#0 stream_in_V_data_V_0_state = 2'd0;
#0 stream_in_V_keep_V_0_sel_rd = 1'b0;
#0 stream_in_V_keep_V_0_sel_wr = 1'b0;
#0 stream_in_V_keep_V_0_state = 2'd0;
#0 stream_in_V_strb_V_0_sel_rd = 1'b0;
#0 stream_in_V_strb_V_0_sel_wr = 1'b0;
#0 stream_in_V_strb_V_0_state = 2'd0;
#0 stream_in_V_user_V_0_sel_rd = 1'b0;
#0 stream_in_V_user_V_0_sel_wr = 1'b0;
#0 stream_in_V_user_V_0_state = 2'd0;
#0 stream_in_V_id_V_0_sel_rd = 1'b0;
#0 stream_in_V_id_V_0_sel_wr = 1'b0;
#0 stream_in_V_id_V_0_state = 2'd0;
#0 stream_in_V_dest_V_0_sel_rd = 1'b0;
#0 stream_in_V_dest_V_0_sel_wr = 1'b0;
#0 stream_in_V_dest_V_0_state = 2'd0;
#0 stream_out_V_data_V_1_sel_rd = 1'b0;
#0 stream_out_V_data_V_1_sel_wr = 1'b0;
#0 stream_out_V_data_V_1_state = 2'd0;
#0 stream_out_V_keep_V_1_sel_rd = 1'b0;
#0 stream_out_V_keep_V_1_sel_wr = 1'b0;
#0 stream_out_V_keep_V_1_state = 2'd0;
#0 stream_out_V_strb_V_1_sel_rd = 1'b0;
#0 stream_out_V_strb_V_1_sel_wr = 1'b0;
#0 stream_out_V_strb_V_1_state = 2'd0;
#0 stream_out_V_user_V_1_sel_rd = 1'b0;
#0 stream_out_V_user_V_1_sel_wr = 1'b0;
#0 stream_out_V_user_V_1_state = 2'd0;
#0 stream_out_V_last_V_1_sel_rd = 1'b0;
#0 stream_out_V_last_V_1_sel_wr = 1'b0;
#0 stream_out_V_last_V_1_state = 2'd0;
#0 stream_out_V_id_V_1_sel_rd = 1'b0;
#0 stream_out_V_id_V_1_sel_wr = 1'b0;
#0 stream_out_V_id_V_1_state = 2'd0;
#0 stream_out_V_dest_V_1_sel_rd = 1'b0;
#0 stream_out_V_dest_V_1_sel_wr = 1'b0;
#0 stream_out_V_dest_V_1_state = 2'd0;
#0 ip_index = 32'd0;
#0 channel_keep_V = 4'd0;
#0 channel_strb_V = 4'd0;
#0 channel_user_V = 2'd0;
#0 channel_id_V = 5'd0;
#0 channel_dest_V = 6'd0;
#0 random_value = 32'd0;
#0 sum = 64'd0;
end

sbs_fixedpoint_spike_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
sbs_fixedpoint_spike_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .layerSize(layerSize),
    .vectorSize(vectorSize)
);

sbs_fixedpoint_spike_add_64ns_64ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
sbs_fixedpoint_spike_add_64ns_64ns_64_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sum),
    .din1(grp_fu_303_p1),
    .ce(grp_fu_303_ce),
    .dout(grp_fu_303_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_data_V_0_ack_out == 1'b1) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
            stream_in_V_data_V_0_sel_rd <= ~stream_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_data_V_0_ack_in == 1'b1) & (stream_in_V_data_V_0_vld_in == 1'b1))) begin
            stream_in_V_data_V_0_sel_wr <= ~stream_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_data_V_0_state == 2'd2) & (stream_in_V_data_V_0_vld_in == 1'b0)) | ((stream_in_V_data_V_0_state == 2'd3) & (stream_in_V_data_V_0_vld_in == 1'b0) & (stream_in_V_data_V_0_ack_out == 1'b1)))) begin
            stream_in_V_data_V_0_state <= 2'd2;
        end else if ((((stream_in_V_data_V_0_state == 2'd1) & (stream_in_V_data_V_0_ack_out == 1'b0)) | ((stream_in_V_data_V_0_state == 2'd3) & (stream_in_V_data_V_0_ack_out == 1'b0) & (stream_in_V_data_V_0_vld_in == 1'b1)))) begin
            stream_in_V_data_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_data_V_0_vld_in == 1'b0) & (stream_in_V_data_V_0_ack_out == 1'b1)) & ~((stream_in_V_data_V_0_ack_out == 1'b0) & (stream_in_V_data_V_0_vld_in == 1'b1)) & (stream_in_V_data_V_0_state == 2'd3)) | ((stream_in_V_data_V_0_state == 2'd1) & (stream_in_V_data_V_0_ack_out == 1'b1)) | ((stream_in_V_data_V_0_state == 2'd2) & (stream_in_V_data_V_0_vld_in == 1'b1)))) begin
            stream_in_V_data_V_0_state <= 2'd3;
        end else begin
            stream_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_dest_V_0_ack_out == 1'b1) & (stream_in_V_dest_V_0_vld_out == 1'b1))) begin
            stream_in_V_dest_V_0_sel_rd <= ~stream_in_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_dest_V_0_ack_in == 1'b1) & (stream_in_V_dest_V_0_vld_in == 1'b1))) begin
            stream_in_V_dest_V_0_sel_wr <= ~stream_in_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_dest_V_0_state == 2'd2) & (stream_in_V_dest_V_0_vld_in == 1'b0)) | ((stream_in_V_dest_V_0_state == 2'd3) & (stream_in_V_dest_V_0_vld_in == 1'b0) & (stream_in_V_dest_V_0_ack_out == 1'b1)))) begin
            stream_in_V_dest_V_0_state <= 2'd2;
        end else if ((((stream_in_V_dest_V_0_state == 2'd1) & (stream_in_V_dest_V_0_ack_out == 1'b0)) | ((stream_in_V_dest_V_0_state == 2'd3) & (stream_in_V_dest_V_0_ack_out == 1'b0) & (stream_in_V_dest_V_0_vld_in == 1'b1)))) begin
            stream_in_V_dest_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_dest_V_0_vld_in == 1'b0) & (stream_in_V_dest_V_0_ack_out == 1'b1)) & ~((stream_in_V_dest_V_0_ack_out == 1'b0) & (stream_in_V_dest_V_0_vld_in == 1'b1)) & (stream_in_V_dest_V_0_state == 2'd3)) | ((stream_in_V_dest_V_0_state == 2'd1) & (stream_in_V_dest_V_0_ack_out == 1'b1)) | ((stream_in_V_dest_V_0_state == 2'd2) & (stream_in_V_dest_V_0_vld_in == 1'b1)))) begin
            stream_in_V_dest_V_0_state <= 2'd3;
        end else begin
            stream_in_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_id_V_0_ack_out == 1'b1) & (stream_in_V_id_V_0_vld_out == 1'b1))) begin
            stream_in_V_id_V_0_sel_rd <= ~stream_in_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_id_V_0_ack_in == 1'b1) & (stream_in_V_id_V_0_vld_in == 1'b1))) begin
            stream_in_V_id_V_0_sel_wr <= ~stream_in_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_id_V_0_state == 2'd2) & (stream_in_V_id_V_0_vld_in == 1'b0)) | ((stream_in_V_id_V_0_state == 2'd3) & (stream_in_V_id_V_0_vld_in == 1'b0) & (stream_in_V_id_V_0_ack_out == 1'b1)))) begin
            stream_in_V_id_V_0_state <= 2'd2;
        end else if ((((stream_in_V_id_V_0_state == 2'd1) & (stream_in_V_id_V_0_ack_out == 1'b0)) | ((stream_in_V_id_V_0_state == 2'd3) & (stream_in_V_id_V_0_ack_out == 1'b0) & (stream_in_V_id_V_0_vld_in == 1'b1)))) begin
            stream_in_V_id_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_id_V_0_vld_in == 1'b0) & (stream_in_V_id_V_0_ack_out == 1'b1)) & ~((stream_in_V_id_V_0_ack_out == 1'b0) & (stream_in_V_id_V_0_vld_in == 1'b1)) & (stream_in_V_id_V_0_state == 2'd3)) | ((stream_in_V_id_V_0_state == 2'd1) & (stream_in_V_id_V_0_ack_out == 1'b1)) | ((stream_in_V_id_V_0_state == 2'd2) & (stream_in_V_id_V_0_vld_in == 1'b1)))) begin
            stream_in_V_id_V_0_state <= 2'd3;
        end else begin
            stream_in_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_keep_V_0_ack_out == 1'b1) & (stream_in_V_keep_V_0_vld_out == 1'b1))) begin
            stream_in_V_keep_V_0_sel_rd <= ~stream_in_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_keep_V_0_ack_in == 1'b1) & (stream_in_V_keep_V_0_vld_in == 1'b1))) begin
            stream_in_V_keep_V_0_sel_wr <= ~stream_in_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_keep_V_0_state == 2'd2) & (stream_in_V_keep_V_0_vld_in == 1'b0)) | ((stream_in_V_keep_V_0_state == 2'd3) & (stream_in_V_keep_V_0_vld_in == 1'b0) & (stream_in_V_keep_V_0_ack_out == 1'b1)))) begin
            stream_in_V_keep_V_0_state <= 2'd2;
        end else if ((((stream_in_V_keep_V_0_state == 2'd1) & (stream_in_V_keep_V_0_ack_out == 1'b0)) | ((stream_in_V_keep_V_0_state == 2'd3) & (stream_in_V_keep_V_0_ack_out == 1'b0) & (stream_in_V_keep_V_0_vld_in == 1'b1)))) begin
            stream_in_V_keep_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_keep_V_0_vld_in == 1'b0) & (stream_in_V_keep_V_0_ack_out == 1'b1)) & ~((stream_in_V_keep_V_0_ack_out == 1'b0) & (stream_in_V_keep_V_0_vld_in == 1'b1)) & (stream_in_V_keep_V_0_state == 2'd3)) | ((stream_in_V_keep_V_0_state == 2'd1) & (stream_in_V_keep_V_0_ack_out == 1'b1)) | ((stream_in_V_keep_V_0_state == 2'd2) & (stream_in_V_keep_V_0_vld_in == 1'b1)))) begin
            stream_in_V_keep_V_0_state <= 2'd3;
        end else begin
            stream_in_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_strb_V_0_ack_out == 1'b1) & (stream_in_V_strb_V_0_vld_out == 1'b1))) begin
            stream_in_V_strb_V_0_sel_rd <= ~stream_in_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_strb_V_0_ack_in == 1'b1) & (stream_in_V_strb_V_0_vld_in == 1'b1))) begin
            stream_in_V_strb_V_0_sel_wr <= ~stream_in_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_strb_V_0_state == 2'd2) & (stream_in_V_strb_V_0_vld_in == 1'b0)) | ((stream_in_V_strb_V_0_state == 2'd3) & (stream_in_V_strb_V_0_vld_in == 1'b0) & (stream_in_V_strb_V_0_ack_out == 1'b1)))) begin
            stream_in_V_strb_V_0_state <= 2'd2;
        end else if ((((stream_in_V_strb_V_0_state == 2'd1) & (stream_in_V_strb_V_0_ack_out == 1'b0)) | ((stream_in_V_strb_V_0_state == 2'd3) & (stream_in_V_strb_V_0_ack_out == 1'b0) & (stream_in_V_strb_V_0_vld_in == 1'b1)))) begin
            stream_in_V_strb_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_strb_V_0_vld_in == 1'b0) & (stream_in_V_strb_V_0_ack_out == 1'b1)) & ~((stream_in_V_strb_V_0_ack_out == 1'b0) & (stream_in_V_strb_V_0_vld_in == 1'b1)) & (stream_in_V_strb_V_0_state == 2'd3)) | ((stream_in_V_strb_V_0_state == 2'd1) & (stream_in_V_strb_V_0_ack_out == 1'b1)) | ((stream_in_V_strb_V_0_state == 2'd2) & (stream_in_V_strb_V_0_vld_in == 1'b1)))) begin
            stream_in_V_strb_V_0_state <= 2'd3;
        end else begin
            stream_in_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_user_V_0_ack_out == 1'b1) & (stream_in_V_user_V_0_vld_out == 1'b1))) begin
            stream_in_V_user_V_0_sel_rd <= ~stream_in_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_user_V_0_ack_in == 1'b1) & (stream_in_V_user_V_0_vld_in == 1'b1))) begin
            stream_in_V_user_V_0_sel_wr <= ~stream_in_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_user_V_0_state == 2'd2) & (stream_in_V_user_V_0_vld_in == 1'b0)) | ((stream_in_V_user_V_0_state == 2'd3) & (stream_in_V_user_V_0_vld_in == 1'b0) & (stream_in_V_user_V_0_ack_out == 1'b1)))) begin
            stream_in_V_user_V_0_state <= 2'd2;
        end else if ((((stream_in_V_user_V_0_state == 2'd1) & (stream_in_V_user_V_0_ack_out == 1'b0)) | ((stream_in_V_user_V_0_state == 2'd3) & (stream_in_V_user_V_0_ack_out == 1'b0) & (stream_in_V_user_V_0_vld_in == 1'b1)))) begin
            stream_in_V_user_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_user_V_0_vld_in == 1'b0) & (stream_in_V_user_V_0_ack_out == 1'b1)) & ~((stream_in_V_user_V_0_ack_out == 1'b0) & (stream_in_V_user_V_0_vld_in == 1'b1)) & (stream_in_V_user_V_0_state == 2'd3)) | ((stream_in_V_user_V_0_state == 2'd1) & (stream_in_V_user_V_0_ack_out == 1'b1)) | ((stream_in_V_user_V_0_state == 2'd2) & (stream_in_V_user_V_0_vld_in == 1'b1)))) begin
            stream_in_V_user_V_0_state <= 2'd3;
        end else begin
            stream_in_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_data_V_1_ack_out == 1'b1) & (stream_out_V_data_V_1_vld_out == 1'b1))) begin
            stream_out_V_data_V_1_sel_rd <= ~stream_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_data_V_1_ack_in == 1'b1) & (stream_out_V_data_V_1_vld_in == 1'b1))) begin
            stream_out_V_data_V_1_sel_wr <= ~stream_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_data_V_1_state == 2'd2) & (stream_out_V_data_V_1_vld_in == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_ack_out == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd2;
        end else if ((((stream_out_V_data_V_1_state == 2'd1) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0) & (stream_out_V_data_V_1_vld_in == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_ack_out == 1'b1)) & ~((stream_out_TREADY == 1'b0) & (stream_out_V_data_V_1_vld_in == 1'b1)) & (stream_out_V_data_V_1_state == 2'd3)) | ((stream_out_V_data_V_1_state == 2'd1) & (stream_out_V_data_V_1_ack_out == 1'b1)) | ((stream_out_V_data_V_1_state == 2'd2) & (stream_out_V_data_V_1_vld_in == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd3;
        end else begin
            stream_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_dest_V_1_ack_out == 1'b1) & (stream_out_V_dest_V_1_vld_out == 1'b1))) begin
            stream_out_V_dest_V_1_sel_rd <= ~stream_out_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_dest_V_1_ack_in == 1'b1) & (stream_out_V_dest_V_1_vld_in == 1'b1))) begin
            stream_out_V_dest_V_1_sel_wr <= ~stream_out_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_dest_V_1_state == 2'd2) & (stream_out_V_dest_V_1_vld_in == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_V_dest_V_1_vld_in == 1'b0) & (stream_out_V_dest_V_1_ack_out == 1'b1)))) begin
            stream_out_V_dest_V_1_state <= 2'd2;
        end else if ((((stream_out_V_dest_V_1_state == 2'd1) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0) & (stream_out_V_dest_V_1_vld_in == 1'b1)))) begin
            stream_out_V_dest_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_dest_V_1_vld_in == 1'b0) & (stream_out_V_dest_V_1_ack_out == 1'b1)) & ~((stream_out_TREADY == 1'b0) & (stream_out_V_dest_V_1_vld_in == 1'b1)) & (stream_out_V_dest_V_1_state == 2'd3)) | ((stream_out_V_dest_V_1_state == 2'd1) & (stream_out_V_dest_V_1_ack_out == 1'b1)) | ((stream_out_V_dest_V_1_state == 2'd2) & (stream_out_V_dest_V_1_vld_in == 1'b1)))) begin
            stream_out_V_dest_V_1_state <= 2'd3;
        end else begin
            stream_out_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_id_V_1_ack_out == 1'b1) & (stream_out_V_id_V_1_vld_out == 1'b1))) begin
            stream_out_V_id_V_1_sel_rd <= ~stream_out_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_id_V_1_ack_in == 1'b1) & (stream_out_V_id_V_1_vld_in == 1'b1))) begin
            stream_out_V_id_V_1_sel_wr <= ~stream_out_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_id_V_1_state == 2'd2) & (stream_out_V_id_V_1_vld_in == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_V_id_V_1_vld_in == 1'b0) & (stream_out_V_id_V_1_ack_out == 1'b1)))) begin
            stream_out_V_id_V_1_state <= 2'd2;
        end else if ((((stream_out_V_id_V_1_state == 2'd1) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0) & (stream_out_V_id_V_1_vld_in == 1'b1)))) begin
            stream_out_V_id_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_id_V_1_vld_in == 1'b0) & (stream_out_V_id_V_1_ack_out == 1'b1)) & ~((stream_out_TREADY == 1'b0) & (stream_out_V_id_V_1_vld_in == 1'b1)) & (stream_out_V_id_V_1_state == 2'd3)) | ((stream_out_V_id_V_1_state == 2'd1) & (stream_out_V_id_V_1_ack_out == 1'b1)) | ((stream_out_V_id_V_1_state == 2'd2) & (stream_out_V_id_V_1_vld_in == 1'b1)))) begin
            stream_out_V_id_V_1_state <= 2'd3;
        end else begin
            stream_out_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_keep_V_1_ack_out == 1'b1) & (stream_out_V_keep_V_1_vld_out == 1'b1))) begin
            stream_out_V_keep_V_1_sel_rd <= ~stream_out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_keep_V_1_ack_in == 1'b1) & (stream_out_V_keep_V_1_vld_in == 1'b1))) begin
            stream_out_V_keep_V_1_sel_wr <= ~stream_out_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_keep_V_1_state == 2'd2) & (stream_out_V_keep_V_1_vld_in == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_V_keep_V_1_vld_in == 1'b0) & (stream_out_V_keep_V_1_ack_out == 1'b1)))) begin
            stream_out_V_keep_V_1_state <= 2'd2;
        end else if ((((stream_out_V_keep_V_1_state == 2'd1) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0) & (stream_out_V_keep_V_1_vld_in == 1'b1)))) begin
            stream_out_V_keep_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_keep_V_1_vld_in == 1'b0) & (stream_out_V_keep_V_1_ack_out == 1'b1)) & ~((stream_out_TREADY == 1'b0) & (stream_out_V_keep_V_1_vld_in == 1'b1)) & (stream_out_V_keep_V_1_state == 2'd3)) | ((stream_out_V_keep_V_1_state == 2'd1) & (stream_out_V_keep_V_1_ack_out == 1'b1)) | ((stream_out_V_keep_V_1_state == 2'd2) & (stream_out_V_keep_V_1_vld_in == 1'b1)))) begin
            stream_out_V_keep_V_1_state <= 2'd3;
        end else begin
            stream_out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_last_V_1_ack_out == 1'b1) & (stream_out_V_last_V_1_vld_out == 1'b1))) begin
            stream_out_V_last_V_1_sel_rd <= ~stream_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_last_V_1_ack_in == 1'b1) & (stream_out_V_last_V_1_vld_in == 1'b1))) begin
            stream_out_V_last_V_1_sel_wr <= ~stream_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_last_V_1_state == 2'd2) & (stream_out_V_last_V_1_vld_in == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_V_last_V_1_vld_in == 1'b0) & (stream_out_V_last_V_1_ack_out == 1'b1)))) begin
            stream_out_V_last_V_1_state <= 2'd2;
        end else if ((((stream_out_V_last_V_1_state == 2'd1) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0) & (stream_out_V_last_V_1_vld_in == 1'b1)))) begin
            stream_out_V_last_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_last_V_1_vld_in == 1'b0) & (stream_out_V_last_V_1_ack_out == 1'b1)) & ~((stream_out_TREADY == 1'b0) & (stream_out_V_last_V_1_vld_in == 1'b1)) & (stream_out_V_last_V_1_state == 2'd3)) | ((stream_out_V_last_V_1_state == 2'd1) & (stream_out_V_last_V_1_ack_out == 1'b1)) | ((stream_out_V_last_V_1_state == 2'd2) & (stream_out_V_last_V_1_vld_in == 1'b1)))) begin
            stream_out_V_last_V_1_state <= 2'd3;
        end else begin
            stream_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_strb_V_1_ack_out == 1'b1) & (stream_out_V_strb_V_1_vld_out == 1'b1))) begin
            stream_out_V_strb_V_1_sel_rd <= ~stream_out_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_strb_V_1_ack_in == 1'b1) & (stream_out_V_strb_V_1_vld_in == 1'b1))) begin
            stream_out_V_strb_V_1_sel_wr <= ~stream_out_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_strb_V_1_state == 2'd2) & (stream_out_V_strb_V_1_vld_in == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_V_strb_V_1_vld_in == 1'b0) & (stream_out_V_strb_V_1_ack_out == 1'b1)))) begin
            stream_out_V_strb_V_1_state <= 2'd2;
        end else if ((((stream_out_V_strb_V_1_state == 2'd1) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0) & (stream_out_V_strb_V_1_vld_in == 1'b1)))) begin
            stream_out_V_strb_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_strb_V_1_vld_in == 1'b0) & (stream_out_V_strb_V_1_ack_out == 1'b1)) & ~((stream_out_TREADY == 1'b0) & (stream_out_V_strb_V_1_vld_in == 1'b1)) & (stream_out_V_strb_V_1_state == 2'd3)) | ((stream_out_V_strb_V_1_state == 2'd1) & (stream_out_V_strb_V_1_ack_out == 1'b1)) | ((stream_out_V_strb_V_1_state == 2'd2) & (stream_out_V_strb_V_1_vld_in == 1'b1)))) begin
            stream_out_V_strb_V_1_state <= 2'd3;
        end else begin
            stream_out_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_user_V_1_ack_out == 1'b1) & (stream_out_V_user_V_1_vld_out == 1'b1))) begin
            stream_out_V_user_V_1_sel_rd <= ~stream_out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_user_V_1_ack_in == 1'b1) & (stream_out_V_user_V_1_vld_in == 1'b1))) begin
            stream_out_V_user_V_1_sel_wr <= ~stream_out_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_user_V_1_state == 2'd2) & (stream_out_V_user_V_1_vld_in == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_V_user_V_1_vld_in == 1'b0) & (stream_out_V_user_V_1_ack_out == 1'b1)))) begin
            stream_out_V_user_V_1_state <= 2'd2;
        end else if ((((stream_out_V_user_V_1_state == 2'd1) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0) & (stream_out_V_user_V_1_vld_in == 1'b1)))) begin
            stream_out_V_user_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_user_V_1_vld_in == 1'b0) & (stream_out_V_user_V_1_ack_out == 1'b1)) & ~((stream_out_TREADY == 1'b0) & (stream_out_V_user_V_1_vld_in == 1'b1)) & (stream_out_V_user_V_1_state == 2'd3)) | ((stream_out_V_user_V_1_state == 2'd1) & (stream_out_V_user_V_1_ack_out == 1'b1)) | ((stream_out_V_user_V_1_state == 2'd2) & (stream_out_V_user_V_1_vld_in == 1'b1)))) begin
            stream_out_V_user_V_1_state <= 2'd3;
        end else begin
            stream_out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln40_fu_270_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) & (icmp_ln40_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_reg_147 <= add_ln26_fu_314_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_reg_147 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sum <= add_ln45_reg_434;
    end else if ((~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((icmp_ln26_fu_193_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0))) & (icmp_ln26_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        sum <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8_io))) begin
        tmp_data_V_2_reg_158 <= add_ln40_reg_400;
    end else if ((~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((icmp_ln26_fu_193_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0))) & (icmp_ln26_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_data_V_2_reg_158 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln40_fu_270_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln40_reg_400 <= add_ln40_fu_275_p2;
        tmp_data_V_3_reg_392[30 : 0] <= tmp_data_V_3_fu_266_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln45_reg_434 <= grp_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln46_reg_376 <= add_ln46_fu_177_p2;
        add_ln48_reg_381 <= add_ln48_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7))) begin
        and_ln46_reg_445 <= and_ln46_fu_329_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((icmp_ln26_fu_193_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0))) & (icmp_ln26_fu_193_p2 == 1'd1) & (icmp_ln29_fu_198_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        channel_dest_V <= stream_in_V_dest_V_0_data_out;
        channel_id_V <= stream_in_V_id_V_0_data_out;
        channel_keep_V <= stream_in_V_keep_V_0_data_out;
        channel_strb_V <= stream_in_V_strb_V_0_data_out;
        channel_user_V <= stream_in_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln40_fu_270_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) & (icmp_ln40_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        icmp_ln43_reg_415 <= icmp_ln43_fu_293_p2;
        zext_ln43_reg_410[31 : 0] <= zext_ln43_fu_289_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln40_fu_270_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) & (icmp_ln43_fu_293_p2 == 1'd1) & (icmp_ln40_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        icmp_ln46_1_reg_424 <= icmp_ln46_1_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln46_reg_440 <= icmp_ln46_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((icmp_ln26_fu_193_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state3))) begin
        ip_index <= empty_reg_147;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        layerSize_read_reg_370 <= layerSize;
        vectorSize_read_reg_364 <= vectorSize;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((icmp_ln26_fu_193_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0))) & (icmp_ln26_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        random_value <= stream_in_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_data_V_0_load_A == 1'b1)) begin
        stream_in_V_data_V_0_payload_A <= stream_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_data_V_0_load_B == 1'b1)) begin
        stream_in_V_data_V_0_payload_B <= stream_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_dest_V_0_load_A == 1'b1)) begin
        stream_in_V_dest_V_0_payload_A <= stream_in_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_dest_V_0_load_B == 1'b1)) begin
        stream_in_V_dest_V_0_payload_B <= stream_in_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_id_V_0_load_A == 1'b1)) begin
        stream_in_V_id_V_0_payload_A <= stream_in_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_id_V_0_load_B == 1'b1)) begin
        stream_in_V_id_V_0_payload_B <= stream_in_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_keep_V_0_load_A == 1'b1)) begin
        stream_in_V_keep_V_0_payload_A <= stream_in_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_keep_V_0_load_B == 1'b1)) begin
        stream_in_V_keep_V_0_payload_B <= stream_in_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_strb_V_0_load_A == 1'b1)) begin
        stream_in_V_strb_V_0_payload_A <= stream_in_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_strb_V_0_load_B == 1'b1)) begin
        stream_in_V_strb_V_0_payload_B <= stream_in_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_user_V_0_load_A == 1'b1)) begin
        stream_in_V_user_V_0_payload_A <= stream_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_user_V_0_load_B == 1'b1)) begin
        stream_in_V_user_V_0_payload_B <= stream_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_data_V_1_load_A == 1'b1)) begin
        stream_out_V_data_V_1_payload_A <= tmp_data_V_3_reg_392;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_data_V_1_load_B == 1'b1)) begin
        stream_out_V_data_V_1_payload_B <= tmp_data_V_3_reg_392;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_dest_V_1_load_A == 1'b1)) begin
        stream_out_V_dest_V_1_payload_A <= channel_dest_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_dest_V_1_load_B == 1'b1)) begin
        stream_out_V_dest_V_1_payload_B <= channel_dest_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_id_V_1_load_A == 1'b1)) begin
        stream_out_V_id_V_1_payload_A <= channel_id_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_id_V_1_load_B == 1'b1)) begin
        stream_out_V_id_V_1_payload_B <= channel_id_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_keep_V_1_load_A == 1'b1)) begin
        stream_out_V_keep_V_1_payload_A <= channel_keep_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_keep_V_1_load_B == 1'b1)) begin
        stream_out_V_keep_V_1_payload_B <= channel_keep_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_last_V_1_load_A == 1'b1)) begin
        stream_out_V_last_V_1_payload_A <= tmp_last_V_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_last_V_1_load_B == 1'b1)) begin
        stream_out_V_last_V_1_payload_B <= tmp_last_V_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_strb_V_1_load_A == 1'b1)) begin
        stream_out_V_strb_V_1_payload_A <= channel_strb_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_strb_V_1_load_B == 1'b1)) begin
        stream_out_V_strb_V_1_payload_B <= channel_strb_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_user_V_1_load_A == 1'b1)) begin
        stream_out_V_user_V_1_payload_A <= channel_user_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_user_V_1_load_B == 1'b1)) begin
        stream_out_V_user_V_1_payload_B <= channel_user_V;
    end
end

always @ (*) begin
    if ((~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((icmp_ln26_fu_193_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0))) & (icmp_ln26_fu_193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((icmp_ln26_fu_193_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0))) & (icmp_ln26_fu_193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (~((icmp_ln40_fu_270_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state4)))) begin
        grp_fu_303_ce = 1'b1;
    end else begin
        grp_fu_303_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln40_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln26_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        stream_in_TDATA_blk_n = stream_in_V_data_V_0_state[1'd0];
    end else begin
        stream_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((icmp_ln40_fu_270_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) & (icmp_ln40_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | (~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((icmp_ln26_fu_193_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0))) & (icmp_ln26_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        stream_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_data_V_0_sel == 1'b1)) begin
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_B;
    end else begin
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((~((icmp_ln40_fu_270_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) & (icmp_ln40_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | (~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((icmp_ln26_fu_193_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0))) & (icmp_ln26_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        stream_in_V_dest_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_dest_V_0_sel == 1'b1)) begin
        stream_in_V_dest_V_0_data_out = stream_in_V_dest_V_0_payload_B;
    end else begin
        stream_in_V_dest_V_0_data_out = stream_in_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((~((icmp_ln40_fu_270_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) & (icmp_ln40_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | (~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((icmp_ln26_fu_193_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0))) & (icmp_ln26_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        stream_in_V_id_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_id_V_0_sel == 1'b1)) begin
        stream_in_V_id_V_0_data_out = stream_in_V_id_V_0_payload_B;
    end else begin
        stream_in_V_id_V_0_data_out = stream_in_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((~((icmp_ln40_fu_270_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) & (icmp_ln40_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | (~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((icmp_ln26_fu_193_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0))) & (icmp_ln26_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        stream_in_V_keep_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_keep_V_0_sel == 1'b1)) begin
        stream_in_V_keep_V_0_data_out = stream_in_V_keep_V_0_payload_B;
    end else begin
        stream_in_V_keep_V_0_data_out = stream_in_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((~((icmp_ln40_fu_270_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) & (icmp_ln40_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | (~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((icmp_ln26_fu_193_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0))) & (icmp_ln26_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        stream_in_V_strb_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_strb_V_0_sel == 1'b1)) begin
        stream_in_V_strb_V_0_data_out = stream_in_V_strb_V_0_payload_B;
    end else begin
        stream_in_V_strb_V_0_data_out = stream_in_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((~((icmp_ln40_fu_270_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) & (icmp_ln40_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | (~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((icmp_ln26_fu_193_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0))) & (icmp_ln26_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        stream_in_V_user_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_user_V_0_sel == 1'b1)) begin
        stream_in_V_user_V_0_data_out = stream_in_V_user_V_0_payload_B;
    end else begin
        stream_in_V_user_V_0_data_out = stream_in_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((icmp_ln43_reg_415 == 1'd1) & (1'd0 == and_ln46_reg_445) & (1'b1 == ap_CS_fsm_state8)) | ((1'd0 == and_ln46_fu_329_p2) & (1'b1 == ap_CS_fsm_state7)))) begin
        stream_out_TDATA_blk_n = stream_out_V_data_V_1_state[1'd1];
    end else begin
        stream_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((stream_out_V_data_V_1_sel == 1'b1)) begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_B;
    end else begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_io) & (1'd0 == and_ln46_fu_329_p2) & (1'b1 == ap_CS_fsm_state7))) begin
        stream_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_dest_V_1_sel == 1'b1)) begin
        stream_out_V_dest_V_1_data_out = stream_out_V_dest_V_1_payload_B;
    end else begin
        stream_out_V_dest_V_1_data_out = stream_out_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_io) & (1'd0 == and_ln46_fu_329_p2) & (1'b1 == ap_CS_fsm_state7))) begin
        stream_out_V_dest_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_id_V_1_sel == 1'b1)) begin
        stream_out_V_id_V_1_data_out = stream_out_V_id_V_1_payload_B;
    end else begin
        stream_out_V_id_V_1_data_out = stream_out_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_io) & (1'd0 == and_ln46_fu_329_p2) & (1'b1 == ap_CS_fsm_state7))) begin
        stream_out_V_id_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_keep_V_1_sel == 1'b1)) begin
        stream_out_V_keep_V_1_data_out = stream_out_V_keep_V_1_payload_B;
    end else begin
        stream_out_V_keep_V_1_data_out = stream_out_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_io) & (1'd0 == and_ln46_fu_329_p2) & (1'b1 == ap_CS_fsm_state7))) begin
        stream_out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_last_V_1_sel == 1'b1)) begin
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_B;
    end else begin
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_io) & (1'd0 == and_ln46_fu_329_p2) & (1'b1 == ap_CS_fsm_state7))) begin
        stream_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_strb_V_1_sel == 1'b1)) begin
        stream_out_V_strb_V_1_data_out = stream_out_V_strb_V_1_payload_B;
    end else begin
        stream_out_V_strb_V_1_data_out = stream_out_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_io) & (1'd0 == and_ln46_fu_329_p2) & (1'b1 == ap_CS_fsm_state7))) begin
        stream_out_V_strb_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_user_V_1_sel == 1'b1)) begin
        stream_out_V_user_V_1_data_out = stream_out_V_user_V_1_payload_B;
    end else begin
        stream_out_V_user_V_1_data_out = stream_out_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_io) & (1'd0 == and_ln46_fu_329_p2) & (1'b1 == ap_CS_fsm_state7))) begin
        stream_out_V_user_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((icmp_ln26_fu_193_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0))) & (icmp_ln26_fu_193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((icmp_ln26_fu_193_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0))) & (icmp_ln26_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((icmp_ln40_fu_270_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) & (icmp_ln40_fu_270_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if ((~((icmp_ln40_fu_270_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) & (icmp_ln40_fu_270_p2 == 1'd1) & (icmp_ln43_fu_293_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else if ((~((icmp_ln40_fu_270_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) & (icmp_ln43_fu_293_p2 == 1'd1) & (icmp_ln40_fu_270_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_block_state8_io))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_fu_314_p2 = (ip_index + 32'd1);

assign add_ln40_fu_275_p2 = (tmp_data_V_2_reg_158 + 31'd1);

assign add_ln46_fu_177_p2 = ($signed(vectorSize_read_reg_364) + $signed(32'd4294967295));

assign add_ln48_fu_182_p2 = ($signed(layerSize_read_reg_370) + $signed(32'd4294967295));

assign and_ln46_fu_329_p2 = (icmp_ln46_reg_440 & icmp_ln46_1_reg_424);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state3 = ((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((icmp_ln26_fu_193_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state4 = ((icmp_ln40_fu_270_p2 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state7_io = ((1'd0 == and_ln46_fu_329_p2) & (stream_out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state8_io = ((stream_out_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op93_write_state8 == 1'b1));
end

always @ (*) begin
    ap_predicate_op93_write_state8 = ((icmp_ln43_reg_415 == 1'd1) & (1'd0 == and_ln46_reg_445));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_303_p1 = stream_in_V_data_V_0_data_out;

assign icmp_ln26_fu_193_p2 = (($signed(empty_reg_147) < $signed(layerSize_read_reg_370)) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_198_p2 = ((empty_reg_147 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_270_p2 = (($signed(tmp_data_V_3_fu_266_p1) < $signed(vectorSize_read_reg_364)) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_293_p2 = ((sum < zext_ln43_fu_289_p1) ? 1'b1 : 1'b0);

assign icmp_ln46_1_fu_309_p2 = ((tmp_data_V_3_fu_266_p1 != add_ln46_reg_376) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_325_p2 = ((add_ln45_reg_434 < zext_ln43_reg_410) ? 1'b1 : 1'b0);

assign stream_in_TREADY = stream_in_V_dest_V_0_state[1'd1];

assign stream_in_V_data_V_0_ack_in = stream_in_V_data_V_0_state[1'd1];

assign stream_in_V_data_V_0_load_A = (stream_in_V_data_V_0_state_cmp_full & ~stream_in_V_data_V_0_sel_wr);

assign stream_in_V_data_V_0_load_B = (stream_in_V_data_V_0_state_cmp_full & stream_in_V_data_V_0_sel_wr);

assign stream_in_V_data_V_0_sel = stream_in_V_data_V_0_sel_rd;

assign stream_in_V_data_V_0_state_cmp_full = ((stream_in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_data_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_data_V_0_vld_out = stream_in_V_data_V_0_state[1'd0];

assign stream_in_V_dest_V_0_ack_in = stream_in_V_dest_V_0_state[1'd1];

assign stream_in_V_dest_V_0_load_A = (stream_in_V_dest_V_0_state_cmp_full & ~stream_in_V_dest_V_0_sel_wr);

assign stream_in_V_dest_V_0_load_B = (stream_in_V_dest_V_0_state_cmp_full & stream_in_V_dest_V_0_sel_wr);

assign stream_in_V_dest_V_0_sel = stream_in_V_dest_V_0_sel_rd;

assign stream_in_V_dest_V_0_state_cmp_full = ((stream_in_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_dest_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_dest_V_0_vld_out = stream_in_V_dest_V_0_state[1'd0];

assign stream_in_V_id_V_0_ack_in = stream_in_V_id_V_0_state[1'd1];

assign stream_in_V_id_V_0_load_A = (stream_in_V_id_V_0_state_cmp_full & ~stream_in_V_id_V_0_sel_wr);

assign stream_in_V_id_V_0_load_B = (stream_in_V_id_V_0_state_cmp_full & stream_in_V_id_V_0_sel_wr);

assign stream_in_V_id_V_0_sel = stream_in_V_id_V_0_sel_rd;

assign stream_in_V_id_V_0_state_cmp_full = ((stream_in_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_id_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_id_V_0_vld_out = stream_in_V_id_V_0_state[1'd0];

assign stream_in_V_keep_V_0_ack_in = stream_in_V_keep_V_0_state[1'd1];

assign stream_in_V_keep_V_0_load_A = (stream_in_V_keep_V_0_state_cmp_full & ~stream_in_V_keep_V_0_sel_wr);

assign stream_in_V_keep_V_0_load_B = (stream_in_V_keep_V_0_state_cmp_full & stream_in_V_keep_V_0_sel_wr);

assign stream_in_V_keep_V_0_sel = stream_in_V_keep_V_0_sel_rd;

assign stream_in_V_keep_V_0_state_cmp_full = ((stream_in_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_keep_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_keep_V_0_vld_out = stream_in_V_keep_V_0_state[1'd0];

assign stream_in_V_strb_V_0_ack_in = stream_in_V_strb_V_0_state[1'd1];

assign stream_in_V_strb_V_0_load_A = (stream_in_V_strb_V_0_state_cmp_full & ~stream_in_V_strb_V_0_sel_wr);

assign stream_in_V_strb_V_0_load_B = (stream_in_V_strb_V_0_state_cmp_full & stream_in_V_strb_V_0_sel_wr);

assign stream_in_V_strb_V_0_sel = stream_in_V_strb_V_0_sel_rd;

assign stream_in_V_strb_V_0_state_cmp_full = ((stream_in_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_strb_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_strb_V_0_vld_out = stream_in_V_strb_V_0_state[1'd0];

assign stream_in_V_user_V_0_ack_in = stream_in_V_user_V_0_state[1'd1];

assign stream_in_V_user_V_0_load_A = (stream_in_V_user_V_0_state_cmp_full & ~stream_in_V_user_V_0_sel_wr);

assign stream_in_V_user_V_0_load_B = (stream_in_V_user_V_0_state_cmp_full & stream_in_V_user_V_0_sel_wr);

assign stream_in_V_user_V_0_sel = stream_in_V_user_V_0_sel_rd;

assign stream_in_V_user_V_0_state_cmp_full = ((stream_in_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_user_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_user_V_0_vld_out = stream_in_V_user_V_0_state[1'd0];

assign stream_out_TDATA = stream_out_V_data_V_1_data_out;

assign stream_out_TDEST = stream_out_V_dest_V_1_data_out;

assign stream_out_TID = stream_out_V_id_V_1_data_out;

assign stream_out_TKEEP = stream_out_V_keep_V_1_data_out;

assign stream_out_TLAST = stream_out_V_last_V_1_data_out;

assign stream_out_TSTRB = stream_out_V_strb_V_1_data_out;

assign stream_out_TUSER = stream_out_V_user_V_1_data_out;

assign stream_out_TVALID = stream_out_V_dest_V_1_state[1'd0];

assign stream_out_V_data_V_1_ack_in = stream_out_V_data_V_1_state[1'd1];

assign stream_out_V_data_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_data_V_1_load_A = (stream_out_V_data_V_1_state_cmp_full & ~stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_load_B = (stream_out_V_data_V_1_state_cmp_full & stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_sel = stream_out_V_data_V_1_sel_rd;

assign stream_out_V_data_V_1_state_cmp_full = ((stream_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_data_V_1_vld_out = stream_out_V_data_V_1_state[1'd0];

assign stream_out_V_dest_V_1_ack_in = stream_out_V_dest_V_1_state[1'd1];

assign stream_out_V_dest_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_dest_V_1_load_A = (stream_out_V_dest_V_1_state_cmp_full & ~stream_out_V_dest_V_1_sel_wr);

assign stream_out_V_dest_V_1_load_B = (stream_out_V_dest_V_1_state_cmp_full & stream_out_V_dest_V_1_sel_wr);

assign stream_out_V_dest_V_1_sel = stream_out_V_dest_V_1_sel_rd;

assign stream_out_V_dest_V_1_state_cmp_full = ((stream_out_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_dest_V_1_vld_out = stream_out_V_dest_V_1_state[1'd0];

assign stream_out_V_id_V_1_ack_in = stream_out_V_id_V_1_state[1'd1];

assign stream_out_V_id_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_id_V_1_load_A = (stream_out_V_id_V_1_state_cmp_full & ~stream_out_V_id_V_1_sel_wr);

assign stream_out_V_id_V_1_load_B = (stream_out_V_id_V_1_state_cmp_full & stream_out_V_id_V_1_sel_wr);

assign stream_out_V_id_V_1_sel = stream_out_V_id_V_1_sel_rd;

assign stream_out_V_id_V_1_state_cmp_full = ((stream_out_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_id_V_1_vld_out = stream_out_V_id_V_1_state[1'd0];

assign stream_out_V_keep_V_1_ack_in = stream_out_V_keep_V_1_state[1'd1];

assign stream_out_V_keep_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_keep_V_1_load_A = (stream_out_V_keep_V_1_state_cmp_full & ~stream_out_V_keep_V_1_sel_wr);

assign stream_out_V_keep_V_1_load_B = (stream_out_V_keep_V_1_state_cmp_full & stream_out_V_keep_V_1_sel_wr);

assign stream_out_V_keep_V_1_sel = stream_out_V_keep_V_1_sel_rd;

assign stream_out_V_keep_V_1_state_cmp_full = ((stream_out_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_keep_V_1_vld_out = stream_out_V_keep_V_1_state[1'd0];

assign stream_out_V_last_V_1_ack_in = stream_out_V_last_V_1_state[1'd1];

assign stream_out_V_last_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_last_V_1_load_A = (stream_out_V_last_V_1_state_cmp_full & ~stream_out_V_last_V_1_sel_wr);

assign stream_out_V_last_V_1_load_B = (stream_out_V_last_V_1_state_cmp_full & stream_out_V_last_V_1_sel_wr);

assign stream_out_V_last_V_1_sel = stream_out_V_last_V_1_sel_rd;

assign stream_out_V_last_V_1_state_cmp_full = ((stream_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_last_V_1_vld_out = stream_out_V_last_V_1_state[1'd0];

assign stream_out_V_strb_V_1_ack_in = stream_out_V_strb_V_1_state[1'd1];

assign stream_out_V_strb_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_strb_V_1_load_A = (stream_out_V_strb_V_1_state_cmp_full & ~stream_out_V_strb_V_1_sel_wr);

assign stream_out_V_strb_V_1_load_B = (stream_out_V_strb_V_1_state_cmp_full & stream_out_V_strb_V_1_sel_wr);

assign stream_out_V_strb_V_1_sel = stream_out_V_strb_V_1_sel_rd;

assign stream_out_V_strb_V_1_state_cmp_full = ((stream_out_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_strb_V_1_vld_out = stream_out_V_strb_V_1_state[1'd0];

assign stream_out_V_user_V_1_ack_in = stream_out_V_user_V_1_state[1'd1];

assign stream_out_V_user_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_user_V_1_load_A = (stream_out_V_user_V_1_state_cmp_full & ~stream_out_V_user_V_1_sel_wr);

assign stream_out_V_user_V_1_load_B = (stream_out_V_user_V_1_state_cmp_full & stream_out_V_user_V_1_sel_wr);

assign stream_out_V_user_V_1_sel = stream_out_V_user_V_1_sel_rd;

assign stream_out_V_user_V_1_state_cmp_full = ((stream_out_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_user_V_1_vld_out = stream_out_V_user_V_1_state[1'd0];

assign tmp_data_V_3_fu_266_p1 = tmp_data_V_2_reg_158;

assign tmp_last_V_fu_333_p2 = ((ip_index == add_ln48_reg_381) ? 1'b1 : 1'b0);

assign zext_ln43_fu_289_p1 = random_value;

always @ (posedge ap_clk) begin
    tmp_data_V_3_reg_392[31] <= 1'b0;
    zext_ln43_reg_410[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //sbs_fixedpoint_spike
