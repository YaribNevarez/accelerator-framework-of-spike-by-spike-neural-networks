// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sbs_fixedpoint_spike.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sbs_fixedpoint_spike::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sbs_fixedpoint_spike::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> sbs_fixedpoint_spike::ap_ST_fsm_state1 = "1";
const sc_lv<8> sbs_fixedpoint_spike::ap_ST_fsm_state2 = "10";
const sc_lv<8> sbs_fixedpoint_spike::ap_ST_fsm_state3 = "100";
const sc_lv<8> sbs_fixedpoint_spike::ap_ST_fsm_state4 = "1000";
const sc_lv<8> sbs_fixedpoint_spike::ap_ST_fsm_state5 = "10000";
const sc_lv<8> sbs_fixedpoint_spike::ap_ST_fsm_state6 = "100000";
const sc_lv<8> sbs_fixedpoint_spike::ap_ST_fsm_state7 = "1000000";
const sc_lv<8> sbs_fixedpoint_spike::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> sbs_fixedpoint_spike::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool sbs_fixedpoint_spike::ap_const_boolean_1 = true;
const sc_lv<1> sbs_fixedpoint_spike::ap_const_lv1_0 = "0";
const sc_lv<1> sbs_fixedpoint_spike::ap_const_lv1_1 = "1";
const sc_lv<2> sbs_fixedpoint_spike::ap_const_lv2_0 = "00";
const sc_lv<2> sbs_fixedpoint_spike::ap_const_lv2_2 = "10";
const sc_lv<2> sbs_fixedpoint_spike::ap_const_lv2_3 = "11";
const sc_lv<2> sbs_fixedpoint_spike::ap_const_lv2_1 = "1";
const sc_lv<64> sbs_fixedpoint_spike::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> sbs_fixedpoint_spike::ap_const_lv32_2 = "10";
const sc_lv<32> sbs_fixedpoint_spike::ap_const_lv32_3 = "11";
const sc_lv<32> sbs_fixedpoint_spike::ap_const_lv32_6 = "110";
const sc_lv<32> sbs_fixedpoint_spike::ap_const_lv32_7 = "111";
const int sbs_fixedpoint_spike::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> sbs_fixedpoint_spike::ap_const_lv32_1 = "1";
const sc_lv<32> sbs_fixedpoint_spike::ap_const_lv32_4 = "100";
const sc_lv<32> sbs_fixedpoint_spike::ap_const_lv32_5 = "101";
const bool sbs_fixedpoint_spike::ap_const_boolean_0 = false;
const sc_lv<31> sbs_fixedpoint_spike::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> sbs_fixedpoint_spike::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<31> sbs_fixedpoint_spike::ap_const_lv31_1 = "1";

sbs_fixedpoint_spike::sbs_fixedpoint_spike(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U = new sbs_fixedpoint_spike_CRTL_BUS_s_axi<C_S_AXI_CRTL_BUS_ADDR_WIDTH,C_S_AXI_CRTL_BUS_DATA_WIDTH>("sbs_fixedpoint_spike_CRTL_BUS_s_axi_U");
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->AWVALID(s_axi_CRTL_BUS_AWVALID);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->AWREADY(s_axi_CRTL_BUS_AWREADY);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->AWADDR(s_axi_CRTL_BUS_AWADDR);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->WVALID(s_axi_CRTL_BUS_WVALID);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->WREADY(s_axi_CRTL_BUS_WREADY);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->WDATA(s_axi_CRTL_BUS_WDATA);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->WSTRB(s_axi_CRTL_BUS_WSTRB);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->ARVALID(s_axi_CRTL_BUS_ARVALID);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->ARREADY(s_axi_CRTL_BUS_ARREADY);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->ARADDR(s_axi_CRTL_BUS_ARADDR);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->RVALID(s_axi_CRTL_BUS_RVALID);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->RREADY(s_axi_CRTL_BUS_RREADY);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->RDATA(s_axi_CRTL_BUS_RDATA);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->RRESP(s_axi_CRTL_BUS_RRESP);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->BVALID(s_axi_CRTL_BUS_BVALID);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->BREADY(s_axi_CRTL_BUS_BREADY);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->BRESP(s_axi_CRTL_BUS_BRESP);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->ACLK(ap_clk);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->ap_start(ap_start);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->interrupt(interrupt);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->ap_ready(ap_ready);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->ap_done(ap_done);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->ap_idle(ap_idle);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->layerSize(layerSize);
    sbs_fixedpoint_spike_CRTL_BUS_s_axi_U->vectorSize(vectorSize);
    sbs_fixedpoint_spike_add_64ns_64ns_64_2_1_U1 = new sbs_fixedpoint_spike_add_64ns_64ns_64_2_1<1,2,64,64,64>("sbs_fixedpoint_spike_add_64ns_64ns_64_2_1_U1");
    sbs_fixedpoint_spike_add_64ns_64ns_64_2_1_U1->clk(ap_clk);
    sbs_fixedpoint_spike_add_64ns_64ns_64_2_1_U1->reset(ap_rst_n_inv);
    sbs_fixedpoint_spike_add_64ns_64ns_64_2_1_U1->din0(sum);
    sbs_fixedpoint_spike_add_64ns_64ns_64_2_1_U1->din1(grp_fu_303_p1);
    sbs_fixedpoint_spike_add_64ns_64ns_64_2_1_U1->ce(grp_fu_303_ce);
    sbs_fixedpoint_spike_add_64ns_64ns_64_2_1_U1->dout(grp_fu_303_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln26_fu_314_p2);
    sensitive << ( ip_index );

    SC_METHOD(thread_add_ln40_fu_275_p2);
    sensitive << ( tmp_data_V_2_reg_158 );

    SC_METHOD(thread_add_ln46_fu_177_p2);
    sensitive << ( vectorSize_read_reg_364 );

    SC_METHOD(thread_add_ln48_fu_182_p2);
    sensitive << ( layerSize_read_reg_370 );

    SC_METHOD(thread_and_ln46_fu_329_p2);
    sensitive << ( icmp_ln46_1_reg_424 );
    sensitive << ( icmp_ln46_reg_440 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state3);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( stream_out_TREADY );
    sensitive << ( stream_out_V_data_V_1_state );
    sensitive << ( stream_out_V_keep_V_1_state );
    sensitive << ( stream_out_V_strb_V_1_state );
    sensitive << ( stream_out_V_user_V_1_state );
    sensitive << ( stream_out_V_last_V_1_state );
    sensitive << ( stream_out_V_id_V_1_state );
    sensitive << ( stream_out_V_dest_V_1_state );
    sensitive << ( icmp_ln26_fu_193_p2 );

    SC_METHOD(thread_ap_block_state4);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( icmp_ln40_fu_270_p2 );

    SC_METHOD(thread_ap_block_state7_io);
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( and_ln46_fu_329_p2 );

    SC_METHOD(thread_ap_block_state8_io);
    sensitive << ( stream_out_V_data_V_1_ack_in );
    sensitive << ( ap_predicate_op93_write_state8 );

    SC_METHOD(thread_ap_done);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( stream_out_TREADY );
    sensitive << ( stream_out_V_data_V_1_state );
    sensitive << ( stream_out_V_keep_V_1_state );
    sensitive << ( stream_out_V_strb_V_1_state );
    sensitive << ( stream_out_V_user_V_1_state );
    sensitive << ( stream_out_V_last_V_1_state );
    sensitive << ( stream_out_V_id_V_1_state );
    sensitive << ( stream_out_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln26_fu_193_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_predicate_op93_write_state8);
    sensitive << ( icmp_ln43_reg_415 );
    sensitive << ( and_ln46_reg_445 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( stream_out_TREADY );
    sensitive << ( stream_out_V_data_V_1_state );
    sensitive << ( stream_out_V_keep_V_1_state );
    sensitive << ( stream_out_V_strb_V_1_state );
    sensitive << ( stream_out_V_user_V_1_state );
    sensitive << ( stream_out_V_last_V_1_state );
    sensitive << ( stream_out_V_id_V_1_state );
    sensitive << ( stream_out_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln26_fu_193_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_fu_303_ce);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln40_fu_270_p2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_fu_303_p1);
    sensitive << ( stream_in_V_data_V_0_data_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_icmp_ln26_fu_193_p2);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( stream_out_TREADY );
    sensitive << ( stream_out_V_data_V_1_state );
    sensitive << ( stream_out_V_keep_V_1_state );
    sensitive << ( stream_out_V_strb_V_1_state );
    sensitive << ( stream_out_V_user_V_1_state );
    sensitive << ( stream_out_V_last_V_1_state );
    sensitive << ( stream_out_V_id_V_1_state );
    sensitive << ( stream_out_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln26_fu_193_p2 );
    sensitive << ( layerSize_read_reg_370 );
    sensitive << ( empty_reg_147 );

    SC_METHOD(thread_icmp_ln29_fu_198_p2);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( stream_out_TREADY );
    sensitive << ( stream_out_V_data_V_1_state );
    sensitive << ( stream_out_V_keep_V_1_state );
    sensitive << ( stream_out_V_strb_V_1_state );
    sensitive << ( stream_out_V_user_V_1_state );
    sensitive << ( stream_out_V_last_V_1_state );
    sensitive << ( stream_out_V_id_V_1_state );
    sensitive << ( stream_out_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln26_fu_193_p2 );
    sensitive << ( empty_reg_147 );

    SC_METHOD(thread_icmp_ln40_fu_270_p2);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln40_fu_270_p2 );
    sensitive << ( vectorSize_read_reg_364 );
    sensitive << ( tmp_data_V_3_fu_266_p1 );

    SC_METHOD(thread_icmp_ln43_fu_293_p2);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( sum );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln40_fu_270_p2 );
    sensitive << ( zext_ln43_fu_289_p1 );

    SC_METHOD(thread_icmp_ln46_1_fu_309_p2);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln40_fu_270_p2 );
    sensitive << ( add_ln46_reg_376 );
    sensitive << ( tmp_data_V_3_fu_266_p1 );
    sensitive << ( icmp_ln43_fu_293_p2 );

    SC_METHOD(thread_icmp_ln46_fu_325_p2);
    sensitive << ( zext_ln43_reg_410 );
    sensitive << ( add_ln45_reg_434 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_stream_in_TDATA_blk_n);
    sensitive << ( stream_in_V_data_V_0_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln26_fu_193_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln40_fu_270_p2 );

    SC_METHOD(thread_stream_in_TREADY);
    sensitive << ( stream_in_V_dest_V_0_state );

    SC_METHOD(thread_stream_in_V_data_V_0_ack_in);
    sensitive << ( stream_in_V_data_V_0_state );

    SC_METHOD(thread_stream_in_V_data_V_0_ack_out);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( stream_out_TREADY );
    sensitive << ( stream_out_V_data_V_1_state );
    sensitive << ( stream_out_V_keep_V_1_state );
    sensitive << ( stream_out_V_strb_V_1_state );
    sensitive << ( stream_out_V_user_V_1_state );
    sensitive << ( stream_out_V_last_V_1_state );
    sensitive << ( stream_out_V_id_V_1_state );
    sensitive << ( stream_out_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln26_fu_193_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln40_fu_270_p2 );

    SC_METHOD(thread_stream_in_V_data_V_0_data_out);
    sensitive << ( stream_in_V_data_V_0_payload_A );
    sensitive << ( stream_in_V_data_V_0_payload_B );
    sensitive << ( stream_in_V_data_V_0_sel );

    SC_METHOD(thread_stream_in_V_data_V_0_load_A);
    sensitive << ( stream_in_V_data_V_0_sel_wr );
    sensitive << ( stream_in_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_stream_in_V_data_V_0_load_B);
    sensitive << ( stream_in_V_data_V_0_sel_wr );
    sensitive << ( stream_in_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_stream_in_V_data_V_0_sel);
    sensitive << ( stream_in_V_data_V_0_sel_rd );

    SC_METHOD(thread_stream_in_V_data_V_0_state_cmp_full);
    sensitive << ( stream_in_V_data_V_0_state );

    SC_METHOD(thread_stream_in_V_data_V_0_vld_in);
    sensitive << ( stream_in_TVALID );

    SC_METHOD(thread_stream_in_V_data_V_0_vld_out);
    sensitive << ( stream_in_V_data_V_0_state );

    SC_METHOD(thread_stream_in_V_dest_V_0_ack_in);
    sensitive << ( stream_in_V_dest_V_0_state );

    SC_METHOD(thread_stream_in_V_dest_V_0_ack_out);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( stream_out_TREADY );
    sensitive << ( stream_out_V_data_V_1_state );
    sensitive << ( stream_out_V_keep_V_1_state );
    sensitive << ( stream_out_V_strb_V_1_state );
    sensitive << ( stream_out_V_user_V_1_state );
    sensitive << ( stream_out_V_last_V_1_state );
    sensitive << ( stream_out_V_id_V_1_state );
    sensitive << ( stream_out_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln26_fu_193_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln40_fu_270_p2 );

    SC_METHOD(thread_stream_in_V_dest_V_0_data_out);
    sensitive << ( stream_in_V_dest_V_0_payload_A );
    sensitive << ( stream_in_V_dest_V_0_payload_B );
    sensitive << ( stream_in_V_dest_V_0_sel );

    SC_METHOD(thread_stream_in_V_dest_V_0_load_A);
    sensitive << ( stream_in_V_dest_V_0_sel_wr );
    sensitive << ( stream_in_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_stream_in_V_dest_V_0_load_B);
    sensitive << ( stream_in_V_dest_V_0_sel_wr );
    sensitive << ( stream_in_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_stream_in_V_dest_V_0_sel);
    sensitive << ( stream_in_V_dest_V_0_sel_rd );

    SC_METHOD(thread_stream_in_V_dest_V_0_state_cmp_full);
    sensitive << ( stream_in_V_dest_V_0_state );

    SC_METHOD(thread_stream_in_V_dest_V_0_vld_in);
    sensitive << ( stream_in_TVALID );

    SC_METHOD(thread_stream_in_V_dest_V_0_vld_out);
    sensitive << ( stream_in_V_dest_V_0_state );

    SC_METHOD(thread_stream_in_V_id_V_0_ack_in);
    sensitive << ( stream_in_V_id_V_0_state );

    SC_METHOD(thread_stream_in_V_id_V_0_ack_out);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( stream_out_TREADY );
    sensitive << ( stream_out_V_data_V_1_state );
    sensitive << ( stream_out_V_keep_V_1_state );
    sensitive << ( stream_out_V_strb_V_1_state );
    sensitive << ( stream_out_V_user_V_1_state );
    sensitive << ( stream_out_V_last_V_1_state );
    sensitive << ( stream_out_V_id_V_1_state );
    sensitive << ( stream_out_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln26_fu_193_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln40_fu_270_p2 );

    SC_METHOD(thread_stream_in_V_id_V_0_data_out);
    sensitive << ( stream_in_V_id_V_0_payload_A );
    sensitive << ( stream_in_V_id_V_0_payload_B );
    sensitive << ( stream_in_V_id_V_0_sel );

    SC_METHOD(thread_stream_in_V_id_V_0_load_A);
    sensitive << ( stream_in_V_id_V_0_sel_wr );
    sensitive << ( stream_in_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_stream_in_V_id_V_0_load_B);
    sensitive << ( stream_in_V_id_V_0_sel_wr );
    sensitive << ( stream_in_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_stream_in_V_id_V_0_sel);
    sensitive << ( stream_in_V_id_V_0_sel_rd );

    SC_METHOD(thread_stream_in_V_id_V_0_state_cmp_full);
    sensitive << ( stream_in_V_id_V_0_state );

    SC_METHOD(thread_stream_in_V_id_V_0_vld_in);
    sensitive << ( stream_in_TVALID );

    SC_METHOD(thread_stream_in_V_id_V_0_vld_out);
    sensitive << ( stream_in_V_id_V_0_state );

    SC_METHOD(thread_stream_in_V_keep_V_0_ack_in);
    sensitive << ( stream_in_V_keep_V_0_state );

    SC_METHOD(thread_stream_in_V_keep_V_0_ack_out);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( stream_out_TREADY );
    sensitive << ( stream_out_V_data_V_1_state );
    sensitive << ( stream_out_V_keep_V_1_state );
    sensitive << ( stream_out_V_strb_V_1_state );
    sensitive << ( stream_out_V_user_V_1_state );
    sensitive << ( stream_out_V_last_V_1_state );
    sensitive << ( stream_out_V_id_V_1_state );
    sensitive << ( stream_out_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln26_fu_193_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln40_fu_270_p2 );

    SC_METHOD(thread_stream_in_V_keep_V_0_data_out);
    sensitive << ( stream_in_V_keep_V_0_payload_A );
    sensitive << ( stream_in_V_keep_V_0_payload_B );
    sensitive << ( stream_in_V_keep_V_0_sel );

    SC_METHOD(thread_stream_in_V_keep_V_0_load_A);
    sensitive << ( stream_in_V_keep_V_0_sel_wr );
    sensitive << ( stream_in_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_stream_in_V_keep_V_0_load_B);
    sensitive << ( stream_in_V_keep_V_0_sel_wr );
    sensitive << ( stream_in_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_stream_in_V_keep_V_0_sel);
    sensitive << ( stream_in_V_keep_V_0_sel_rd );

    SC_METHOD(thread_stream_in_V_keep_V_0_state_cmp_full);
    sensitive << ( stream_in_V_keep_V_0_state );

    SC_METHOD(thread_stream_in_V_keep_V_0_vld_in);
    sensitive << ( stream_in_TVALID );

    SC_METHOD(thread_stream_in_V_keep_V_0_vld_out);
    sensitive << ( stream_in_V_keep_V_0_state );

    SC_METHOD(thread_stream_in_V_strb_V_0_ack_in);
    sensitive << ( stream_in_V_strb_V_0_state );

    SC_METHOD(thread_stream_in_V_strb_V_0_ack_out);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( stream_out_TREADY );
    sensitive << ( stream_out_V_data_V_1_state );
    sensitive << ( stream_out_V_keep_V_1_state );
    sensitive << ( stream_out_V_strb_V_1_state );
    sensitive << ( stream_out_V_user_V_1_state );
    sensitive << ( stream_out_V_last_V_1_state );
    sensitive << ( stream_out_V_id_V_1_state );
    sensitive << ( stream_out_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln26_fu_193_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln40_fu_270_p2 );

    SC_METHOD(thread_stream_in_V_strb_V_0_data_out);
    sensitive << ( stream_in_V_strb_V_0_payload_A );
    sensitive << ( stream_in_V_strb_V_0_payload_B );
    sensitive << ( stream_in_V_strb_V_0_sel );

    SC_METHOD(thread_stream_in_V_strb_V_0_load_A);
    sensitive << ( stream_in_V_strb_V_0_sel_wr );
    sensitive << ( stream_in_V_strb_V_0_state_cmp_full );

    SC_METHOD(thread_stream_in_V_strb_V_0_load_B);
    sensitive << ( stream_in_V_strb_V_0_sel_wr );
    sensitive << ( stream_in_V_strb_V_0_state_cmp_full );

    SC_METHOD(thread_stream_in_V_strb_V_0_sel);
    sensitive << ( stream_in_V_strb_V_0_sel_rd );

    SC_METHOD(thread_stream_in_V_strb_V_0_state_cmp_full);
    sensitive << ( stream_in_V_strb_V_0_state );

    SC_METHOD(thread_stream_in_V_strb_V_0_vld_in);
    sensitive << ( stream_in_TVALID );

    SC_METHOD(thread_stream_in_V_strb_V_0_vld_out);
    sensitive << ( stream_in_V_strb_V_0_state );

    SC_METHOD(thread_stream_in_V_user_V_0_ack_in);
    sensitive << ( stream_in_V_user_V_0_state );

    SC_METHOD(thread_stream_in_V_user_V_0_ack_out);
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( stream_out_TREADY );
    sensitive << ( stream_out_V_data_V_1_state );
    sensitive << ( stream_out_V_keep_V_1_state );
    sensitive << ( stream_out_V_strb_V_1_state );
    sensitive << ( stream_out_V_user_V_1_state );
    sensitive << ( stream_out_V_last_V_1_state );
    sensitive << ( stream_out_V_id_V_1_state );
    sensitive << ( stream_out_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln26_fu_193_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln40_fu_270_p2 );

    SC_METHOD(thread_stream_in_V_user_V_0_data_out);
    sensitive << ( stream_in_V_user_V_0_payload_A );
    sensitive << ( stream_in_V_user_V_0_payload_B );
    sensitive << ( stream_in_V_user_V_0_sel );

    SC_METHOD(thread_stream_in_V_user_V_0_load_A);
    sensitive << ( stream_in_V_user_V_0_sel_wr );
    sensitive << ( stream_in_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_stream_in_V_user_V_0_load_B);
    sensitive << ( stream_in_V_user_V_0_sel_wr );
    sensitive << ( stream_in_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_stream_in_V_user_V_0_sel);
    sensitive << ( stream_in_V_user_V_0_sel_rd );

    SC_METHOD(thread_stream_in_V_user_V_0_state_cmp_full);
    sensitive << ( stream_in_V_user_V_0_state );

    SC_METHOD(thread_stream_in_V_user_V_0_vld_in);
    sensitive << ( stream_in_TVALID );

    SC_METHOD(thread_stream_in_V_user_V_0_vld_out);
    sensitive << ( stream_in_V_user_V_0_state );

    SC_METHOD(thread_stream_out_TDATA);
    sensitive << ( stream_out_V_data_V_1_data_out );

    SC_METHOD(thread_stream_out_TDATA_blk_n);
    sensitive << ( stream_out_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( and_ln46_fu_329_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln43_reg_415 );
    sensitive << ( and_ln46_reg_445 );

    SC_METHOD(thread_stream_out_TDEST);
    sensitive << ( stream_out_V_dest_V_1_data_out );

    SC_METHOD(thread_stream_out_TID);
    sensitive << ( stream_out_V_id_V_1_data_out );

    SC_METHOD(thread_stream_out_TKEEP);
    sensitive << ( stream_out_V_keep_V_1_data_out );

    SC_METHOD(thread_stream_out_TLAST);
    sensitive << ( stream_out_V_last_V_1_data_out );

    SC_METHOD(thread_stream_out_TSTRB);
    sensitive << ( stream_out_V_strb_V_1_data_out );

    SC_METHOD(thread_stream_out_TUSER);
    sensitive << ( stream_out_V_user_V_1_data_out );

    SC_METHOD(thread_stream_out_TVALID);
    sensitive << ( stream_out_V_dest_V_1_state );

    SC_METHOD(thread_stream_out_V_data_V_1_ack_in);
    sensitive << ( stream_out_V_data_V_1_state );

    SC_METHOD(thread_stream_out_V_data_V_1_ack_out);
    sensitive << ( stream_out_TREADY );

    SC_METHOD(thread_stream_out_V_data_V_1_data_out);
    sensitive << ( stream_out_V_data_V_1_payload_A );
    sensitive << ( stream_out_V_data_V_1_payload_B );
    sensitive << ( stream_out_V_data_V_1_sel );

    SC_METHOD(thread_stream_out_V_data_V_1_load_A);
    sensitive << ( stream_out_V_data_V_1_sel_wr );
    sensitive << ( stream_out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_data_V_1_load_B);
    sensitive << ( stream_out_V_data_V_1_sel_wr );
    sensitive << ( stream_out_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_data_V_1_sel);
    sensitive << ( stream_out_V_data_V_1_sel_rd );

    SC_METHOD(thread_stream_out_V_data_V_1_state_cmp_full);
    sensitive << ( stream_out_V_data_V_1_state );

    SC_METHOD(thread_stream_out_V_data_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( and_ln46_fu_329_p2 );
    sensitive << ( ap_block_state7_io );

    SC_METHOD(thread_stream_out_V_data_V_1_vld_out);
    sensitive << ( stream_out_V_data_V_1_state );

    SC_METHOD(thread_stream_out_V_dest_V_1_ack_in);
    sensitive << ( stream_out_V_dest_V_1_state );

    SC_METHOD(thread_stream_out_V_dest_V_1_ack_out);
    sensitive << ( stream_out_TREADY );

    SC_METHOD(thread_stream_out_V_dest_V_1_data_out);
    sensitive << ( stream_out_V_dest_V_1_payload_A );
    sensitive << ( stream_out_V_dest_V_1_payload_B );
    sensitive << ( stream_out_V_dest_V_1_sel );

    SC_METHOD(thread_stream_out_V_dest_V_1_load_A);
    sensitive << ( stream_out_V_dest_V_1_sel_wr );
    sensitive << ( stream_out_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_dest_V_1_load_B);
    sensitive << ( stream_out_V_dest_V_1_sel_wr );
    sensitive << ( stream_out_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_dest_V_1_sel);
    sensitive << ( stream_out_V_dest_V_1_sel_rd );

    SC_METHOD(thread_stream_out_V_dest_V_1_state_cmp_full);
    sensitive << ( stream_out_V_dest_V_1_state );

    SC_METHOD(thread_stream_out_V_dest_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( and_ln46_fu_329_p2 );
    sensitive << ( ap_block_state7_io );

    SC_METHOD(thread_stream_out_V_dest_V_1_vld_out);
    sensitive << ( stream_out_V_dest_V_1_state );

    SC_METHOD(thread_stream_out_V_id_V_1_ack_in);
    sensitive << ( stream_out_V_id_V_1_state );

    SC_METHOD(thread_stream_out_V_id_V_1_ack_out);
    sensitive << ( stream_out_TREADY );

    SC_METHOD(thread_stream_out_V_id_V_1_data_out);
    sensitive << ( stream_out_V_id_V_1_payload_A );
    sensitive << ( stream_out_V_id_V_1_payload_B );
    sensitive << ( stream_out_V_id_V_1_sel );

    SC_METHOD(thread_stream_out_V_id_V_1_load_A);
    sensitive << ( stream_out_V_id_V_1_sel_wr );
    sensitive << ( stream_out_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_id_V_1_load_B);
    sensitive << ( stream_out_V_id_V_1_sel_wr );
    sensitive << ( stream_out_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_id_V_1_sel);
    sensitive << ( stream_out_V_id_V_1_sel_rd );

    SC_METHOD(thread_stream_out_V_id_V_1_state_cmp_full);
    sensitive << ( stream_out_V_id_V_1_state );

    SC_METHOD(thread_stream_out_V_id_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( and_ln46_fu_329_p2 );
    sensitive << ( ap_block_state7_io );

    SC_METHOD(thread_stream_out_V_id_V_1_vld_out);
    sensitive << ( stream_out_V_id_V_1_state );

    SC_METHOD(thread_stream_out_V_keep_V_1_ack_in);
    sensitive << ( stream_out_V_keep_V_1_state );

    SC_METHOD(thread_stream_out_V_keep_V_1_ack_out);
    sensitive << ( stream_out_TREADY );

    SC_METHOD(thread_stream_out_V_keep_V_1_data_out);
    sensitive << ( stream_out_V_keep_V_1_payload_A );
    sensitive << ( stream_out_V_keep_V_1_payload_B );
    sensitive << ( stream_out_V_keep_V_1_sel );

    SC_METHOD(thread_stream_out_V_keep_V_1_load_A);
    sensitive << ( stream_out_V_keep_V_1_sel_wr );
    sensitive << ( stream_out_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_keep_V_1_load_B);
    sensitive << ( stream_out_V_keep_V_1_sel_wr );
    sensitive << ( stream_out_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_keep_V_1_sel);
    sensitive << ( stream_out_V_keep_V_1_sel_rd );

    SC_METHOD(thread_stream_out_V_keep_V_1_state_cmp_full);
    sensitive << ( stream_out_V_keep_V_1_state );

    SC_METHOD(thread_stream_out_V_keep_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( and_ln46_fu_329_p2 );
    sensitive << ( ap_block_state7_io );

    SC_METHOD(thread_stream_out_V_keep_V_1_vld_out);
    sensitive << ( stream_out_V_keep_V_1_state );

    SC_METHOD(thread_stream_out_V_last_V_1_ack_in);
    sensitive << ( stream_out_V_last_V_1_state );

    SC_METHOD(thread_stream_out_V_last_V_1_ack_out);
    sensitive << ( stream_out_TREADY );

    SC_METHOD(thread_stream_out_V_last_V_1_data_out);
    sensitive << ( stream_out_V_last_V_1_payload_A );
    sensitive << ( stream_out_V_last_V_1_payload_B );
    sensitive << ( stream_out_V_last_V_1_sel );

    SC_METHOD(thread_stream_out_V_last_V_1_load_A);
    sensitive << ( stream_out_V_last_V_1_sel_wr );
    sensitive << ( stream_out_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_last_V_1_load_B);
    sensitive << ( stream_out_V_last_V_1_sel_wr );
    sensitive << ( stream_out_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_last_V_1_sel);
    sensitive << ( stream_out_V_last_V_1_sel_rd );

    SC_METHOD(thread_stream_out_V_last_V_1_state_cmp_full);
    sensitive << ( stream_out_V_last_V_1_state );

    SC_METHOD(thread_stream_out_V_last_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( and_ln46_fu_329_p2 );
    sensitive << ( ap_block_state7_io );

    SC_METHOD(thread_stream_out_V_last_V_1_vld_out);
    sensitive << ( stream_out_V_last_V_1_state );

    SC_METHOD(thread_stream_out_V_strb_V_1_ack_in);
    sensitive << ( stream_out_V_strb_V_1_state );

    SC_METHOD(thread_stream_out_V_strb_V_1_ack_out);
    sensitive << ( stream_out_TREADY );

    SC_METHOD(thread_stream_out_V_strb_V_1_data_out);
    sensitive << ( stream_out_V_strb_V_1_payload_A );
    sensitive << ( stream_out_V_strb_V_1_payload_B );
    sensitive << ( stream_out_V_strb_V_1_sel );

    SC_METHOD(thread_stream_out_V_strb_V_1_load_A);
    sensitive << ( stream_out_V_strb_V_1_sel_wr );
    sensitive << ( stream_out_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_strb_V_1_load_B);
    sensitive << ( stream_out_V_strb_V_1_sel_wr );
    sensitive << ( stream_out_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_strb_V_1_sel);
    sensitive << ( stream_out_V_strb_V_1_sel_rd );

    SC_METHOD(thread_stream_out_V_strb_V_1_state_cmp_full);
    sensitive << ( stream_out_V_strb_V_1_state );

    SC_METHOD(thread_stream_out_V_strb_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( and_ln46_fu_329_p2 );
    sensitive << ( ap_block_state7_io );

    SC_METHOD(thread_stream_out_V_strb_V_1_vld_out);
    sensitive << ( stream_out_V_strb_V_1_state );

    SC_METHOD(thread_stream_out_V_user_V_1_ack_in);
    sensitive << ( stream_out_V_user_V_1_state );

    SC_METHOD(thread_stream_out_V_user_V_1_ack_out);
    sensitive << ( stream_out_TREADY );

    SC_METHOD(thread_stream_out_V_user_V_1_data_out);
    sensitive << ( stream_out_V_user_V_1_payload_A );
    sensitive << ( stream_out_V_user_V_1_payload_B );
    sensitive << ( stream_out_V_user_V_1_sel );

    SC_METHOD(thread_stream_out_V_user_V_1_load_A);
    sensitive << ( stream_out_V_user_V_1_sel_wr );
    sensitive << ( stream_out_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_user_V_1_load_B);
    sensitive << ( stream_out_V_user_V_1_sel_wr );
    sensitive << ( stream_out_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_stream_out_V_user_V_1_sel);
    sensitive << ( stream_out_V_user_V_1_sel_rd );

    SC_METHOD(thread_stream_out_V_user_V_1_state_cmp_full);
    sensitive << ( stream_out_V_user_V_1_state );

    SC_METHOD(thread_stream_out_V_user_V_1_vld_in);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( and_ln46_fu_329_p2 );
    sensitive << ( ap_block_state7_io );

    SC_METHOD(thread_stream_out_V_user_V_1_vld_out);
    sensitive << ( stream_out_V_user_V_1_state );

    SC_METHOD(thread_tmp_data_V_3_fu_266_p1);
    sensitive << ( tmp_data_V_2_reg_158 );

    SC_METHOD(thread_tmp_last_V_fu_333_p2);
    sensitive << ( ip_index );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( and_ln46_fu_329_p2 );
    sensitive << ( add_ln48_reg_381 );
    sensitive << ( ap_block_state7_io );

    SC_METHOD(thread_zext_ln43_fu_289_p1);
    sensitive << ( random_value );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_in_V_data_V_0_vld_out );
    sensitive << ( stream_out_TREADY );
    sensitive << ( stream_out_V_data_V_1_state );
    sensitive << ( stream_out_V_keep_V_1_state );
    sensitive << ( stream_out_V_strb_V_1_state );
    sensitive << ( stream_out_V_user_V_1_state );
    sensitive << ( stream_out_V_last_V_1_state );
    sensitive << ( stream_out_V_id_V_1_state );
    sensitive << ( stream_out_V_dest_V_1_state );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln26_fu_193_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( icmp_ln40_fu_270_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( icmp_ln43_fu_293_p2 );
    sensitive << ( ap_block_state7_io );
    sensitive << ( ap_block_state8_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000001";
    stream_in_V_data_V_0_sel_rd = SC_LOGIC_0;
    stream_in_V_data_V_0_sel_wr = SC_LOGIC_0;
    stream_in_V_data_V_0_state = "00";
    stream_in_V_keep_V_0_sel_rd = SC_LOGIC_0;
    stream_in_V_keep_V_0_sel_wr = SC_LOGIC_0;
    stream_in_V_keep_V_0_state = "00";
    stream_in_V_strb_V_0_sel_rd = SC_LOGIC_0;
    stream_in_V_strb_V_0_sel_wr = SC_LOGIC_0;
    stream_in_V_strb_V_0_state = "00";
    stream_in_V_user_V_0_sel_rd = SC_LOGIC_0;
    stream_in_V_user_V_0_sel_wr = SC_LOGIC_0;
    stream_in_V_user_V_0_state = "00";
    stream_in_V_id_V_0_sel_rd = SC_LOGIC_0;
    stream_in_V_id_V_0_sel_wr = SC_LOGIC_0;
    stream_in_V_id_V_0_state = "00";
    stream_in_V_dest_V_0_sel_rd = SC_LOGIC_0;
    stream_in_V_dest_V_0_sel_wr = SC_LOGIC_0;
    stream_in_V_dest_V_0_state = "00";
    stream_out_V_data_V_1_sel_rd = SC_LOGIC_0;
    stream_out_V_data_V_1_sel_wr = SC_LOGIC_0;
    stream_out_V_data_V_1_state = "00";
    stream_out_V_keep_V_1_sel_rd = SC_LOGIC_0;
    stream_out_V_keep_V_1_sel_wr = SC_LOGIC_0;
    stream_out_V_keep_V_1_state = "00";
    stream_out_V_strb_V_1_sel_rd = SC_LOGIC_0;
    stream_out_V_strb_V_1_sel_wr = SC_LOGIC_0;
    stream_out_V_strb_V_1_state = "00";
    stream_out_V_user_V_1_sel_rd = SC_LOGIC_0;
    stream_out_V_user_V_1_sel_wr = SC_LOGIC_0;
    stream_out_V_user_V_1_state = "00";
    stream_out_V_last_V_1_sel_rd = SC_LOGIC_0;
    stream_out_V_last_V_1_sel_wr = SC_LOGIC_0;
    stream_out_V_last_V_1_state = "00";
    stream_out_V_id_V_1_sel_rd = SC_LOGIC_0;
    stream_out_V_id_V_1_sel_wr = SC_LOGIC_0;
    stream_out_V_id_V_1_state = "00";
    stream_out_V_dest_V_1_sel_rd = SC_LOGIC_0;
    stream_out_V_dest_V_1_sel_wr = SC_LOGIC_0;
    stream_out_V_dest_V_1_state = "00";
    ip_index = "00000000000000000000000000000000";
    channel_keep_V = "0000";
    channel_strb_V = "0000";
    channel_user_V = "00";
    channel_id_V = "00000";
    channel_dest_V = "000000";
    random_value = "00000000000000000000000000000000";
    sum = "0000000000000000000000000000000000000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sbs_fixedpoint_spike_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, stream_in_TDATA, "(port)stream_in_TDATA");
    sc_trace(mVcdFile, stream_in_TVALID, "(port)stream_in_TVALID");
    sc_trace(mVcdFile, stream_in_TREADY, "(port)stream_in_TREADY");
    sc_trace(mVcdFile, stream_in_TKEEP, "(port)stream_in_TKEEP");
    sc_trace(mVcdFile, stream_in_TSTRB, "(port)stream_in_TSTRB");
    sc_trace(mVcdFile, stream_in_TUSER, "(port)stream_in_TUSER");
    sc_trace(mVcdFile, stream_in_TLAST, "(port)stream_in_TLAST");
    sc_trace(mVcdFile, stream_in_TID, "(port)stream_in_TID");
    sc_trace(mVcdFile, stream_in_TDEST, "(port)stream_in_TDEST");
    sc_trace(mVcdFile, stream_out_TDATA, "(port)stream_out_TDATA");
    sc_trace(mVcdFile, stream_out_TVALID, "(port)stream_out_TVALID");
    sc_trace(mVcdFile, stream_out_TREADY, "(port)stream_out_TREADY");
    sc_trace(mVcdFile, stream_out_TKEEP, "(port)stream_out_TKEEP");
    sc_trace(mVcdFile, stream_out_TSTRB, "(port)stream_out_TSTRB");
    sc_trace(mVcdFile, stream_out_TUSER, "(port)stream_out_TUSER");
    sc_trace(mVcdFile, stream_out_TLAST, "(port)stream_out_TLAST");
    sc_trace(mVcdFile, stream_out_TID, "(port)stream_out_TID");
    sc_trace(mVcdFile, stream_out_TDEST, "(port)stream_out_TDEST");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWVALID, "(port)s_axi_CRTL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWREADY, "(port)s_axi_CRTL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_AWADDR, "(port)s_axi_CRTL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WVALID, "(port)s_axi_CRTL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WREADY, "(port)s_axi_CRTL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WDATA, "(port)s_axi_CRTL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_WSTRB, "(port)s_axi_CRTL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARVALID, "(port)s_axi_CRTL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARREADY, "(port)s_axi_CRTL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_ARADDR, "(port)s_axi_CRTL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RVALID, "(port)s_axi_CRTL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RREADY, "(port)s_axi_CRTL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RDATA, "(port)s_axi_CRTL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_RRESP, "(port)s_axi_CRTL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BVALID, "(port)s_axi_CRTL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BREADY, "(port)s_axi_CRTL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CRTL_BUS_BRESP, "(port)s_axi_CRTL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, stream_in_V_data_V_0_data_out, "stream_in_V_data_V_0_data_out");
    sc_trace(mVcdFile, stream_in_V_data_V_0_vld_in, "stream_in_V_data_V_0_vld_in");
    sc_trace(mVcdFile, stream_in_V_data_V_0_vld_out, "stream_in_V_data_V_0_vld_out");
    sc_trace(mVcdFile, stream_in_V_data_V_0_ack_in, "stream_in_V_data_V_0_ack_in");
    sc_trace(mVcdFile, stream_in_V_data_V_0_ack_out, "stream_in_V_data_V_0_ack_out");
    sc_trace(mVcdFile, stream_in_V_data_V_0_payload_A, "stream_in_V_data_V_0_payload_A");
    sc_trace(mVcdFile, stream_in_V_data_V_0_payload_B, "stream_in_V_data_V_0_payload_B");
    sc_trace(mVcdFile, stream_in_V_data_V_0_sel_rd, "stream_in_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, stream_in_V_data_V_0_sel_wr, "stream_in_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, stream_in_V_data_V_0_sel, "stream_in_V_data_V_0_sel");
    sc_trace(mVcdFile, stream_in_V_data_V_0_load_A, "stream_in_V_data_V_0_load_A");
    sc_trace(mVcdFile, stream_in_V_data_V_0_load_B, "stream_in_V_data_V_0_load_B");
    sc_trace(mVcdFile, stream_in_V_data_V_0_state, "stream_in_V_data_V_0_state");
    sc_trace(mVcdFile, stream_in_V_data_V_0_state_cmp_full, "stream_in_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, stream_in_V_keep_V_0_data_out, "stream_in_V_keep_V_0_data_out");
    sc_trace(mVcdFile, stream_in_V_keep_V_0_vld_in, "stream_in_V_keep_V_0_vld_in");
    sc_trace(mVcdFile, stream_in_V_keep_V_0_vld_out, "stream_in_V_keep_V_0_vld_out");
    sc_trace(mVcdFile, stream_in_V_keep_V_0_ack_in, "stream_in_V_keep_V_0_ack_in");
    sc_trace(mVcdFile, stream_in_V_keep_V_0_ack_out, "stream_in_V_keep_V_0_ack_out");
    sc_trace(mVcdFile, stream_in_V_keep_V_0_payload_A, "stream_in_V_keep_V_0_payload_A");
    sc_trace(mVcdFile, stream_in_V_keep_V_0_payload_B, "stream_in_V_keep_V_0_payload_B");
    sc_trace(mVcdFile, stream_in_V_keep_V_0_sel_rd, "stream_in_V_keep_V_0_sel_rd");
    sc_trace(mVcdFile, stream_in_V_keep_V_0_sel_wr, "stream_in_V_keep_V_0_sel_wr");
    sc_trace(mVcdFile, stream_in_V_keep_V_0_sel, "stream_in_V_keep_V_0_sel");
    sc_trace(mVcdFile, stream_in_V_keep_V_0_load_A, "stream_in_V_keep_V_0_load_A");
    sc_trace(mVcdFile, stream_in_V_keep_V_0_load_B, "stream_in_V_keep_V_0_load_B");
    sc_trace(mVcdFile, stream_in_V_keep_V_0_state, "stream_in_V_keep_V_0_state");
    sc_trace(mVcdFile, stream_in_V_keep_V_0_state_cmp_full, "stream_in_V_keep_V_0_state_cmp_full");
    sc_trace(mVcdFile, stream_in_V_strb_V_0_data_out, "stream_in_V_strb_V_0_data_out");
    sc_trace(mVcdFile, stream_in_V_strb_V_0_vld_in, "stream_in_V_strb_V_0_vld_in");
    sc_trace(mVcdFile, stream_in_V_strb_V_0_vld_out, "stream_in_V_strb_V_0_vld_out");
    sc_trace(mVcdFile, stream_in_V_strb_V_0_ack_in, "stream_in_V_strb_V_0_ack_in");
    sc_trace(mVcdFile, stream_in_V_strb_V_0_ack_out, "stream_in_V_strb_V_0_ack_out");
    sc_trace(mVcdFile, stream_in_V_strb_V_0_payload_A, "stream_in_V_strb_V_0_payload_A");
    sc_trace(mVcdFile, stream_in_V_strb_V_0_payload_B, "stream_in_V_strb_V_0_payload_B");
    sc_trace(mVcdFile, stream_in_V_strb_V_0_sel_rd, "stream_in_V_strb_V_0_sel_rd");
    sc_trace(mVcdFile, stream_in_V_strb_V_0_sel_wr, "stream_in_V_strb_V_0_sel_wr");
    sc_trace(mVcdFile, stream_in_V_strb_V_0_sel, "stream_in_V_strb_V_0_sel");
    sc_trace(mVcdFile, stream_in_V_strb_V_0_load_A, "stream_in_V_strb_V_0_load_A");
    sc_trace(mVcdFile, stream_in_V_strb_V_0_load_B, "stream_in_V_strb_V_0_load_B");
    sc_trace(mVcdFile, stream_in_V_strb_V_0_state, "stream_in_V_strb_V_0_state");
    sc_trace(mVcdFile, stream_in_V_strb_V_0_state_cmp_full, "stream_in_V_strb_V_0_state_cmp_full");
    sc_trace(mVcdFile, stream_in_V_user_V_0_data_out, "stream_in_V_user_V_0_data_out");
    sc_trace(mVcdFile, stream_in_V_user_V_0_vld_in, "stream_in_V_user_V_0_vld_in");
    sc_trace(mVcdFile, stream_in_V_user_V_0_vld_out, "stream_in_V_user_V_0_vld_out");
    sc_trace(mVcdFile, stream_in_V_user_V_0_ack_in, "stream_in_V_user_V_0_ack_in");
    sc_trace(mVcdFile, stream_in_V_user_V_0_ack_out, "stream_in_V_user_V_0_ack_out");
    sc_trace(mVcdFile, stream_in_V_user_V_0_payload_A, "stream_in_V_user_V_0_payload_A");
    sc_trace(mVcdFile, stream_in_V_user_V_0_payload_B, "stream_in_V_user_V_0_payload_B");
    sc_trace(mVcdFile, stream_in_V_user_V_0_sel_rd, "stream_in_V_user_V_0_sel_rd");
    sc_trace(mVcdFile, stream_in_V_user_V_0_sel_wr, "stream_in_V_user_V_0_sel_wr");
    sc_trace(mVcdFile, stream_in_V_user_V_0_sel, "stream_in_V_user_V_0_sel");
    sc_trace(mVcdFile, stream_in_V_user_V_0_load_A, "stream_in_V_user_V_0_load_A");
    sc_trace(mVcdFile, stream_in_V_user_V_0_load_B, "stream_in_V_user_V_0_load_B");
    sc_trace(mVcdFile, stream_in_V_user_V_0_state, "stream_in_V_user_V_0_state");
    sc_trace(mVcdFile, stream_in_V_user_V_0_state_cmp_full, "stream_in_V_user_V_0_state_cmp_full");
    sc_trace(mVcdFile, stream_in_V_id_V_0_data_out, "stream_in_V_id_V_0_data_out");
    sc_trace(mVcdFile, stream_in_V_id_V_0_vld_in, "stream_in_V_id_V_0_vld_in");
    sc_trace(mVcdFile, stream_in_V_id_V_0_vld_out, "stream_in_V_id_V_0_vld_out");
    sc_trace(mVcdFile, stream_in_V_id_V_0_ack_in, "stream_in_V_id_V_0_ack_in");
    sc_trace(mVcdFile, stream_in_V_id_V_0_ack_out, "stream_in_V_id_V_0_ack_out");
    sc_trace(mVcdFile, stream_in_V_id_V_0_payload_A, "stream_in_V_id_V_0_payload_A");
    sc_trace(mVcdFile, stream_in_V_id_V_0_payload_B, "stream_in_V_id_V_0_payload_B");
    sc_trace(mVcdFile, stream_in_V_id_V_0_sel_rd, "stream_in_V_id_V_0_sel_rd");
    sc_trace(mVcdFile, stream_in_V_id_V_0_sel_wr, "stream_in_V_id_V_0_sel_wr");
    sc_trace(mVcdFile, stream_in_V_id_V_0_sel, "stream_in_V_id_V_0_sel");
    sc_trace(mVcdFile, stream_in_V_id_V_0_load_A, "stream_in_V_id_V_0_load_A");
    sc_trace(mVcdFile, stream_in_V_id_V_0_load_B, "stream_in_V_id_V_0_load_B");
    sc_trace(mVcdFile, stream_in_V_id_V_0_state, "stream_in_V_id_V_0_state");
    sc_trace(mVcdFile, stream_in_V_id_V_0_state_cmp_full, "stream_in_V_id_V_0_state_cmp_full");
    sc_trace(mVcdFile, stream_in_V_dest_V_0_data_out, "stream_in_V_dest_V_0_data_out");
    sc_trace(mVcdFile, stream_in_V_dest_V_0_vld_in, "stream_in_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, stream_in_V_dest_V_0_vld_out, "stream_in_V_dest_V_0_vld_out");
    sc_trace(mVcdFile, stream_in_V_dest_V_0_ack_in, "stream_in_V_dest_V_0_ack_in");
    sc_trace(mVcdFile, stream_in_V_dest_V_0_ack_out, "stream_in_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, stream_in_V_dest_V_0_payload_A, "stream_in_V_dest_V_0_payload_A");
    sc_trace(mVcdFile, stream_in_V_dest_V_0_payload_B, "stream_in_V_dest_V_0_payload_B");
    sc_trace(mVcdFile, stream_in_V_dest_V_0_sel_rd, "stream_in_V_dest_V_0_sel_rd");
    sc_trace(mVcdFile, stream_in_V_dest_V_0_sel_wr, "stream_in_V_dest_V_0_sel_wr");
    sc_trace(mVcdFile, stream_in_V_dest_V_0_sel, "stream_in_V_dest_V_0_sel");
    sc_trace(mVcdFile, stream_in_V_dest_V_0_load_A, "stream_in_V_dest_V_0_load_A");
    sc_trace(mVcdFile, stream_in_V_dest_V_0_load_B, "stream_in_V_dest_V_0_load_B");
    sc_trace(mVcdFile, stream_in_V_dest_V_0_state, "stream_in_V_dest_V_0_state");
    sc_trace(mVcdFile, stream_in_V_dest_V_0_state_cmp_full, "stream_in_V_dest_V_0_state_cmp_full");
    sc_trace(mVcdFile, stream_out_V_data_V_1_data_out, "stream_out_V_data_V_1_data_out");
    sc_trace(mVcdFile, stream_out_V_data_V_1_vld_in, "stream_out_V_data_V_1_vld_in");
    sc_trace(mVcdFile, stream_out_V_data_V_1_vld_out, "stream_out_V_data_V_1_vld_out");
    sc_trace(mVcdFile, stream_out_V_data_V_1_ack_in, "stream_out_V_data_V_1_ack_in");
    sc_trace(mVcdFile, stream_out_V_data_V_1_ack_out, "stream_out_V_data_V_1_ack_out");
    sc_trace(mVcdFile, stream_out_V_data_V_1_payload_A, "stream_out_V_data_V_1_payload_A");
    sc_trace(mVcdFile, stream_out_V_data_V_1_payload_B, "stream_out_V_data_V_1_payload_B");
    sc_trace(mVcdFile, stream_out_V_data_V_1_sel_rd, "stream_out_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, stream_out_V_data_V_1_sel_wr, "stream_out_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, stream_out_V_data_V_1_sel, "stream_out_V_data_V_1_sel");
    sc_trace(mVcdFile, stream_out_V_data_V_1_load_A, "stream_out_V_data_V_1_load_A");
    sc_trace(mVcdFile, stream_out_V_data_V_1_load_B, "stream_out_V_data_V_1_load_B");
    sc_trace(mVcdFile, stream_out_V_data_V_1_state, "stream_out_V_data_V_1_state");
    sc_trace(mVcdFile, stream_out_V_data_V_1_state_cmp_full, "stream_out_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_data_out, "stream_out_V_keep_V_1_data_out");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_vld_in, "stream_out_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_vld_out, "stream_out_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_ack_in, "stream_out_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_ack_out, "stream_out_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_payload_A, "stream_out_V_keep_V_1_payload_A");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_payload_B, "stream_out_V_keep_V_1_payload_B");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_sel_rd, "stream_out_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_sel_wr, "stream_out_V_keep_V_1_sel_wr");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_sel, "stream_out_V_keep_V_1_sel");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_load_A, "stream_out_V_keep_V_1_load_A");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_load_B, "stream_out_V_keep_V_1_load_B");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_state, "stream_out_V_keep_V_1_state");
    sc_trace(mVcdFile, stream_out_V_keep_V_1_state_cmp_full, "stream_out_V_keep_V_1_state_cmp_full");
    sc_trace(mVcdFile, stream_out_V_strb_V_1_data_out, "stream_out_V_strb_V_1_data_out");
    sc_trace(mVcdFile, stream_out_V_strb_V_1_vld_in, "stream_out_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, stream_out_V_strb_V_1_vld_out, "stream_out_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, stream_out_V_strb_V_1_ack_in, "stream_out_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, stream_out_V_strb_V_1_ack_out, "stream_out_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, stream_out_V_strb_V_1_payload_A, "stream_out_V_strb_V_1_payload_A");
    sc_trace(mVcdFile, stream_out_V_strb_V_1_payload_B, "stream_out_V_strb_V_1_payload_B");
    sc_trace(mVcdFile, stream_out_V_strb_V_1_sel_rd, "stream_out_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, stream_out_V_strb_V_1_sel_wr, "stream_out_V_strb_V_1_sel_wr");
    sc_trace(mVcdFile, stream_out_V_strb_V_1_sel, "stream_out_V_strb_V_1_sel");
    sc_trace(mVcdFile, stream_out_V_strb_V_1_load_A, "stream_out_V_strb_V_1_load_A");
    sc_trace(mVcdFile, stream_out_V_strb_V_1_load_B, "stream_out_V_strb_V_1_load_B");
    sc_trace(mVcdFile, stream_out_V_strb_V_1_state, "stream_out_V_strb_V_1_state");
    sc_trace(mVcdFile, stream_out_V_strb_V_1_state_cmp_full, "stream_out_V_strb_V_1_state_cmp_full");
    sc_trace(mVcdFile, stream_out_V_user_V_1_data_out, "stream_out_V_user_V_1_data_out");
    sc_trace(mVcdFile, stream_out_V_user_V_1_vld_in, "stream_out_V_user_V_1_vld_in");
    sc_trace(mVcdFile, stream_out_V_user_V_1_vld_out, "stream_out_V_user_V_1_vld_out");
    sc_trace(mVcdFile, stream_out_V_user_V_1_ack_in, "stream_out_V_user_V_1_ack_in");
    sc_trace(mVcdFile, stream_out_V_user_V_1_ack_out, "stream_out_V_user_V_1_ack_out");
    sc_trace(mVcdFile, stream_out_V_user_V_1_payload_A, "stream_out_V_user_V_1_payload_A");
    sc_trace(mVcdFile, stream_out_V_user_V_1_payload_B, "stream_out_V_user_V_1_payload_B");
    sc_trace(mVcdFile, stream_out_V_user_V_1_sel_rd, "stream_out_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, stream_out_V_user_V_1_sel_wr, "stream_out_V_user_V_1_sel_wr");
    sc_trace(mVcdFile, stream_out_V_user_V_1_sel, "stream_out_V_user_V_1_sel");
    sc_trace(mVcdFile, stream_out_V_user_V_1_load_A, "stream_out_V_user_V_1_load_A");
    sc_trace(mVcdFile, stream_out_V_user_V_1_load_B, "stream_out_V_user_V_1_load_B");
    sc_trace(mVcdFile, stream_out_V_user_V_1_state, "stream_out_V_user_V_1_state");
    sc_trace(mVcdFile, stream_out_V_user_V_1_state_cmp_full, "stream_out_V_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, stream_out_V_last_V_1_data_out, "stream_out_V_last_V_1_data_out");
    sc_trace(mVcdFile, stream_out_V_last_V_1_vld_in, "stream_out_V_last_V_1_vld_in");
    sc_trace(mVcdFile, stream_out_V_last_V_1_vld_out, "stream_out_V_last_V_1_vld_out");
    sc_trace(mVcdFile, stream_out_V_last_V_1_ack_in, "stream_out_V_last_V_1_ack_in");
    sc_trace(mVcdFile, stream_out_V_last_V_1_ack_out, "stream_out_V_last_V_1_ack_out");
    sc_trace(mVcdFile, stream_out_V_last_V_1_payload_A, "stream_out_V_last_V_1_payload_A");
    sc_trace(mVcdFile, stream_out_V_last_V_1_payload_B, "stream_out_V_last_V_1_payload_B");
    sc_trace(mVcdFile, stream_out_V_last_V_1_sel_rd, "stream_out_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, stream_out_V_last_V_1_sel_wr, "stream_out_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, stream_out_V_last_V_1_sel, "stream_out_V_last_V_1_sel");
    sc_trace(mVcdFile, stream_out_V_last_V_1_load_A, "stream_out_V_last_V_1_load_A");
    sc_trace(mVcdFile, stream_out_V_last_V_1_load_B, "stream_out_V_last_V_1_load_B");
    sc_trace(mVcdFile, stream_out_V_last_V_1_state, "stream_out_V_last_V_1_state");
    sc_trace(mVcdFile, stream_out_V_last_V_1_state_cmp_full, "stream_out_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, stream_out_V_id_V_1_data_out, "stream_out_V_id_V_1_data_out");
    sc_trace(mVcdFile, stream_out_V_id_V_1_vld_in, "stream_out_V_id_V_1_vld_in");
    sc_trace(mVcdFile, stream_out_V_id_V_1_vld_out, "stream_out_V_id_V_1_vld_out");
    sc_trace(mVcdFile, stream_out_V_id_V_1_ack_in, "stream_out_V_id_V_1_ack_in");
    sc_trace(mVcdFile, stream_out_V_id_V_1_ack_out, "stream_out_V_id_V_1_ack_out");
    sc_trace(mVcdFile, stream_out_V_id_V_1_payload_A, "stream_out_V_id_V_1_payload_A");
    sc_trace(mVcdFile, stream_out_V_id_V_1_payload_B, "stream_out_V_id_V_1_payload_B");
    sc_trace(mVcdFile, stream_out_V_id_V_1_sel_rd, "stream_out_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, stream_out_V_id_V_1_sel_wr, "stream_out_V_id_V_1_sel_wr");
    sc_trace(mVcdFile, stream_out_V_id_V_1_sel, "stream_out_V_id_V_1_sel");
    sc_trace(mVcdFile, stream_out_V_id_V_1_load_A, "stream_out_V_id_V_1_load_A");
    sc_trace(mVcdFile, stream_out_V_id_V_1_load_B, "stream_out_V_id_V_1_load_B");
    sc_trace(mVcdFile, stream_out_V_id_V_1_state, "stream_out_V_id_V_1_state");
    sc_trace(mVcdFile, stream_out_V_id_V_1_state_cmp_full, "stream_out_V_id_V_1_state_cmp_full");
    sc_trace(mVcdFile, stream_out_V_dest_V_1_data_out, "stream_out_V_dest_V_1_data_out");
    sc_trace(mVcdFile, stream_out_V_dest_V_1_vld_in, "stream_out_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, stream_out_V_dest_V_1_vld_out, "stream_out_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, stream_out_V_dest_V_1_ack_in, "stream_out_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, stream_out_V_dest_V_1_ack_out, "stream_out_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, stream_out_V_dest_V_1_payload_A, "stream_out_V_dest_V_1_payload_A");
    sc_trace(mVcdFile, stream_out_V_dest_V_1_payload_B, "stream_out_V_dest_V_1_payload_B");
    sc_trace(mVcdFile, stream_out_V_dest_V_1_sel_rd, "stream_out_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, stream_out_V_dest_V_1_sel_wr, "stream_out_V_dest_V_1_sel_wr");
    sc_trace(mVcdFile, stream_out_V_dest_V_1_sel, "stream_out_V_dest_V_1_sel");
    sc_trace(mVcdFile, stream_out_V_dest_V_1_load_A, "stream_out_V_dest_V_1_load_A");
    sc_trace(mVcdFile, stream_out_V_dest_V_1_load_B, "stream_out_V_dest_V_1_load_B");
    sc_trace(mVcdFile, stream_out_V_dest_V_1_state, "stream_out_V_dest_V_1_state");
    sc_trace(mVcdFile, stream_out_V_dest_V_1_state_cmp_full, "stream_out_V_dest_V_1_state_cmp_full");
    sc_trace(mVcdFile, layerSize, "layerSize");
    sc_trace(mVcdFile, vectorSize, "vectorSize");
    sc_trace(mVcdFile, ip_index, "ip_index");
    sc_trace(mVcdFile, channel_keep_V, "channel_keep_V");
    sc_trace(mVcdFile, channel_strb_V, "channel_strb_V");
    sc_trace(mVcdFile, channel_user_V, "channel_user_V");
    sc_trace(mVcdFile, channel_id_V, "channel_id_V");
    sc_trace(mVcdFile, channel_dest_V, "channel_dest_V");
    sc_trace(mVcdFile, random_value, "random_value");
    sc_trace(mVcdFile, sum, "sum");
    sc_trace(mVcdFile, stream_in_TDATA_blk_n, "stream_in_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln26_fu_193_p2, "icmp_ln26_fu_193_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, icmp_ln40_fu_270_p2, "icmp_ln40_fu_270_p2");
    sc_trace(mVcdFile, stream_out_TDATA_blk_n, "stream_out_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, and_ln46_fu_329_p2, "and_ln46_fu_329_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, icmp_ln43_reg_415, "icmp_ln43_reg_415");
    sc_trace(mVcdFile, and_ln46_reg_445, "and_ln46_reg_445");
    sc_trace(mVcdFile, vectorSize_read_reg_364, "vectorSize_read_reg_364");
    sc_trace(mVcdFile, layerSize_read_reg_370, "layerSize_read_reg_370");
    sc_trace(mVcdFile, add_ln46_fu_177_p2, "add_ln46_fu_177_p2");
    sc_trace(mVcdFile, add_ln46_reg_376, "add_ln46_reg_376");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, add_ln48_fu_182_p2, "add_ln48_fu_182_p2");
    sc_trace(mVcdFile, add_ln48_reg_381, "add_ln48_reg_381");
    sc_trace(mVcdFile, tmp_data_V_3_fu_266_p1, "tmp_data_V_3_fu_266_p1");
    sc_trace(mVcdFile, tmp_data_V_3_reg_392, "tmp_data_V_3_reg_392");
    sc_trace(mVcdFile, ap_block_state4, "ap_block_state4");
    sc_trace(mVcdFile, add_ln40_fu_275_p2, "add_ln40_fu_275_p2");
    sc_trace(mVcdFile, add_ln40_reg_400, "add_ln40_reg_400");
    sc_trace(mVcdFile, zext_ln43_fu_289_p1, "zext_ln43_fu_289_p1");
    sc_trace(mVcdFile, zext_ln43_reg_410, "zext_ln43_reg_410");
    sc_trace(mVcdFile, icmp_ln43_fu_293_p2, "icmp_ln43_fu_293_p2");
    sc_trace(mVcdFile, icmp_ln46_1_fu_309_p2, "icmp_ln46_1_fu_309_p2");
    sc_trace(mVcdFile, icmp_ln46_1_reg_424, "icmp_ln46_1_reg_424");
    sc_trace(mVcdFile, add_ln26_fu_314_p2, "add_ln26_fu_314_p2");
    sc_trace(mVcdFile, grp_fu_303_p2, "grp_fu_303_p2");
    sc_trace(mVcdFile, add_ln45_reg_434, "add_ln45_reg_434");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln46_fu_325_p2, "icmp_ln46_fu_325_p2");
    sc_trace(mVcdFile, icmp_ln46_reg_440, "icmp_ln46_reg_440");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_block_state7_io, "ap_block_state7_io");
    sc_trace(mVcdFile, tmp_last_V_fu_333_p2, "tmp_last_V_fu_333_p2");
    sc_trace(mVcdFile, empty_reg_147, "empty_reg_147");
    sc_trace(mVcdFile, tmp_data_V_2_reg_158, "tmp_data_V_2_reg_158");
    sc_trace(mVcdFile, ap_block_state3, "ap_block_state3");
    sc_trace(mVcdFile, ap_predicate_op93_write_state8, "ap_predicate_op93_write_state8");
    sc_trace(mVcdFile, ap_block_state8_io, "ap_block_state8_io");
    sc_trace(mVcdFile, icmp_ln29_fu_198_p2, "icmp_ln29_fu_198_p2");
    sc_trace(mVcdFile, grp_fu_303_p1, "grp_fu_303_p1");
    sc_trace(mVcdFile, grp_fu_303_ce, "grp_fu_303_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("sbs_fixedpoint_spike.hdltvin.dat");
    mHdltvoutHandle.open("sbs_fixedpoint_spike.hdltvout.dat");
}

sbs_fixedpoint_spike::~sbs_fixedpoint_spike() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete sbs_fixedpoint_spike_CRTL_BUS_s_axi_U;
    delete sbs_fixedpoint_spike_add_64ns_64ns_64_2_1_U1;
}

void sbs_fixedpoint_spike::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void sbs_fixedpoint_spike::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         !(esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln40_fu_270_p2.read()))) {
        empty_reg_147 = add_ln26_fu_314_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        empty_reg_147 = ap_const_lv32_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_vld_out.read()))) {
            stream_in_V_data_V_0_sel_rd =  (sc_logic) (~stream_in_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_ack_in.read()))) {
            stream_in_V_data_V_0_sel_wr =  (sc_logic) (~stream_in_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(stream_in_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(stream_in_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            stream_in_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(stream_in_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(stream_in_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            stream_in_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(stream_in_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(stream_in_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(stream_in_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_ack_out.read()))))) {
            stream_in_V_data_V_0_state = ap_const_lv2_3;
        } else {
            stream_in_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_dest_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_dest_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_dest_V_0_vld_out.read()))) {
            stream_in_V_dest_V_0_sel_rd =  (sc_logic) (~stream_in_V_dest_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_dest_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_dest_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_dest_V_0_ack_in.read()))) {
            stream_in_V_dest_V_0_sel_wr =  (sc_logic) (~stream_in_V_dest_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_in_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_in_V_dest_V_0_state.read())))) {
            stream_in_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_in_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_in_V_dest_V_0_state.read())))) {
            stream_in_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_in_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_in_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_in_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_dest_V_0_ack_out.read()))))) {
            stream_in_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            stream_in_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_id_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_id_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_id_V_0_vld_out.read()))) {
            stream_in_V_id_V_0_sel_rd =  (sc_logic) (~stream_in_V_id_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_id_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_id_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_id_V_0_ack_in.read()))) {
            stream_in_V_id_V_0_sel_wr =  (sc_logic) (~stream_in_V_id_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_id_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_id_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_in_V_id_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_in_V_id_V_0_state.read())))) {
            stream_in_V_id_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_in_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_in_V_id_V_0_state.read())))) {
            stream_in_V_id_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_in_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_in_V_id_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_in_V_id_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_id_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_id_V_0_ack_out.read()))))) {
            stream_in_V_id_V_0_state = ap_const_lv2_3;
        } else {
            stream_in_V_id_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_keep_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_keep_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_keep_V_0_vld_out.read()))) {
            stream_in_V_keep_V_0_sel_rd =  (sc_logic) (~stream_in_V_keep_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_keep_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_keep_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_keep_V_0_ack_in.read()))) {
            stream_in_V_keep_V_0_sel_wr =  (sc_logic) (~stream_in_V_keep_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_keep_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_keep_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_in_V_keep_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_in_V_keep_V_0_state.read())))) {
            stream_in_V_keep_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_in_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_in_V_keep_V_0_state.read())))) {
            stream_in_V_keep_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_in_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_in_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_in_V_keep_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_keep_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_keep_V_0_ack_out.read()))))) {
            stream_in_V_keep_V_0_state = ap_const_lv2_3;
        } else {
            stream_in_V_keep_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_strb_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_strb_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_strb_V_0_vld_out.read()))) {
            stream_in_V_strb_V_0_sel_rd =  (sc_logic) (~stream_in_V_strb_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_strb_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_strb_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_strb_V_0_ack_in.read()))) {
            stream_in_V_strb_V_0_sel_wr =  (sc_logic) (~stream_in_V_strb_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_strb_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_strb_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_strb_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_in_V_strb_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_strb_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_in_V_strb_V_0_state.read())))) {
            stream_in_V_strb_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_in_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_in_V_strb_V_0_state.read())))) {
            stream_in_V_strb_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_in_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_in_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_in_V_strb_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_strb_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_strb_V_0_ack_out.read()))))) {
            stream_in_V_strb_V_0_state = ap_const_lv2_3;
        } else {
            stream_in_V_strb_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_user_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_user_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_user_V_0_vld_out.read()))) {
            stream_in_V_user_V_0_sel_rd =  (sc_logic) (~stream_in_V_user_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_user_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_user_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_user_V_0_ack_in.read()))) {
            stream_in_V_user_V_0_sel_wr =  (sc_logic) (~stream_in_V_user_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_in_V_user_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_user_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_in_V_user_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_in_V_user_V_0_state.read())))) {
            stream_in_V_user_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_in_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_in_V_user_V_0_state.read())))) {
            stream_in_V_user_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_in_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_in_V_user_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_in_V_user_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_user_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_user_V_0_ack_out.read()))))) {
            stream_in_V_user_V_0_state = ap_const_lv2_3;
        } else {
            stream_in_V_user_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_vld_out.read()))) {
            stream_out_V_data_V_1_sel_rd =  (sc_logic) (~stream_out_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_ack_in.read()))) {
            stream_out_V_data_V_1_sel_wr =  (sc_logic) (~stream_out_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_data_V_1_state.read())))) {
            stream_out_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_data_V_1_state.read())))) {
            stream_out_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_ack_out.read()))))) {
            stream_out_V_data_V_1_state = ap_const_lv2_3;
        } else {
            stream_out_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_dest_V_1_vld_out.read()))) {
            stream_out_V_dest_V_1_sel_rd =  (sc_logic) (~stream_out_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_dest_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_dest_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_dest_V_1_ack_in.read()))) {
            stream_out_V_dest_V_1_sel_wr =  (sc_logic) (~stream_out_V_dest_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_dest_V_1_state.read())))) {
            stream_out_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_dest_V_1_state.read())))) {
            stream_out_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_dest_V_1_ack_out.read()))))) {
            stream_out_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            stream_out_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_id_V_1_vld_out.read()))) {
            stream_out_V_id_V_1_sel_rd =  (sc_logic) (~stream_out_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_id_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_id_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_id_V_1_ack_in.read()))) {
            stream_out_V_id_V_1_sel_wr =  (sc_logic) (~stream_out_V_id_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_id_V_1_state.read())))) {
            stream_out_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_id_V_1_state.read())))) {
            stream_out_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_id_V_1_ack_out.read()))))) {
            stream_out_V_id_V_1_state = ap_const_lv2_3;
        } else {
            stream_out_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_keep_V_1_vld_out.read()))) {
            stream_out_V_keep_V_1_sel_rd =  (sc_logic) (~stream_out_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_keep_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_keep_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_keep_V_1_ack_in.read()))) {
            stream_out_V_keep_V_1_sel_wr =  (sc_logic) (~stream_out_V_keep_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_keep_V_1_state.read())))) {
            stream_out_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_keep_V_1_state.read())))) {
            stream_out_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_keep_V_1_ack_out.read()))))) {
            stream_out_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            stream_out_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_vld_out.read()))) {
            stream_out_V_last_V_1_sel_rd =  (sc_logic) (~stream_out_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_ack_in.read()))) {
            stream_out_V_last_V_1_sel_wr =  (sc_logic) (~stream_out_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_last_V_1_state.read())))) {
            stream_out_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read())))) {
            stream_out_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_ack_out.read()))))) {
            stream_out_V_last_V_1_state = ap_const_lv2_3;
        } else {
            stream_out_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_strb_V_1_vld_out.read()))) {
            stream_out_V_strb_V_1_sel_rd =  (sc_logic) (~stream_out_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_strb_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_strb_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_strb_V_1_ack_in.read()))) {
            stream_out_V_strb_V_1_sel_wr =  (sc_logic) (~stream_out_V_strb_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_strb_V_1_state.read())))) {
            stream_out_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_strb_V_1_state.read())))) {
            stream_out_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_strb_V_1_ack_out.read()))))) {
            stream_out_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            stream_out_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_user_V_1_vld_out.read()))) {
            stream_out_V_user_V_1_sel_rd =  (sc_logic) (~stream_out_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_user_V_1_ack_in.read()))) {
            stream_out_V_user_V_1_sel_wr =  (sc_logic) (~stream_out_V_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        stream_out_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_user_V_1_state.read())))) {
            stream_out_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_user_V_1_state.read())))) {
            stream_out_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, stream_out_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_user_V_1_ack_out.read()))))) {
            stream_out_V_user_V_1_state = ap_const_lv2_3;
        } else {
            stream_out_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sum = add_ln45_reg_434.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
                !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_dest_V_1_state.read()))))) {
        sum = ap_const_lv64_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_block_state8_io.read(), ap_const_boolean_0))) {
        tmp_data_V_2_reg_158 = add_ln40_reg_400.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
                !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_dest_V_1_state.read()))))) {
        tmp_data_V_2_reg_158 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())))) {
        add_ln40_reg_400 = add_ln40_fu_275_p2.read();
        tmp_data_V_3_reg_392 = tmp_data_V_3_fu_266_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        add_ln45_reg_434 = grp_fu_303_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        add_ln46_reg_376 = add_ln46_fu_177_p2.read();
        add_ln48_reg_381 = add_ln48_fu_182_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_block_state7_io.read(), ap_const_boolean_0))) {
        and_ln46_reg_445 = and_ln46_fu_329_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_dest_V_1_state.read()))) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln29_fu_198_p2.read()))) {
        channel_dest_V = stream_in_V_dest_V_0_data_out.read();
        channel_id_V = stream_in_V_id_V_0_data_out.read();
        channel_keep_V = stream_in_V_keep_V_0_data_out.read();
        channel_strb_V = stream_in_V_strb_V_0_data_out.read();
        channel_user_V = stream_in_V_user_V_0_data_out.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())))) {
        icmp_ln43_reg_415 = icmp_ln43_fu_293_p2.read();
        zext_ln43_reg_410 = zext_ln43_fu_289_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln43_fu_293_p2.read()))) {
        icmp_ln46_1_reg_424 = icmp_ln46_1_fu_309_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        icmp_ln46_reg_440 = icmp_ln46_fu_325_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_dest_V_1_state.read()))))) {
        ip_index = empty_reg_147.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        layerSize_read_reg_370 = layerSize.read();
        vectorSize_read_reg_364 = vectorSize.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_dest_V_1_state.read()))))) {
        random_value = stream_in_V_data_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_load_A.read())) {
        stream_in_V_data_V_0_payload_A = stream_in_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_load_B.read())) {
        stream_in_V_data_V_0_payload_B = stream_in_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_dest_V_0_load_A.read())) {
        stream_in_V_dest_V_0_payload_A = stream_in_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_dest_V_0_load_B.read())) {
        stream_in_V_dest_V_0_payload_B = stream_in_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_id_V_0_load_A.read())) {
        stream_in_V_id_V_0_payload_A = stream_in_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_id_V_0_load_B.read())) {
        stream_in_V_id_V_0_payload_B = stream_in_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_keep_V_0_load_A.read())) {
        stream_in_V_keep_V_0_payload_A = stream_in_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_keep_V_0_load_B.read())) {
        stream_in_V_keep_V_0_payload_B = stream_in_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_strb_V_0_load_A.read())) {
        stream_in_V_strb_V_0_payload_A = stream_in_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_strb_V_0_load_B.read())) {
        stream_in_V_strb_V_0_payload_B = stream_in_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_user_V_0_load_A.read())) {
        stream_in_V_user_V_0_payload_A = stream_in_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_user_V_0_load_B.read())) {
        stream_in_V_user_V_0_payload_B = stream_in_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_load_A.read())) {
        stream_out_V_data_V_1_payload_A = tmp_data_V_3_reg_392.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_load_B.read())) {
        stream_out_V_data_V_1_payload_B = tmp_data_V_3_reg_392.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_dest_V_1_load_A.read())) {
        stream_out_V_dest_V_1_payload_A = channel_dest_V.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_dest_V_1_load_B.read())) {
        stream_out_V_dest_V_1_payload_B = channel_dest_V.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_id_V_1_load_A.read())) {
        stream_out_V_id_V_1_payload_A = channel_id_V.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_id_V_1_load_B.read())) {
        stream_out_V_id_V_1_payload_B = channel_id_V.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_keep_V_1_load_A.read())) {
        stream_out_V_keep_V_1_payload_A = channel_keep_V.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_keep_V_1_load_B.read())) {
        stream_out_V_keep_V_1_payload_B = channel_keep_V.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_load_A.read())) {
        stream_out_V_last_V_1_payload_A = tmp_last_V_fu_333_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_load_B.read())) {
        stream_out_V_last_V_1_payload_B = tmp_last_V_fu_333_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_strb_V_1_load_A.read())) {
        stream_out_V_strb_V_1_payload_A = channel_strb_V.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_strb_V_1_load_B.read())) {
        stream_out_V_strb_V_1_payload_B = channel_strb_V.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_user_V_1_load_A.read())) {
        stream_out_V_user_V_1_payload_A = channel_user_V.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_user_V_1_load_B.read())) {
        stream_out_V_user_V_1_payload_B = channel_user_V.read();
    }
}

void sbs_fixedpoint_spike::thread_add_ln26_fu_314_p2() {
    add_ln26_fu_314_p2 = (!ip_index.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(ip_index.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void sbs_fixedpoint_spike::thread_add_ln40_fu_275_p2() {
    add_ln40_fu_275_p2 = (!tmp_data_V_2_reg_158.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(tmp_data_V_2_reg_158.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void sbs_fixedpoint_spike::thread_add_ln46_fu_177_p2() {
    add_ln46_fu_177_p2 = (!vectorSize_read_reg_364.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(vectorSize_read_reg_364.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void sbs_fixedpoint_spike::thread_add_ln48_fu_182_p2() {
    add_ln48_fu_182_p2 = (!layerSize_read_reg_370.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(layerSize_read_reg_370.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void sbs_fixedpoint_spike::thread_and_ln46_fu_329_p2() {
    and_ln46_fu_329_p2 = (icmp_ln46_reg_440.read() & icmp_ln46_1_reg_424.read());
}

void sbs_fixedpoint_spike::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sbs_fixedpoint_spike::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sbs_fixedpoint_spike::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sbs_fixedpoint_spike::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sbs_fixedpoint_spike::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sbs_fixedpoint_spike::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void sbs_fixedpoint_spike::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void sbs_fixedpoint_spike::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void sbs_fixedpoint_spike::thread_ap_block_state3() {
    ap_block_state3 = (esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_dest_V_1_state.read())));
}

void sbs_fixedpoint_spike::thread_ap_block_state4() {
    ap_block_state4 = (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read()));
}

void sbs_fixedpoint_spike::thread_ap_block_state7_io() {
    ap_block_state7_io = (esl_seteq<1,1,1>(ap_const_lv1_0, and_ln46_fu_329_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read()));
}

void sbs_fixedpoint_spike::thread_ap_block_state8_io() {
    ap_block_state8_io = (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_V_data_V_1_ack_in.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op93_write_state8.read()));
}

void sbs_fixedpoint_spike::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_dest_V_1_state.read()))) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln26_fu_193_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sbs_fixedpoint_spike::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sbs_fixedpoint_spike::thread_ap_predicate_op93_write_state8() {
    ap_predicate_op93_write_state8 = (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln43_reg_415.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, and_ln46_reg_445.read()));
}

void sbs_fixedpoint_spike::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_dest_V_1_state.read()))) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln26_fu_193_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sbs_fixedpoint_spike::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void sbs_fixedpoint_spike::thread_grp_fu_303_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        grp_fu_303_ce = ap_const_logic_1;
    } else {
        grp_fu_303_ce = ap_const_logic_0;
    }
}

void sbs_fixedpoint_spike::thread_grp_fu_303_p1() {
    grp_fu_303_p1 = esl_zext<64,32>(stream_in_V_data_V_0_data_out.read());
}

void sbs_fixedpoint_spike::thread_icmp_ln26_fu_193_p2() {
    icmp_ln26_fu_193_p2 = (!empty_reg_147.read().is_01() || !layerSize_read_reg_370.read().is_01())? sc_lv<1>(): (sc_bigint<32>(empty_reg_147.read()) < sc_bigint<32>(layerSize_read_reg_370.read()));
}

void sbs_fixedpoint_spike::thread_icmp_ln29_fu_198_p2() {
    icmp_ln29_fu_198_p2 = (!empty_reg_147.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(empty_reg_147.read() == ap_const_lv32_0);
}

void sbs_fixedpoint_spike::thread_icmp_ln40_fu_270_p2() {
    icmp_ln40_fu_270_p2 = (!tmp_data_V_3_fu_266_p1.read().is_01() || !vectorSize_read_reg_364.read().is_01())? sc_lv<1>(): (sc_bigint<32>(tmp_data_V_3_fu_266_p1.read()) < sc_bigint<32>(vectorSize_read_reg_364.read()));
}

void sbs_fixedpoint_spike::thread_icmp_ln43_fu_293_p2() {
    icmp_ln43_fu_293_p2 = (!sum.read().is_01() || !zext_ln43_fu_289_p1.read().is_01())? sc_lv<1>(): (sc_biguint<64>(sum.read()) < sc_biguint<64>(zext_ln43_fu_289_p1.read()));
}

void sbs_fixedpoint_spike::thread_icmp_ln46_1_fu_309_p2() {
    icmp_ln46_1_fu_309_p2 = (!tmp_data_V_3_fu_266_p1.read().is_01() || !add_ln46_reg_376.read().is_01())? sc_lv<1>(): sc_lv<1>(tmp_data_V_3_fu_266_p1.read() != add_ln46_reg_376.read());
}

void sbs_fixedpoint_spike::thread_icmp_ln46_fu_325_p2() {
    icmp_ln46_fu_325_p2 = (!add_ln45_reg_434.read().is_01() || !zext_ln43_reg_410.read().is_01())? sc_lv<1>(): (sc_biguint<64>(add_ln45_reg_434.read()) < sc_biguint<64>(zext_ln43_reg_410.read()));
}

void sbs_fixedpoint_spike::thread_stream_in_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read())))) {
        stream_in_TDATA_blk_n = stream_in_V_data_V_0_state.read()[0];
    } else {
        stream_in_TDATA_blk_n = ap_const_logic_1;
    }
}

void sbs_fixedpoint_spike::thread_stream_in_TREADY() {
    stream_in_TREADY = stream_in_V_dest_V_0_state.read()[1];
}

void sbs_fixedpoint_spike::thread_stream_in_V_data_V_0_ack_in() {
    stream_in_V_data_V_0_ack_in = stream_in_V_data_V_0_state.read()[1];
}

void sbs_fixedpoint_spike::thread_stream_in_V_data_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
          !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_dest_V_1_state.read())))))) {
        stream_in_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        stream_in_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void sbs_fixedpoint_spike::thread_stream_in_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_data_V_0_sel.read())) {
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_B.read();
    } else {
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_A.read();
    }
}

void sbs_fixedpoint_spike::thread_stream_in_V_data_V_0_load_A() {
    stream_in_V_data_V_0_load_A = (stream_in_V_data_V_0_state_cmp_full.read() & ~stream_in_V_data_V_0_sel_wr.read());
}

void sbs_fixedpoint_spike::thread_stream_in_V_data_V_0_load_B() {
    stream_in_V_data_V_0_load_B = (stream_in_V_data_V_0_sel_wr.read() & stream_in_V_data_V_0_state_cmp_full.read());
}

void sbs_fixedpoint_spike::thread_stream_in_V_data_V_0_sel() {
    stream_in_V_data_V_0_sel = stream_in_V_data_V_0_sel_rd.read();
}

void sbs_fixedpoint_spike::thread_stream_in_V_data_V_0_state_cmp_full() {
    stream_in_V_data_V_0_state_cmp_full =  (sc_logic) ((!stream_in_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_in_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void sbs_fixedpoint_spike::thread_stream_in_V_data_V_0_vld_in() {
    stream_in_V_data_V_0_vld_in = stream_in_TVALID.read();
}

void sbs_fixedpoint_spike::thread_stream_in_V_data_V_0_vld_out() {
    stream_in_V_data_V_0_vld_out = stream_in_V_data_V_0_state.read()[0];
}

void sbs_fixedpoint_spike::thread_stream_in_V_dest_V_0_ack_in() {
    stream_in_V_dest_V_0_ack_in = stream_in_V_dest_V_0_state.read()[1];
}

void sbs_fixedpoint_spike::thread_stream_in_V_dest_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
          !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_dest_V_1_state.read())))))) {
        stream_in_V_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        stream_in_V_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void sbs_fixedpoint_spike::thread_stream_in_V_dest_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_dest_V_0_sel.read())) {
        stream_in_V_dest_V_0_data_out = stream_in_V_dest_V_0_payload_B.read();
    } else {
        stream_in_V_dest_V_0_data_out = stream_in_V_dest_V_0_payload_A.read();
    }
}

void sbs_fixedpoint_spike::thread_stream_in_V_dest_V_0_load_A() {
    stream_in_V_dest_V_0_load_A = (stream_in_V_dest_V_0_state_cmp_full.read() & ~stream_in_V_dest_V_0_sel_wr.read());
}

void sbs_fixedpoint_spike::thread_stream_in_V_dest_V_0_load_B() {
    stream_in_V_dest_V_0_load_B = (stream_in_V_dest_V_0_sel_wr.read() & stream_in_V_dest_V_0_state_cmp_full.read());
}

void sbs_fixedpoint_spike::thread_stream_in_V_dest_V_0_sel() {
    stream_in_V_dest_V_0_sel = stream_in_V_dest_V_0_sel_rd.read();
}

void sbs_fixedpoint_spike::thread_stream_in_V_dest_V_0_state_cmp_full() {
    stream_in_V_dest_V_0_state_cmp_full =  (sc_logic) ((!stream_in_V_dest_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_in_V_dest_V_0_state.read() != ap_const_lv2_1))[0];
}

void sbs_fixedpoint_spike::thread_stream_in_V_dest_V_0_vld_in() {
    stream_in_V_dest_V_0_vld_in = stream_in_TVALID.read();
}

void sbs_fixedpoint_spike::thread_stream_in_V_dest_V_0_vld_out() {
    stream_in_V_dest_V_0_vld_out = stream_in_V_dest_V_0_state.read()[0];
}

void sbs_fixedpoint_spike::thread_stream_in_V_id_V_0_ack_in() {
    stream_in_V_id_V_0_ack_in = stream_in_V_id_V_0_state.read()[1];
}

void sbs_fixedpoint_spike::thread_stream_in_V_id_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
          !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_dest_V_1_state.read())))))) {
        stream_in_V_id_V_0_ack_out = ap_const_logic_1;
    } else {
        stream_in_V_id_V_0_ack_out = ap_const_logic_0;
    }
}

void sbs_fixedpoint_spike::thread_stream_in_V_id_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_id_V_0_sel.read())) {
        stream_in_V_id_V_0_data_out = stream_in_V_id_V_0_payload_B.read();
    } else {
        stream_in_V_id_V_0_data_out = stream_in_V_id_V_0_payload_A.read();
    }
}

void sbs_fixedpoint_spike::thread_stream_in_V_id_V_0_load_A() {
    stream_in_V_id_V_0_load_A = (stream_in_V_id_V_0_state_cmp_full.read() & ~stream_in_V_id_V_0_sel_wr.read());
}

void sbs_fixedpoint_spike::thread_stream_in_V_id_V_0_load_B() {
    stream_in_V_id_V_0_load_B = (stream_in_V_id_V_0_sel_wr.read() & stream_in_V_id_V_0_state_cmp_full.read());
}

void sbs_fixedpoint_spike::thread_stream_in_V_id_V_0_sel() {
    stream_in_V_id_V_0_sel = stream_in_V_id_V_0_sel_rd.read();
}

void sbs_fixedpoint_spike::thread_stream_in_V_id_V_0_state_cmp_full() {
    stream_in_V_id_V_0_state_cmp_full =  (sc_logic) ((!stream_in_V_id_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_in_V_id_V_0_state.read() != ap_const_lv2_1))[0];
}

void sbs_fixedpoint_spike::thread_stream_in_V_id_V_0_vld_in() {
    stream_in_V_id_V_0_vld_in = stream_in_TVALID.read();
}

void sbs_fixedpoint_spike::thread_stream_in_V_id_V_0_vld_out() {
    stream_in_V_id_V_0_vld_out = stream_in_V_id_V_0_state.read()[0];
}

void sbs_fixedpoint_spike::thread_stream_in_V_keep_V_0_ack_in() {
    stream_in_V_keep_V_0_ack_in = stream_in_V_keep_V_0_state.read()[1];
}

void sbs_fixedpoint_spike::thread_stream_in_V_keep_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
          !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_dest_V_1_state.read())))))) {
        stream_in_V_keep_V_0_ack_out = ap_const_logic_1;
    } else {
        stream_in_V_keep_V_0_ack_out = ap_const_logic_0;
    }
}

void sbs_fixedpoint_spike::thread_stream_in_V_keep_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_keep_V_0_sel.read())) {
        stream_in_V_keep_V_0_data_out = stream_in_V_keep_V_0_payload_B.read();
    } else {
        stream_in_V_keep_V_0_data_out = stream_in_V_keep_V_0_payload_A.read();
    }
}

void sbs_fixedpoint_spike::thread_stream_in_V_keep_V_0_load_A() {
    stream_in_V_keep_V_0_load_A = (stream_in_V_keep_V_0_state_cmp_full.read() & ~stream_in_V_keep_V_0_sel_wr.read());
}

void sbs_fixedpoint_spike::thread_stream_in_V_keep_V_0_load_B() {
    stream_in_V_keep_V_0_load_B = (stream_in_V_keep_V_0_sel_wr.read() & stream_in_V_keep_V_0_state_cmp_full.read());
}

void sbs_fixedpoint_spike::thread_stream_in_V_keep_V_0_sel() {
    stream_in_V_keep_V_0_sel = stream_in_V_keep_V_0_sel_rd.read();
}

void sbs_fixedpoint_spike::thread_stream_in_V_keep_V_0_state_cmp_full() {
    stream_in_V_keep_V_0_state_cmp_full =  (sc_logic) ((!stream_in_V_keep_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_in_V_keep_V_0_state.read() != ap_const_lv2_1))[0];
}

void sbs_fixedpoint_spike::thread_stream_in_V_keep_V_0_vld_in() {
    stream_in_V_keep_V_0_vld_in = stream_in_TVALID.read();
}

void sbs_fixedpoint_spike::thread_stream_in_V_keep_V_0_vld_out() {
    stream_in_V_keep_V_0_vld_out = stream_in_V_keep_V_0_state.read()[0];
}

void sbs_fixedpoint_spike::thread_stream_in_V_strb_V_0_ack_in() {
    stream_in_V_strb_V_0_ack_in = stream_in_V_strb_V_0_state.read()[1];
}

void sbs_fixedpoint_spike::thread_stream_in_V_strb_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
          !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_dest_V_1_state.read())))))) {
        stream_in_V_strb_V_0_ack_out = ap_const_logic_1;
    } else {
        stream_in_V_strb_V_0_ack_out = ap_const_logic_0;
    }
}

void sbs_fixedpoint_spike::thread_stream_in_V_strb_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_strb_V_0_sel.read())) {
        stream_in_V_strb_V_0_data_out = stream_in_V_strb_V_0_payload_B.read();
    } else {
        stream_in_V_strb_V_0_data_out = stream_in_V_strb_V_0_payload_A.read();
    }
}

void sbs_fixedpoint_spike::thread_stream_in_V_strb_V_0_load_A() {
    stream_in_V_strb_V_0_load_A = (stream_in_V_strb_V_0_state_cmp_full.read() & ~stream_in_V_strb_V_0_sel_wr.read());
}

void sbs_fixedpoint_spike::thread_stream_in_V_strb_V_0_load_B() {
    stream_in_V_strb_V_0_load_B = (stream_in_V_strb_V_0_sel_wr.read() & stream_in_V_strb_V_0_state_cmp_full.read());
}

void sbs_fixedpoint_spike::thread_stream_in_V_strb_V_0_sel() {
    stream_in_V_strb_V_0_sel = stream_in_V_strb_V_0_sel_rd.read();
}

void sbs_fixedpoint_spike::thread_stream_in_V_strb_V_0_state_cmp_full() {
    stream_in_V_strb_V_0_state_cmp_full =  (sc_logic) ((!stream_in_V_strb_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_in_V_strb_V_0_state.read() != ap_const_lv2_1))[0];
}

void sbs_fixedpoint_spike::thread_stream_in_V_strb_V_0_vld_in() {
    stream_in_V_strb_V_0_vld_in = stream_in_TVALID.read();
}

void sbs_fixedpoint_spike::thread_stream_in_V_strb_V_0_vld_out() {
    stream_in_V_strb_V_0_vld_out = stream_in_V_strb_V_0_state.read()[0];
}

void sbs_fixedpoint_spike::thread_stream_in_V_user_V_0_ack_in() {
    stream_in_V_user_V_0_ack_in = stream_in_V_user_V_0_state.read()[1];
}

void sbs_fixedpoint_spike::thread_stream_in_V_user_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
          !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_dest_V_1_state.read())))))) {
        stream_in_V_user_V_0_ack_out = ap_const_logic_1;
    } else {
        stream_in_V_user_V_0_ack_out = ap_const_logic_0;
    }
}

void sbs_fixedpoint_spike::thread_stream_in_V_user_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_in_V_user_V_0_sel.read())) {
        stream_in_V_user_V_0_data_out = stream_in_V_user_V_0_payload_B.read();
    } else {
        stream_in_V_user_V_0_data_out = stream_in_V_user_V_0_payload_A.read();
    }
}

void sbs_fixedpoint_spike::thread_stream_in_V_user_V_0_load_A() {
    stream_in_V_user_V_0_load_A = (stream_in_V_user_V_0_state_cmp_full.read() & ~stream_in_V_user_V_0_sel_wr.read());
}

void sbs_fixedpoint_spike::thread_stream_in_V_user_V_0_load_B() {
    stream_in_V_user_V_0_load_B = (stream_in_V_user_V_0_sel_wr.read() & stream_in_V_user_V_0_state_cmp_full.read());
}

void sbs_fixedpoint_spike::thread_stream_in_V_user_V_0_sel() {
    stream_in_V_user_V_0_sel = stream_in_V_user_V_0_sel_rd.read();
}

void sbs_fixedpoint_spike::thread_stream_in_V_user_V_0_state_cmp_full() {
    stream_in_V_user_V_0_state_cmp_full =  (sc_logic) ((!stream_in_V_user_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_in_V_user_V_0_state.read() != ap_const_lv2_1))[0];
}

void sbs_fixedpoint_spike::thread_stream_in_V_user_V_0_vld_in() {
    stream_in_V_user_V_0_vld_in = stream_in_TVALID.read();
}

void sbs_fixedpoint_spike::thread_stream_in_V_user_V_0_vld_out() {
    stream_in_V_user_V_0_vld_out = stream_in_V_user_V_0_state.read()[0];
}

void sbs_fixedpoint_spike::thread_stream_out_TDATA() {
    stream_out_TDATA = stream_out_V_data_V_1_data_out.read();
}

void sbs_fixedpoint_spike::thread_stream_out_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, and_ln46_fu_329_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln43_reg_415.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, and_ln46_reg_445.read())))) {
        stream_out_TDATA_blk_n = stream_out_V_data_V_1_state.read()[1];
    } else {
        stream_out_TDATA_blk_n = ap_const_logic_1;
    }
}

void sbs_fixedpoint_spike::thread_stream_out_TDEST() {
    stream_out_TDEST = stream_out_V_dest_V_1_data_out.read();
}

void sbs_fixedpoint_spike::thread_stream_out_TID() {
    stream_out_TID = stream_out_V_id_V_1_data_out.read();
}

void sbs_fixedpoint_spike::thread_stream_out_TKEEP() {
    stream_out_TKEEP = stream_out_V_keep_V_1_data_out.read();
}

void sbs_fixedpoint_spike::thread_stream_out_TLAST() {
    stream_out_TLAST = stream_out_V_last_V_1_data_out.read();
}

void sbs_fixedpoint_spike::thread_stream_out_TSTRB() {
    stream_out_TSTRB = stream_out_V_strb_V_1_data_out.read();
}

void sbs_fixedpoint_spike::thread_stream_out_TUSER() {
    stream_out_TUSER = stream_out_V_user_V_1_data_out.read();
}

void sbs_fixedpoint_spike::thread_stream_out_TVALID() {
    stream_out_TVALID = stream_out_V_dest_V_1_state.read()[0];
}

void sbs_fixedpoint_spike::thread_stream_out_V_data_V_1_ack_in() {
    stream_out_V_data_V_1_ack_in = stream_out_V_data_V_1_state.read()[1];
}

void sbs_fixedpoint_spike::thread_stream_out_V_data_V_1_ack_out() {
    stream_out_V_data_V_1_ack_out = stream_out_TREADY.read();
}

void sbs_fixedpoint_spike::thread_stream_out_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_data_V_1_sel.read())) {
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_B.read();
    } else {
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_A.read();
    }
}

void sbs_fixedpoint_spike::thread_stream_out_V_data_V_1_load_A() {
    stream_out_V_data_V_1_load_A = (stream_out_V_data_V_1_state_cmp_full.read() & ~stream_out_V_data_V_1_sel_wr.read());
}

void sbs_fixedpoint_spike::thread_stream_out_V_data_V_1_load_B() {
    stream_out_V_data_V_1_load_B = (stream_out_V_data_V_1_sel_wr.read() & stream_out_V_data_V_1_state_cmp_full.read());
}

void sbs_fixedpoint_spike::thread_stream_out_V_data_V_1_sel() {
    stream_out_V_data_V_1_sel = stream_out_V_data_V_1_sel_rd.read();
}

void sbs_fixedpoint_spike::thread_stream_out_V_data_V_1_state_cmp_full() {
    stream_out_V_data_V_1_state_cmp_full =  (sc_logic) ((!stream_out_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_out_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void sbs_fixedpoint_spike::thread_stream_out_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, and_ln46_fu_329_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_state7_io.read(), ap_const_boolean_0))) {
        stream_out_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        stream_out_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void sbs_fixedpoint_spike::thread_stream_out_V_data_V_1_vld_out() {
    stream_out_V_data_V_1_vld_out = stream_out_V_data_V_1_state.read()[0];
}

void sbs_fixedpoint_spike::thread_stream_out_V_dest_V_1_ack_in() {
    stream_out_V_dest_V_1_ack_in = stream_out_V_dest_V_1_state.read()[1];
}

void sbs_fixedpoint_spike::thread_stream_out_V_dest_V_1_ack_out() {
    stream_out_V_dest_V_1_ack_out = stream_out_TREADY.read();
}

void sbs_fixedpoint_spike::thread_stream_out_V_dest_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_dest_V_1_sel.read())) {
        stream_out_V_dest_V_1_data_out = stream_out_V_dest_V_1_payload_B.read();
    } else {
        stream_out_V_dest_V_1_data_out = stream_out_V_dest_V_1_payload_A.read();
    }
}

void sbs_fixedpoint_spike::thread_stream_out_V_dest_V_1_load_A() {
    stream_out_V_dest_V_1_load_A = (stream_out_V_dest_V_1_state_cmp_full.read() & ~stream_out_V_dest_V_1_sel_wr.read());
}

void sbs_fixedpoint_spike::thread_stream_out_V_dest_V_1_load_B() {
    stream_out_V_dest_V_1_load_B = (stream_out_V_dest_V_1_sel_wr.read() & stream_out_V_dest_V_1_state_cmp_full.read());
}

void sbs_fixedpoint_spike::thread_stream_out_V_dest_V_1_sel() {
    stream_out_V_dest_V_1_sel = stream_out_V_dest_V_1_sel_rd.read();
}

void sbs_fixedpoint_spike::thread_stream_out_V_dest_V_1_state_cmp_full() {
    stream_out_V_dest_V_1_state_cmp_full =  (sc_logic) ((!stream_out_V_dest_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_out_V_dest_V_1_state.read() != ap_const_lv2_1))[0];
}

void sbs_fixedpoint_spike::thread_stream_out_V_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, and_ln46_fu_329_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_state7_io.read(), ap_const_boolean_0))) {
        stream_out_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        stream_out_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void sbs_fixedpoint_spike::thread_stream_out_V_dest_V_1_vld_out() {
    stream_out_V_dest_V_1_vld_out = stream_out_V_dest_V_1_state.read()[0];
}

void sbs_fixedpoint_spike::thread_stream_out_V_id_V_1_ack_in() {
    stream_out_V_id_V_1_ack_in = stream_out_V_id_V_1_state.read()[1];
}

void sbs_fixedpoint_spike::thread_stream_out_V_id_V_1_ack_out() {
    stream_out_V_id_V_1_ack_out = stream_out_TREADY.read();
}

void sbs_fixedpoint_spike::thread_stream_out_V_id_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_id_V_1_sel.read())) {
        stream_out_V_id_V_1_data_out = stream_out_V_id_V_1_payload_B.read();
    } else {
        stream_out_V_id_V_1_data_out = stream_out_V_id_V_1_payload_A.read();
    }
}

void sbs_fixedpoint_spike::thread_stream_out_V_id_V_1_load_A() {
    stream_out_V_id_V_1_load_A = (stream_out_V_id_V_1_state_cmp_full.read() & ~stream_out_V_id_V_1_sel_wr.read());
}

void sbs_fixedpoint_spike::thread_stream_out_V_id_V_1_load_B() {
    stream_out_V_id_V_1_load_B = (stream_out_V_id_V_1_sel_wr.read() & stream_out_V_id_V_1_state_cmp_full.read());
}

void sbs_fixedpoint_spike::thread_stream_out_V_id_V_1_sel() {
    stream_out_V_id_V_1_sel = stream_out_V_id_V_1_sel_rd.read();
}

void sbs_fixedpoint_spike::thread_stream_out_V_id_V_1_state_cmp_full() {
    stream_out_V_id_V_1_state_cmp_full =  (sc_logic) ((!stream_out_V_id_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_out_V_id_V_1_state.read() != ap_const_lv2_1))[0];
}

void sbs_fixedpoint_spike::thread_stream_out_V_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, and_ln46_fu_329_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_state7_io.read(), ap_const_boolean_0))) {
        stream_out_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        stream_out_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void sbs_fixedpoint_spike::thread_stream_out_V_id_V_1_vld_out() {
    stream_out_V_id_V_1_vld_out = stream_out_V_id_V_1_state.read()[0];
}

void sbs_fixedpoint_spike::thread_stream_out_V_keep_V_1_ack_in() {
    stream_out_V_keep_V_1_ack_in = stream_out_V_keep_V_1_state.read()[1];
}

void sbs_fixedpoint_spike::thread_stream_out_V_keep_V_1_ack_out() {
    stream_out_V_keep_V_1_ack_out = stream_out_TREADY.read();
}

void sbs_fixedpoint_spike::thread_stream_out_V_keep_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_keep_V_1_sel.read())) {
        stream_out_V_keep_V_1_data_out = stream_out_V_keep_V_1_payload_B.read();
    } else {
        stream_out_V_keep_V_1_data_out = stream_out_V_keep_V_1_payload_A.read();
    }
}

void sbs_fixedpoint_spike::thread_stream_out_V_keep_V_1_load_A() {
    stream_out_V_keep_V_1_load_A = (stream_out_V_keep_V_1_state_cmp_full.read() & ~stream_out_V_keep_V_1_sel_wr.read());
}

void sbs_fixedpoint_spike::thread_stream_out_V_keep_V_1_load_B() {
    stream_out_V_keep_V_1_load_B = (stream_out_V_keep_V_1_sel_wr.read() & stream_out_V_keep_V_1_state_cmp_full.read());
}

void sbs_fixedpoint_spike::thread_stream_out_V_keep_V_1_sel() {
    stream_out_V_keep_V_1_sel = stream_out_V_keep_V_1_sel_rd.read();
}

void sbs_fixedpoint_spike::thread_stream_out_V_keep_V_1_state_cmp_full() {
    stream_out_V_keep_V_1_state_cmp_full =  (sc_logic) ((!stream_out_V_keep_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_out_V_keep_V_1_state.read() != ap_const_lv2_1))[0];
}

void sbs_fixedpoint_spike::thread_stream_out_V_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, and_ln46_fu_329_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_state7_io.read(), ap_const_boolean_0))) {
        stream_out_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        stream_out_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void sbs_fixedpoint_spike::thread_stream_out_V_keep_V_1_vld_out() {
    stream_out_V_keep_V_1_vld_out = stream_out_V_keep_V_1_state.read()[0];
}

void sbs_fixedpoint_spike::thread_stream_out_V_last_V_1_ack_in() {
    stream_out_V_last_V_1_ack_in = stream_out_V_last_V_1_state.read()[1];
}

void sbs_fixedpoint_spike::thread_stream_out_V_last_V_1_ack_out() {
    stream_out_V_last_V_1_ack_out = stream_out_TREADY.read();
}

void sbs_fixedpoint_spike::thread_stream_out_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_last_V_1_sel.read())) {
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_B.read();
    } else {
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_A.read();
    }
}

void sbs_fixedpoint_spike::thread_stream_out_V_last_V_1_load_A() {
    stream_out_V_last_V_1_load_A = (stream_out_V_last_V_1_state_cmp_full.read() & ~stream_out_V_last_V_1_sel_wr.read());
}

void sbs_fixedpoint_spike::thread_stream_out_V_last_V_1_load_B() {
    stream_out_V_last_V_1_load_B = (stream_out_V_last_V_1_sel_wr.read() & stream_out_V_last_V_1_state_cmp_full.read());
}

void sbs_fixedpoint_spike::thread_stream_out_V_last_V_1_sel() {
    stream_out_V_last_V_1_sel = stream_out_V_last_V_1_sel_rd.read();
}

void sbs_fixedpoint_spike::thread_stream_out_V_last_V_1_state_cmp_full() {
    stream_out_V_last_V_1_state_cmp_full =  (sc_logic) ((!stream_out_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_out_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void sbs_fixedpoint_spike::thread_stream_out_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, and_ln46_fu_329_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_state7_io.read(), ap_const_boolean_0))) {
        stream_out_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        stream_out_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void sbs_fixedpoint_spike::thread_stream_out_V_last_V_1_vld_out() {
    stream_out_V_last_V_1_vld_out = stream_out_V_last_V_1_state.read()[0];
}

void sbs_fixedpoint_spike::thread_stream_out_V_strb_V_1_ack_in() {
    stream_out_V_strb_V_1_ack_in = stream_out_V_strb_V_1_state.read()[1];
}

void sbs_fixedpoint_spike::thread_stream_out_V_strb_V_1_ack_out() {
    stream_out_V_strb_V_1_ack_out = stream_out_TREADY.read();
}

void sbs_fixedpoint_spike::thread_stream_out_V_strb_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_strb_V_1_sel.read())) {
        stream_out_V_strb_V_1_data_out = stream_out_V_strb_V_1_payload_B.read();
    } else {
        stream_out_V_strb_V_1_data_out = stream_out_V_strb_V_1_payload_A.read();
    }
}

void sbs_fixedpoint_spike::thread_stream_out_V_strb_V_1_load_A() {
    stream_out_V_strb_V_1_load_A = (stream_out_V_strb_V_1_state_cmp_full.read() & ~stream_out_V_strb_V_1_sel_wr.read());
}

void sbs_fixedpoint_spike::thread_stream_out_V_strb_V_1_load_B() {
    stream_out_V_strb_V_1_load_B = (stream_out_V_strb_V_1_sel_wr.read() & stream_out_V_strb_V_1_state_cmp_full.read());
}

void sbs_fixedpoint_spike::thread_stream_out_V_strb_V_1_sel() {
    stream_out_V_strb_V_1_sel = stream_out_V_strb_V_1_sel_rd.read();
}

void sbs_fixedpoint_spike::thread_stream_out_V_strb_V_1_state_cmp_full() {
    stream_out_V_strb_V_1_state_cmp_full =  (sc_logic) ((!stream_out_V_strb_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_out_V_strb_V_1_state.read() != ap_const_lv2_1))[0];
}

void sbs_fixedpoint_spike::thread_stream_out_V_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, and_ln46_fu_329_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_state7_io.read(), ap_const_boolean_0))) {
        stream_out_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        stream_out_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void sbs_fixedpoint_spike::thread_stream_out_V_strb_V_1_vld_out() {
    stream_out_V_strb_V_1_vld_out = stream_out_V_strb_V_1_state.read()[0];
}

void sbs_fixedpoint_spike::thread_stream_out_V_user_V_1_ack_in() {
    stream_out_V_user_V_1_ack_in = stream_out_V_user_V_1_state.read()[1];
}

void sbs_fixedpoint_spike::thread_stream_out_V_user_V_1_ack_out() {
    stream_out_V_user_V_1_ack_out = stream_out_TREADY.read();
}

void sbs_fixedpoint_spike::thread_stream_out_V_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, stream_out_V_user_V_1_sel.read())) {
        stream_out_V_user_V_1_data_out = stream_out_V_user_V_1_payload_B.read();
    } else {
        stream_out_V_user_V_1_data_out = stream_out_V_user_V_1_payload_A.read();
    }
}

void sbs_fixedpoint_spike::thread_stream_out_V_user_V_1_load_A() {
    stream_out_V_user_V_1_load_A = (stream_out_V_user_V_1_state_cmp_full.read() & ~stream_out_V_user_V_1_sel_wr.read());
}

void sbs_fixedpoint_spike::thread_stream_out_V_user_V_1_load_B() {
    stream_out_V_user_V_1_load_B = (stream_out_V_user_V_1_sel_wr.read() & stream_out_V_user_V_1_state_cmp_full.read());
}

void sbs_fixedpoint_spike::thread_stream_out_V_user_V_1_sel() {
    stream_out_V_user_V_1_sel = stream_out_V_user_V_1_sel_rd.read();
}

void sbs_fixedpoint_spike::thread_stream_out_V_user_V_1_state_cmp_full() {
    stream_out_V_user_V_1_state_cmp_full =  (sc_logic) ((!stream_out_V_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(stream_out_V_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void sbs_fixedpoint_spike::thread_stream_out_V_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, and_ln46_fu_329_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_state7_io.read(), ap_const_boolean_0))) {
        stream_out_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        stream_out_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void sbs_fixedpoint_spike::thread_stream_out_V_user_V_1_vld_out() {
    stream_out_V_user_V_1_vld_out = stream_out_V_user_V_1_state.read()[0];
}

void sbs_fixedpoint_spike::thread_tmp_data_V_3_fu_266_p1() {
    tmp_data_V_3_fu_266_p1 = esl_zext<32,31>(tmp_data_V_2_reg_158.read());
}

void sbs_fixedpoint_spike::thread_tmp_last_V_fu_333_p2() {
    tmp_last_V_fu_333_p2 = (!ip_index.read().is_01() || !add_ln48_reg_381.read().is_01())? sc_lv<1>(): sc_lv<1>(ip_index.read() == add_ln48_reg_381.read());
}

void sbs_fixedpoint_spike::thread_zext_ln43_fu_289_p1() {
    zext_ln43_fu_289_p1 = esl_zext<64,32>(random_value.read());
}

void sbs_fixedpoint_spike::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_dest_V_1_state.read()))) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln26_fu_193_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && !(esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_data_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_keep_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_strb_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_user_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_last_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_id_V_1_state.read()) || esl_seteq<1,2,2>(ap_const_lv2_1, stream_out_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln26_fu_193_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_data_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_keep_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_strb_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_user_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_last_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_id_V_1_state.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, stream_out_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, stream_out_V_dest_V_1_state.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln40_fu_270_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln43_fu_293_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && !(esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_270_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, stream_in_V_data_V_0_vld_out.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln43_fu_293_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_block_state7_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_block_state8_io.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXX";
            break;
    }
}

void sbs_fixedpoint_spike::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TDATA\" :  \"" << stream_in_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TVALID\" :  \"" << stream_in_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"stream_in_TREADY\" :  \"" << stream_in_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TKEEP\" :  \"" << stream_in_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TSTRB\" :  \"" << stream_in_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TUSER\" :  \"" << stream_in_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TLAST\" :  \"" << stream_in_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TID\" :  \"" << stream_in_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_TDEST\" :  \"" << stream_in_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TDATA\" :  \"" << stream_out_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TVALID\" :  \"" << stream_out_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_out_TREADY\" :  \"" << stream_out_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TKEEP\" :  \"" << stream_out_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TSTRB\" :  \"" << stream_out_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TUSER\" :  \"" << stream_out_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TLAST\" :  \"" << stream_out_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TID\" :  \"" << stream_out_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_out_TDEST\" :  \"" << stream_out_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_AWVALID\" :  \"" << s_axi_CRTL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_AWREADY\" :  \"" << s_axi_CRTL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_AWADDR\" :  \"" << s_axi_CRTL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WVALID\" :  \"" << s_axi_CRTL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_WREADY\" :  \"" << s_axi_CRTL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WDATA\" :  \"" << s_axi_CRTL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_WSTRB\" :  \"" << s_axi_CRTL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARVALID\" :  \"" << s_axi_CRTL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_ARREADY\" :  \"" << s_axi_CRTL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_ARADDR\" :  \"" << s_axi_CRTL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RVALID\" :  \"" << s_axi_CRTL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_RREADY\" :  \"" << s_axi_CRTL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RDATA\" :  \"" << s_axi_CRTL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_RRESP\" :  \"" << s_axi_CRTL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BVALID\" :  \"" << s_axi_CRTL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CRTL_BUS_BREADY\" :  \"" << s_axi_CRTL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CRTL_BUS_BRESP\" :  \"" << s_axi_CRTL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

