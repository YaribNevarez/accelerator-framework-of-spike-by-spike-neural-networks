// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sbs_accelerator,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.430000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=8,HLS_SYN_FF=4107,HLS_SYN_LUT=5240}" *)

module sbs_accelerator (
        ap_clk,
        ap_rst_n,
        stream_in_TDATA,
        stream_in_TVALID,
        stream_in_TREADY,
        stream_in_TKEEP,
        stream_in_TSTRB,
        stream_in_TUSER,
        stream_in_TLAST,
        stream_in_TID,
        stream_in_TDEST,
        stream_out_TDATA,
        stream_out_TVALID,
        stream_out_TREADY,
        stream_out_TKEEP,
        stream_out_TSTRB,
        stream_out_TUSER,
        stream_out_TLAST,
        stream_out_TID,
        stream_out_TDEST,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 107'd1;
parameter    ap_ST_fsm_state2 = 107'd2;
parameter    ap_ST_fsm_state3 = 107'd4;
parameter    ap_ST_fsm_state4 = 107'd8;
parameter    ap_ST_fsm_state5 = 107'd16;
parameter    ap_ST_fsm_state6 = 107'd32;
parameter    ap_ST_fsm_state7 = 107'd64;
parameter    ap_ST_fsm_state8 = 107'd128;
parameter    ap_ST_fsm_state9 = 107'd256;
parameter    ap_ST_fsm_state10 = 107'd512;
parameter    ap_ST_fsm_state11 = 107'd1024;
parameter    ap_ST_fsm_state12 = 107'd2048;
parameter    ap_ST_fsm_state13 = 107'd4096;
parameter    ap_ST_fsm_state14 = 107'd8192;
parameter    ap_ST_fsm_state15 = 107'd16384;
parameter    ap_ST_fsm_state16 = 107'd32768;
parameter    ap_ST_fsm_state17 = 107'd65536;
parameter    ap_ST_fsm_state18 = 107'd131072;
parameter    ap_ST_fsm_state19 = 107'd262144;
parameter    ap_ST_fsm_state20 = 107'd524288;
parameter    ap_ST_fsm_state21 = 107'd1048576;
parameter    ap_ST_fsm_state22 = 107'd2097152;
parameter    ap_ST_fsm_state23 = 107'd4194304;
parameter    ap_ST_fsm_state24 = 107'd8388608;
parameter    ap_ST_fsm_state25 = 107'd16777216;
parameter    ap_ST_fsm_state26 = 107'd33554432;
parameter    ap_ST_fsm_state27 = 107'd67108864;
parameter    ap_ST_fsm_state28 = 107'd134217728;
parameter    ap_ST_fsm_state29 = 107'd268435456;
parameter    ap_ST_fsm_state30 = 107'd536870912;
parameter    ap_ST_fsm_state31 = 107'd1073741824;
parameter    ap_ST_fsm_state32 = 107'd2147483648;
parameter    ap_ST_fsm_state33 = 107'd4294967296;
parameter    ap_ST_fsm_state34 = 107'd8589934592;
parameter    ap_ST_fsm_state35 = 107'd17179869184;
parameter    ap_ST_fsm_state36 = 107'd34359738368;
parameter    ap_ST_fsm_state37 = 107'd68719476736;
parameter    ap_ST_fsm_state38 = 107'd137438953472;
parameter    ap_ST_fsm_state39 = 107'd274877906944;
parameter    ap_ST_fsm_state40 = 107'd549755813888;
parameter    ap_ST_fsm_state41 = 107'd1099511627776;
parameter    ap_ST_fsm_state42 = 107'd2199023255552;
parameter    ap_ST_fsm_state43 = 107'd4398046511104;
parameter    ap_ST_fsm_pp0_stage0 = 107'd8796093022208;
parameter    ap_ST_fsm_pp0_stage1 = 107'd17592186044416;
parameter    ap_ST_fsm_pp0_stage2 = 107'd35184372088832;
parameter    ap_ST_fsm_pp0_stage3 = 107'd70368744177664;
parameter    ap_ST_fsm_pp0_stage4 = 107'd140737488355328;
parameter    ap_ST_fsm_pp0_stage5 = 107'd281474976710656;
parameter    ap_ST_fsm_pp0_stage6 = 107'd562949953421312;
parameter    ap_ST_fsm_pp0_stage7 = 107'd1125899906842624;
parameter    ap_ST_fsm_pp0_stage8 = 107'd2251799813685248;
parameter    ap_ST_fsm_pp0_stage9 = 107'd4503599627370496;
parameter    ap_ST_fsm_pp0_stage10 = 107'd9007199254740992;
parameter    ap_ST_fsm_pp0_stage11 = 107'd18014398509481984;
parameter    ap_ST_fsm_state62 = 107'd36028797018963968;
parameter    ap_ST_fsm_state63 = 107'd72057594037927936;
parameter    ap_ST_fsm_pp1_stage0 = 107'd144115188075855872;
parameter    ap_ST_fsm_pp1_stage1 = 107'd288230376151711744;
parameter    ap_ST_fsm_pp1_stage2 = 107'd576460752303423488;
parameter    ap_ST_fsm_pp1_stage3 = 107'd1152921504606846976;
parameter    ap_ST_fsm_pp1_stage4 = 107'd2305843009213693952;
parameter    ap_ST_fsm_pp1_stage5 = 107'd4611686018427387904;
parameter    ap_ST_fsm_pp1_stage6 = 107'd9223372036854775808;
parameter    ap_ST_fsm_pp1_stage7 = 107'd18446744073709551616;
parameter    ap_ST_fsm_pp1_stage8 = 107'd36893488147419103232;
parameter    ap_ST_fsm_pp1_stage9 = 107'd73786976294838206464;
parameter    ap_ST_fsm_state84 = 107'd147573952589676412928;
parameter    ap_ST_fsm_state85 = 107'd295147905179352825856;
parameter    ap_ST_fsm_state86 = 107'd590295810358705651712;
parameter    ap_ST_fsm_state87 = 107'd1180591620717411303424;
parameter    ap_ST_fsm_state88 = 107'd2361183241434822606848;
parameter    ap_ST_fsm_state89 = 107'd4722366482869645213696;
parameter    ap_ST_fsm_state90 = 107'd9444732965739290427392;
parameter    ap_ST_fsm_state91 = 107'd18889465931478580854784;
parameter    ap_ST_fsm_state92 = 107'd37778931862957161709568;
parameter    ap_ST_fsm_state93 = 107'd75557863725914323419136;
parameter    ap_ST_fsm_state94 = 107'd151115727451828646838272;
parameter    ap_ST_fsm_state95 = 107'd302231454903657293676544;
parameter    ap_ST_fsm_state96 = 107'd604462909807314587353088;
parameter    ap_ST_fsm_state97 = 107'd1208925819614629174706176;
parameter    ap_ST_fsm_state98 = 107'd2417851639229258349412352;
parameter    ap_ST_fsm_state99 = 107'd4835703278458516698824704;
parameter    ap_ST_fsm_state100 = 107'd9671406556917033397649408;
parameter    ap_ST_fsm_state101 = 107'd19342813113834066795298816;
parameter    ap_ST_fsm_state102 = 107'd38685626227668133590597632;
parameter    ap_ST_fsm_state103 = 107'd77371252455336267181195264;
parameter    ap_ST_fsm_state104 = 107'd154742504910672534362390528;
parameter    ap_ST_fsm_state105 = 107'd309485009821345068724781056;
parameter    ap_ST_fsm_state106 = 107'd618970019642690137449562112;
parameter    ap_ST_fsm_state107 = 107'd1237940039285380274899124224;
parameter    ap_ST_fsm_state108 = 107'd2475880078570760549798248448;
parameter    ap_ST_fsm_state109 = 107'd4951760157141521099596496896;
parameter    ap_ST_fsm_state110 = 107'd9903520314283042199192993792;
parameter    ap_ST_fsm_state111 = 107'd19807040628566084398385987584;
parameter    ap_ST_fsm_state112 = 107'd39614081257132168796771975168;
parameter    ap_ST_fsm_state113 = 107'd79228162514264337593543950336;
parameter    ap_ST_fsm_state114 = 107'd158456325028528675187087900672;
parameter    ap_ST_fsm_state115 = 107'd316912650057057350374175801344;
parameter    ap_ST_fsm_state116 = 107'd633825300114114700748351602688;
parameter    ap_ST_fsm_state117 = 107'd1267650600228229401496703205376;
parameter    ap_ST_fsm_pp2_stage0 = 107'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state147 = 107'd5070602400912917605986812821504;
parameter    ap_ST_fsm_pp3_stage0 = 107'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state151 = 107'd20282409603651670423947251286016;
parameter    ap_ST_fsm_pp4_stage0 = 107'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state155 = 107'd81129638414606681695789005144064;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] stream_in_TDATA;
input   stream_in_TVALID;
output   stream_in_TREADY;
input  [3:0] stream_in_TKEEP;
input  [3:0] stream_in_TSTRB;
input  [1:0] stream_in_TUSER;
input  [0:0] stream_in_TLAST;
input  [4:0] stream_in_TID;
input  [5:0] stream_in_TDEST;
output  [31:0] stream_out_TDATA;
output   stream_out_TVALID;
input   stream_out_TREADY;
output  [3:0] stream_out_TKEEP;
output  [3:0] stream_out_TSTRB;
output  [1:0] stream_out_TUSER;
output  [0:0] stream_out_TLAST;
output  [4:0] stream_out_TID;
output  [5:0] stream_out_TDEST;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [106:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] stream_in_V_data_V_0_data_out;
wire    stream_in_V_data_V_0_vld_in;
wire    stream_in_V_data_V_0_vld_out;
wire    stream_in_V_data_V_0_ack_in;
reg    stream_in_V_data_V_0_ack_out;
reg   [31:0] stream_in_V_data_V_0_payload_A;
reg   [31:0] stream_in_V_data_V_0_payload_B;
reg    stream_in_V_data_V_0_sel_rd;
reg    stream_in_V_data_V_0_sel_wr;
wire    stream_in_V_data_V_0_sel;
wire    stream_in_V_data_V_0_load_A;
wire    stream_in_V_data_V_0_load_B;
reg   [1:0] stream_in_V_data_V_0_state;
wire    stream_in_V_data_V_0_state_cmp_full;
reg   [3:0] stream_in_V_keep_V_0_data_out;
wire    stream_in_V_keep_V_0_vld_in;
wire    stream_in_V_keep_V_0_vld_out;
wire    stream_in_V_keep_V_0_ack_in;
reg    stream_in_V_keep_V_0_ack_out;
reg   [3:0] stream_in_V_keep_V_0_payload_A;
reg   [3:0] stream_in_V_keep_V_0_payload_B;
reg    stream_in_V_keep_V_0_sel_rd;
reg    stream_in_V_keep_V_0_sel_wr;
wire    stream_in_V_keep_V_0_sel;
wire    stream_in_V_keep_V_0_load_A;
wire    stream_in_V_keep_V_0_load_B;
reg   [1:0] stream_in_V_keep_V_0_state;
wire    stream_in_V_keep_V_0_state_cmp_full;
reg   [3:0] stream_in_V_strb_V_0_data_out;
wire    stream_in_V_strb_V_0_vld_in;
wire    stream_in_V_strb_V_0_vld_out;
wire    stream_in_V_strb_V_0_ack_in;
reg    stream_in_V_strb_V_0_ack_out;
reg   [3:0] stream_in_V_strb_V_0_payload_A;
reg   [3:0] stream_in_V_strb_V_0_payload_B;
reg    stream_in_V_strb_V_0_sel_rd;
reg    stream_in_V_strb_V_0_sel_wr;
wire    stream_in_V_strb_V_0_sel;
wire    stream_in_V_strb_V_0_load_A;
wire    stream_in_V_strb_V_0_load_B;
reg   [1:0] stream_in_V_strb_V_0_state;
wire    stream_in_V_strb_V_0_state_cmp_full;
reg   [1:0] stream_in_V_user_V_0_data_out;
wire    stream_in_V_user_V_0_vld_in;
wire    stream_in_V_user_V_0_vld_out;
wire    stream_in_V_user_V_0_ack_in;
reg    stream_in_V_user_V_0_ack_out;
reg   [1:0] stream_in_V_user_V_0_payload_A;
reg   [1:0] stream_in_V_user_V_0_payload_B;
reg    stream_in_V_user_V_0_sel_rd;
reg    stream_in_V_user_V_0_sel_wr;
wire    stream_in_V_user_V_0_sel;
wire    stream_in_V_user_V_0_load_A;
wire    stream_in_V_user_V_0_load_B;
reg   [1:0] stream_in_V_user_V_0_state;
wire    stream_in_V_user_V_0_state_cmp_full;
reg   [0:0] stream_in_V_last_V_0_data_out;
wire    stream_in_V_last_V_0_vld_in;
wire    stream_in_V_last_V_0_vld_out;
wire    stream_in_V_last_V_0_ack_in;
reg    stream_in_V_last_V_0_ack_out;
reg   [0:0] stream_in_V_last_V_0_payload_A;
reg   [0:0] stream_in_V_last_V_0_payload_B;
reg    stream_in_V_last_V_0_sel_rd;
reg    stream_in_V_last_V_0_sel_wr;
wire    stream_in_V_last_V_0_sel;
wire    stream_in_V_last_V_0_load_A;
wire    stream_in_V_last_V_0_load_B;
reg   [1:0] stream_in_V_last_V_0_state;
wire    stream_in_V_last_V_0_state_cmp_full;
reg   [4:0] stream_in_V_id_V_0_data_out;
wire    stream_in_V_id_V_0_vld_in;
wire    stream_in_V_id_V_0_vld_out;
wire    stream_in_V_id_V_0_ack_in;
reg    stream_in_V_id_V_0_ack_out;
reg   [4:0] stream_in_V_id_V_0_payload_A;
reg   [4:0] stream_in_V_id_V_0_payload_B;
reg    stream_in_V_id_V_0_sel_rd;
reg    stream_in_V_id_V_0_sel_wr;
wire    stream_in_V_id_V_0_sel;
wire    stream_in_V_id_V_0_load_A;
wire    stream_in_V_id_V_0_load_B;
reg   [1:0] stream_in_V_id_V_0_state;
wire    stream_in_V_id_V_0_state_cmp_full;
reg   [5:0] stream_in_V_dest_V_0_data_out;
wire    stream_in_V_dest_V_0_vld_in;
wire    stream_in_V_dest_V_0_vld_out;
wire    stream_in_V_dest_V_0_ack_in;
reg    stream_in_V_dest_V_0_ack_out;
reg   [5:0] stream_in_V_dest_V_0_payload_A;
reg   [5:0] stream_in_V_dest_V_0_payload_B;
reg    stream_in_V_dest_V_0_sel_rd;
reg    stream_in_V_dest_V_0_sel_wr;
wire    stream_in_V_dest_V_0_sel;
wire    stream_in_V_dest_V_0_load_A;
wire    stream_in_V_dest_V_0_load_B;
reg   [1:0] stream_in_V_dest_V_0_state;
wire    stream_in_V_dest_V_0_state_cmp_full;
reg   [31:0] stream_out_V_data_V_1_data_in;
reg   [31:0] stream_out_V_data_V_1_data_out;
reg    stream_out_V_data_V_1_vld_in;
wire    stream_out_V_data_V_1_vld_out;
wire    stream_out_V_data_V_1_ack_in;
wire    stream_out_V_data_V_1_ack_out;
reg   [31:0] stream_out_V_data_V_1_payload_A;
reg   [31:0] stream_out_V_data_V_1_payload_B;
reg    stream_out_V_data_V_1_sel_rd;
reg    stream_out_V_data_V_1_sel_wr;
wire    stream_out_V_data_V_1_sel;
wire    stream_out_V_data_V_1_load_A;
wire    stream_out_V_data_V_1_load_B;
reg   [1:0] stream_out_V_data_V_1_state;
wire    stream_out_V_data_V_1_state_cmp_full;
reg   [3:0] stream_out_V_keep_V_1_data_out;
reg    stream_out_V_keep_V_1_vld_in;
wire    stream_out_V_keep_V_1_vld_out;
wire    stream_out_V_keep_V_1_ack_in;
wire    stream_out_V_keep_V_1_ack_out;
reg   [3:0] stream_out_V_keep_V_1_payload_A;
reg   [3:0] stream_out_V_keep_V_1_payload_B;
reg    stream_out_V_keep_V_1_sel_rd;
reg    stream_out_V_keep_V_1_sel_wr;
wire    stream_out_V_keep_V_1_sel;
wire    stream_out_V_keep_V_1_load_A;
wire    stream_out_V_keep_V_1_load_B;
reg   [1:0] stream_out_V_keep_V_1_state;
wire    stream_out_V_keep_V_1_state_cmp_full;
reg   [3:0] stream_out_V_strb_V_1_data_out;
reg    stream_out_V_strb_V_1_vld_in;
wire    stream_out_V_strb_V_1_vld_out;
wire    stream_out_V_strb_V_1_ack_in;
wire    stream_out_V_strb_V_1_ack_out;
reg   [3:0] stream_out_V_strb_V_1_payload_A;
reg   [3:0] stream_out_V_strb_V_1_payload_B;
reg    stream_out_V_strb_V_1_sel_rd;
reg    stream_out_V_strb_V_1_sel_wr;
wire    stream_out_V_strb_V_1_sel;
wire    stream_out_V_strb_V_1_load_A;
wire    stream_out_V_strb_V_1_load_B;
reg   [1:0] stream_out_V_strb_V_1_state;
wire    stream_out_V_strb_V_1_state_cmp_full;
reg   [1:0] stream_out_V_user_V_1_data_out;
reg    stream_out_V_user_V_1_vld_in;
wire    stream_out_V_user_V_1_vld_out;
wire    stream_out_V_user_V_1_ack_in;
wire    stream_out_V_user_V_1_ack_out;
reg   [1:0] stream_out_V_user_V_1_payload_A;
reg   [1:0] stream_out_V_user_V_1_payload_B;
reg    stream_out_V_user_V_1_sel_rd;
reg    stream_out_V_user_V_1_sel_wr;
wire    stream_out_V_user_V_1_sel;
wire    stream_out_V_user_V_1_load_A;
wire    stream_out_V_user_V_1_load_B;
reg   [1:0] stream_out_V_user_V_1_state;
wire    stream_out_V_user_V_1_state_cmp_full;
reg   [0:0] stream_out_V_last_V_1_data_in;
reg   [0:0] stream_out_V_last_V_1_data_out;
reg    stream_out_V_last_V_1_vld_in;
wire    stream_out_V_last_V_1_vld_out;
wire    stream_out_V_last_V_1_ack_in;
wire    stream_out_V_last_V_1_ack_out;
reg   [0:0] stream_out_V_last_V_1_payload_A;
reg   [0:0] stream_out_V_last_V_1_payload_B;
reg    stream_out_V_last_V_1_sel_rd;
reg    stream_out_V_last_V_1_sel_wr;
wire    stream_out_V_last_V_1_sel;
wire    stream_out_V_last_V_1_load_A;
wire    stream_out_V_last_V_1_load_B;
reg   [1:0] stream_out_V_last_V_1_state;
wire    stream_out_V_last_V_1_state_cmp_full;
reg   [4:0] stream_out_V_id_V_1_data_out;
reg    stream_out_V_id_V_1_vld_in;
wire    stream_out_V_id_V_1_vld_out;
wire    stream_out_V_id_V_1_ack_in;
wire    stream_out_V_id_V_1_ack_out;
reg   [4:0] stream_out_V_id_V_1_payload_A;
reg   [4:0] stream_out_V_id_V_1_payload_B;
reg    stream_out_V_id_V_1_sel_rd;
reg    stream_out_V_id_V_1_sel_wr;
wire    stream_out_V_id_V_1_sel;
wire    stream_out_V_id_V_1_load_A;
wire    stream_out_V_id_V_1_load_B;
reg   [1:0] stream_out_V_id_V_1_state;
wire    stream_out_V_id_V_1_state_cmp_full;
reg   [5:0] stream_out_V_dest_V_1_data_out;
reg    stream_out_V_dest_V_1_vld_in;
wire    stream_out_V_dest_V_1_vld_out;
wire    stream_out_V_dest_V_1_ack_in;
wire    stream_out_V_dest_V_1_ack_out;
reg   [5:0] stream_out_V_dest_V_1_payload_A;
reg   [5:0] stream_out_V_dest_V_1_payload_B;
reg    stream_out_V_dest_V_1_sel_rd;
reg    stream_out_V_dest_V_1_sel_wr;
wire    stream_out_V_dest_V_1_sel;
wire    stream_out_V_dest_V_1_load_A;
wire    stream_out_V_dest_V_1_load_B;
reg   [1:0] stream_out_V_dest_V_1_state;
wire    stream_out_V_dest_V_1_state_cmp_full;
wire   [31:0] layerSize;
wire   [31:0] kernelSize;
wire   [31:0] vectorSize;
wire   [31:0] epsilon;
reg   [31:0] ip_index;
reg   [3:0] channel_keep_V;
reg   [3:0] channel_strb_V;
reg   [1:0] channel_user_V;
reg   [0:0] channel_last_V;
reg   [4:0] channel_id_V;
reg   [5:0] channel_dest_V;
reg   [9:0] state_vector_address0;
reg    state_vector_ce0;
reg    state_vector_we0;
wire   [31:0] state_vector_d0;
wire   [31:0] state_vector_q0;
reg   [9:0] state_vector_address1;
reg    state_vector_ce1;
reg    state_vector_we1;
wire   [31:0] state_vector_q1;
reg   [11:0] spike_matrix_address0;
reg    spike_matrix_ce0;
reg    spike_matrix_we0;
wire   [30:0] spike_matrix_q0;
reg   [9:0] temp_data_address0;
reg    temp_data_ce0;
reg    temp_data_we0;
wire   [31:0] temp_data_q0;
reg    stream_in_TDATA_blk_n;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage3;
reg   [0:0] tmp_11_reg_985;
wire    ap_CS_fsm_pp1_stage2;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage2;
reg   [0:0] tmp_22_reg_1050;
reg    stream_out_TDATA_blk_n;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] tmp_24_reg_1123;
reg    ap_enable_reg_pp3_iter2;
reg   [0:0] ap_reg_pp3_iter1_tmp_24_reg_1123;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_pp4_stage0;
reg   [0:0] tmp_s_reg_1152;
reg    ap_enable_reg_pp4_iter2;
reg   [0:0] ap_reg_pp4_iter1_tmp_s_reg_1152;
reg   [31:0] sum_load_reg_286;
reg   [30:0] i_load_1_reg_298;
reg   [30:0] ap_reg_pp0_iter1_i_load_1_reg_298;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state44_pp0_stage0_iter0;
wire    ap_block_state56_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] sum_load_1_reg_334;
reg   [30:0] i_load_2_reg_346;
reg   [30:0] tmp_35_reg_357;
reg   [30:0] i_load_3_reg_368;
reg   [30:0] i_load_reg_379;
wire   [31:0] grp_fu_390_p2;
reg   [31:0] reg_452;
wire    ap_CS_fsm_state11;
wire    ap_block_state118_pp2_stage0_iter0;
wire    ap_block_state119_pp2_stage0_iter1;
wire    ap_block_state120_pp2_stage0_iter2;
wire    ap_block_state121_pp2_stage0_iter3;
wire    ap_block_state122_pp2_stage0_iter4;
wire    ap_block_state123_pp2_stage0_iter5;
wire    ap_block_state124_pp2_stage0_iter6;
wire    ap_block_state125_pp2_stage0_iter7;
wire    ap_block_state126_pp2_stage0_iter8;
wire    ap_block_state127_pp2_stage0_iter9;
wire    ap_block_state128_pp2_stage0_iter10;
wire    ap_block_state129_pp2_stage0_iter11;
wire    ap_block_state130_pp2_stage0_iter12;
wire    ap_block_state131_pp2_stage0_iter13;
wire    ap_block_state132_pp2_stage0_iter14;
wire    ap_block_state133_pp2_stage0_iter15;
wire    ap_block_state134_pp2_stage0_iter16;
wire    ap_block_state135_pp2_stage0_iter17;
wire    ap_block_state136_pp2_stage0_iter18;
wire    ap_block_state137_pp2_stage0_iter19;
wire    ap_block_state138_pp2_stage0_iter20;
wire    ap_block_state139_pp2_stage0_iter21;
wire    ap_block_state140_pp2_stage0_iter22;
wire    ap_block_state141_pp2_stage0_iter23;
wire    ap_block_state142_pp2_stage0_iter24;
wire    ap_block_state143_pp2_stage0_iter25;
wire    ap_block_state144_pp2_stage0_iter26;
wire    ap_block_state145_pp2_stage0_iter27;
wire    ap_block_state146_pp2_stage0_iter28;
wire    ap_block_pp2_stage0_11001;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] tmp_51_reg_1014;
reg    ap_enable_reg_pp2_iter19;
reg   [0:0] tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter18_tmp_36_reg_1093;
reg   [31:0] reg_459;
wire    ap_CS_fsm_pp1_stage1;
wire    ap_block_state65_pp1_stage1_iter0;
wire    ap_block_state75_pp1_stage1_iter1;
wire    ap_block_pp1_stage1_11001;
reg    ap_enable_reg_pp2_iter9;
reg   [0:0] ap_reg_pp2_iter8_tmp_36_reg_1093;
wire   [31:0] grp_fu_398_p2;
reg   [31:0] reg_465;
wire    ap_CS_fsm_pp1_stage9;
wire    ap_block_state73_pp1_stage9_iter0;
wire    ap_block_state83_pp1_stage9_iter1;
wire    ap_block_pp1_stage9_11001;
wire    ap_block_state148_pp3_stage0_iter0;
wire    ap_block_state149_pp3_stage0_iter1;
reg    ap_block_state149_io;
wire    ap_block_state150_pp3_stage0_iter2;
reg    ap_block_state150_io;
reg    ap_block_pp3_stage0_11001;
wire    ap_block_state152_pp4_stage0_iter0;
wire    ap_block_state153_pp4_stage0_iter1;
reg    ap_block_state153_io;
wire    ap_block_state154_pp4_stage0_iter2;
reg    ap_block_state154_io;
reg    ap_block_pp4_stage0_11001;
reg   [31:0] epsilon_read_reg_914;
reg   [31:0] vectorSize_read_reg_920;
reg   [31:0] kernelSize_read_reg_929;
reg   [31:0] layerSize_read_reg_934;
wire   [31:0] grp_fu_406_p2;
reg   [31:0] reverse_epsilon_reg_941;
wire    ap_CS_fsm_state41;
wire   [31:0] tmp_2_fu_496_p2;
reg   [31:0] tmp_2_reg_946;
wire   [0:0] tmp_4_fu_507_p2;
wire    ap_CS_fsm_state42;
wire   [0:0] tmp_5_fu_512_p2;
reg   [0:0] tmp_5_reg_955;
wire   [31:0] tmp_6_fu_518_p2;
reg   [31:0] tmp_6_reg_959;
reg   [31:0] tmp_data_V_reg_964;
wire   [31:0] tmp_7_fu_583_p1;
reg   [31:0] tmp_7_reg_969;
wire   [0:0] notrhs8_fu_591_p2;
reg   [0:0] notrhs8_reg_975;
wire   [31:0] i_load_1_cast_fu_597_p1;
reg   [31:0] i_load_1_cast_reg_980;
wire   [0:0] tmp_11_fu_601_p2;
reg   [0:0] ap_reg_pp0_iter1_tmp_11_reg_985;
wire   [30:0] tmp_20_fu_606_p2;
reg   [30:0] tmp_20_reg_989;
wire   [0:0] notlhs7_fu_621_p2;
reg   [0:0] notlhs7_reg_994;
wire   [0:0] notlhs5_fu_645_p2;
reg   [0:0] notlhs5_reg_999;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state46_pp0_stage2_iter0;
wire    ap_block_state58_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [0:0] notrhs6_fu_651_p2;
reg   [0:0] notrhs6_reg_1004;
wire   [31:0] tmp_12_fu_657_p1;
reg    ap_block_state47_pp0_stage3_iter0;
wire    ap_block_state59_pp0_stage3_iter1;
reg    ap_block_pp0_stage3_11001;
wire   [0:0] tmp_51_fu_682_p2;
reg   [0:0] ap_reg_pp0_iter1_tmp_51_reg_1014;
wire   [0:0] tmp_17_fu_688_p2;
reg   [0:0] tmp_17_reg_1018;
reg   [0:0] ap_reg_pp0_iter1_tmp_17_reg_1018;
wire   [0:0] notlhs1_fu_710_p2;
reg   [0:0] notlhs1_reg_1023;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state45_pp0_stage1_iter0;
wire    ap_block_state57_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] notrhs2_fu_716_p2;
reg   [0:0] notrhs2_reg_1028;
wire   [0:0] grp_fu_412_p2;
reg   [0:0] tmp_55_reg_1033;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state48_pp0_stage4_iter0;
wire    ap_block_state60_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire   [0:0] tmp_18_fu_745_p2;
wire    ap_CS_fsm_state63;
wire   [30:0] tmp_42_fu_750_p2;
reg   [30:0] tmp_42_reg_1045;
wire   [0:0] tmp_22_fu_760_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state64_pp1_stage0_iter0;
wire    ap_block_state74_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] ap_reg_pp1_iter1_tmp_22_reg_1050;
wire   [30:0] tmp_29_fu_765_p2;
reg   [30:0] tmp_29_reg_1054;
wire   [63:0] tmp_25_fu_771_p1;
reg   [63:0] tmp_25_reg_1059;
wire   [31:0] tmp_26_fu_776_p1;
reg    ap_block_state66_pp1_stage2_iter0;
wire    ap_block_state76_pp1_stage2_iter1;
reg    ap_block_pp1_stage2_11001;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] tmp_60_reg_1079;
wire    ap_CS_fsm_state87;
wire   [0:0] tmp_61_fu_817_p2;
wire    ap_CS_fsm_state88;
reg   [31:0] tmp_34_reg_1088;
wire    ap_CS_fsm_state117;
wire   [0:0] tmp_36_fu_826_p2;
wire    ap_CS_fsm_pp2_stage0;
reg   [0:0] ap_reg_pp2_iter1_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter2_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter3_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter4_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter5_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter6_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter7_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter9_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter10_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter11_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter12_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter13_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter14_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter15_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter16_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter17_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter19_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter20_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter21_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter22_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter23_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter24_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter25_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter26_tmp_36_reg_1093;
reg   [0:0] ap_reg_pp2_iter27_tmp_36_reg_1093;
wire   [30:0] tmp_41_fu_831_p2;
reg    ap_enable_reg_pp2_iter0;
reg   [9:0] state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter1_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter2_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter3_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter4_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter5_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter6_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter7_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter8_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter9_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter10_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter11_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter12_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter13_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter14_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter15_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter16_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter17_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter18_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter19_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter20_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter21_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter22_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter23_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter24_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter25_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter26_state_vector_addr_3_reg_1102;
reg   [9:0] ap_reg_pp2_iter27_state_vector_addr_3_reg_1102;
reg   [31:0] temp_data_load_reg_1113;
reg    ap_enable_reg_pp2_iter1;
wire   [31:0] grp_fu_402_p2;
reg   [31:0] tmp_40_reg_1118;
wire   [0:0] tmp_24_fu_847_p2;
wire   [30:0] tmp_32_fu_852_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [31:0] tmp_data_V_4_fu_863_p1;
wire   [31:0] tmp_33_fu_873_p2;
wire    ap_CS_fsm_state151;
wire   [0:0] tmp_s_fu_883_p2;
wire   [30:0] tmp_10_fu_888_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [0:0] tmp_last_V_1_fu_899_p2;
reg   [0:0] tmp_last_V_1_reg_1166;
wire   [31:0] tmp_data_V_1_fu_904_p1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state44;
wire    ap_block_state55_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_subdone;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state49_pp0_stage5_iter0;
wire    ap_block_state61_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_subdone;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state64;
wire    ap_block_pp1_stage9_subdone;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state118;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter10;
reg    ap_enable_reg_pp2_iter11;
reg    ap_enable_reg_pp2_iter12;
reg    ap_enable_reg_pp2_iter13;
reg    ap_enable_reg_pp2_iter14;
reg    ap_enable_reg_pp2_iter15;
reg    ap_enable_reg_pp2_iter16;
reg    ap_enable_reg_pp2_iter17;
reg    ap_enable_reg_pp2_iter18;
reg    ap_enable_reg_pp2_iter20;
reg    ap_enable_reg_pp2_iter21;
reg    ap_enable_reg_pp2_iter22;
reg    ap_enable_reg_pp2_iter23;
reg    ap_enable_reg_pp2_iter24;
reg    ap_enable_reg_pp2_iter25;
reg    ap_enable_reg_pp2_iter26;
reg    ap_enable_reg_pp2_iter27;
reg    ap_enable_reg_pp2_iter28;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state148;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state152;
reg   [31:0] tmp_3_reg_275;
reg   [31:0] ap_phi_mux_sum_load_phi_fu_290_p4;
reg   [31:0] ap_phi_mux_sum_load2_phi_fu_315_p4;
wire    ap_block_pp0_stage0;
reg   [30:0] ap_phi_mux_i_load_1_phi_fu_303_p4;
reg   [31:0] ap_phi_reg_pp0_iter1_sum_load2_reg_311;
reg   [31:0] ap_phi_reg_pp0_iter0_sum_load2_reg_311;
wire    ap_block_pp0_stage11_11001;
reg   [30:0] batch_load_reg_323;
wire    ap_CS_fsm_state147;
wire    ap_CS_fsm_state62;
reg   [30:0] ap_phi_mux_i_load_2_phi_fu_350_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] tmp_13_fu_663_p1;
wire  signed [63:0] tmp_19_fu_736_p1;
wire    ap_block_pp0_stage5;
wire   [0:0] or_cond_fu_731_p2;
wire   [63:0] tmp_37_fu_837_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] tmp_31_fu_858_p1;
wire   [63:0] tmp_8_fu_894_p1;
wire    ap_block_pp3_stage0_01001;
wire    ap_block_pp4_stage0_01001;
wire    ap_block_pp0_stage5_11001;
reg   [31:0] grp_fu_390_p0;
reg   [31:0] grp_fu_390_p1;
wire    ap_CS_fsm_state2;
reg   [31:0] grp_fu_398_p0;
reg   [31:0] grp_fu_398_p1;
reg   [31:0] grp_fu_406_p0;
reg   [31:0] grp_fu_406_p1;
wire    ap_CS_fsm_state12;
reg   [31:0] grp_fu_412_p0;
reg   [31:0] grp_fu_412_p1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_state84;
wire   [22:0] tmp_21_fu_587_p1;
wire   [7:0] tmp_30_fu_612_p4;
wire    ap_block_pp0_stage2;
wire   [31:0] sum_load_to_int_fu_627_p1;
wire   [7:0] tmp_16_fu_631_p4;
wire   [22:0] tmp_46_fu_641_p1;
wire   [0:0] tmp_47_fu_668_p2;
wire   [0:0] tmp_48_fu_672_p2;
wire   [0:0] tmp_49_fu_676_p2;
wire   [31:0] tmp_15_to_int_fu_692_p1;
wire   [7:0] tmp_52_fu_696_p4;
wire   [22:0] tmp_53_fu_706_p1;
wire   [0:0] tmp_54_fu_722_p2;
wire   [0:0] tmp_56_fu_726_p2;
wire   [31:0] batch_load_cast_fu_741_p1;
wire   [31:0] i_load_2_cast_fu_756_p1;
wire   [31:0] sum_load_1_to_int_fu_781_p1;
wire   [7:0] tmp_57_fu_785_p4;
wire   [22:0] tmp_58_fu_795_p1;
wire   [0:0] notrhs_fu_805_p2;
wire   [0:0] notlhs_fu_799_p2;
wire   [0:0] tmp_59_fu_811_p2;
wire   [31:0] tmp_35_cast_fu_822_p1;
wire   [31:0] i_load_3_cast_fu_843_p1;
wire   [31:0] i_load_cast_fu_879_p1;
reg    grp_fu_390_ce;
reg    ap_predicate_op289_fadd_state47;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_block_state50_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state51_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state52_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state53_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_11001;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state54_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state67_pp1_stage3_iter0;
wire    ap_block_state77_pp1_stage3_iter1;
wire    ap_block_pp1_stage3_11001;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_state68_pp1_stage4_iter0;
wire    ap_block_state78_pp1_stage4_iter1;
wire    ap_block_pp1_stage4_11001;
wire    ap_CS_fsm_pp1_stage4;
wire    ap_block_state69_pp1_stage5_iter0;
wire    ap_block_state79_pp1_stage5_iter1;
wire    ap_block_pp1_stage5_11001;
wire    ap_CS_fsm_pp1_stage5;
wire    ap_block_state70_pp1_stage6_iter0;
wire    ap_block_state80_pp1_stage6_iter1;
wire    ap_block_pp1_stage6_11001;
wire    ap_CS_fsm_pp1_stage6;
wire    ap_block_state71_pp1_stage7_iter0;
wire    ap_block_state81_pp1_stage7_iter1;
wire    ap_block_pp1_stage7_11001;
wire    ap_CS_fsm_pp1_stage7;
wire    ap_block_state72_pp1_stage8_iter0;
wire    ap_block_state82_pp1_stage8_iter1;
wire    ap_block_pp1_stage8_11001;
wire    ap_CS_fsm_pp1_stage8;
reg    grp_fu_398_ce;
reg    grp_fu_412_ce;
reg    ap_predicate_op309_fcmp_state57;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state86;
reg   [4:0] grp_fu_412_opcode;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage1_00001;
wire    ap_CS_fsm_state155;
reg    ap_block_state155;
reg   [106:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp1_stage1_subdone;
reg    ap_block_pp1_stage2_subdone;
wire    ap_block_pp1_stage3_subdone;
wire    ap_block_pp1_stage4_subdone;
wire    ap_block_pp1_stage5_subdone;
wire    ap_block_pp1_stage6_subdone;
wire    ap_block_pp1_stage7_subdone;
wire    ap_block_pp1_stage8_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;

// power-on initialization
initial begin
#0 ap_CS_fsm = 107'd1;
#0 stream_in_V_data_V_0_sel_rd = 1'b0;
#0 stream_in_V_data_V_0_sel_wr = 1'b0;
#0 stream_in_V_data_V_0_state = 2'd0;
#0 stream_in_V_keep_V_0_sel_rd = 1'b0;
#0 stream_in_V_keep_V_0_sel_wr = 1'b0;
#0 stream_in_V_keep_V_0_state = 2'd0;
#0 stream_in_V_strb_V_0_sel_rd = 1'b0;
#0 stream_in_V_strb_V_0_sel_wr = 1'b0;
#0 stream_in_V_strb_V_0_state = 2'd0;
#0 stream_in_V_user_V_0_sel_rd = 1'b0;
#0 stream_in_V_user_V_0_sel_wr = 1'b0;
#0 stream_in_V_user_V_0_state = 2'd0;
#0 stream_in_V_last_V_0_sel_rd = 1'b0;
#0 stream_in_V_last_V_0_sel_wr = 1'b0;
#0 stream_in_V_last_V_0_state = 2'd0;
#0 stream_in_V_id_V_0_sel_rd = 1'b0;
#0 stream_in_V_id_V_0_sel_wr = 1'b0;
#0 stream_in_V_id_V_0_state = 2'd0;
#0 stream_in_V_dest_V_0_sel_rd = 1'b0;
#0 stream_in_V_dest_V_0_sel_wr = 1'b0;
#0 stream_in_V_dest_V_0_state = 2'd0;
#0 stream_out_V_data_V_1_sel_rd = 1'b0;
#0 stream_out_V_data_V_1_sel_wr = 1'b0;
#0 stream_out_V_data_V_1_state = 2'd0;
#0 stream_out_V_keep_V_1_sel_rd = 1'b0;
#0 stream_out_V_keep_V_1_sel_wr = 1'b0;
#0 stream_out_V_keep_V_1_state = 2'd0;
#0 stream_out_V_strb_V_1_sel_rd = 1'b0;
#0 stream_out_V_strb_V_1_sel_wr = 1'b0;
#0 stream_out_V_strb_V_1_state = 2'd0;
#0 stream_out_V_user_V_1_sel_rd = 1'b0;
#0 stream_out_V_user_V_1_sel_wr = 1'b0;
#0 stream_out_V_user_V_1_state = 2'd0;
#0 stream_out_V_last_V_1_sel_rd = 1'b0;
#0 stream_out_V_last_V_1_sel_wr = 1'b0;
#0 stream_out_V_last_V_1_state = 2'd0;
#0 stream_out_V_id_V_1_sel_rd = 1'b0;
#0 stream_out_V_id_V_1_sel_wr = 1'b0;
#0 stream_out_V_id_V_1_state = 2'd0;
#0 stream_out_V_dest_V_1_sel_rd = 1'b0;
#0 stream_out_V_dest_V_1_sel_wr = 1'b0;
#0 stream_out_V_dest_V_1_state = 2'd0;
#0 ip_index = 32'd0;
#0 channel_keep_V = 4'd0;
#0 channel_strb_V = 4'd0;
#0 channel_user_V = 2'd0;
#0 channel_last_V = 1'd0;
#0 channel_id_V = 5'd0;
#0 channel_dest_V = 6'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter19 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
#0 ap_enable_reg_pp2_iter12 = 1'b0;
#0 ap_enable_reg_pp2_iter13 = 1'b0;
#0 ap_enable_reg_pp2_iter14 = 1'b0;
#0 ap_enable_reg_pp2_iter15 = 1'b0;
#0 ap_enable_reg_pp2_iter16 = 1'b0;
#0 ap_enable_reg_pp2_iter17 = 1'b0;
#0 ap_enable_reg_pp2_iter18 = 1'b0;
#0 ap_enable_reg_pp2_iter20 = 1'b0;
#0 ap_enable_reg_pp2_iter21 = 1'b0;
#0 ap_enable_reg_pp2_iter22 = 1'b0;
#0 ap_enable_reg_pp2_iter23 = 1'b0;
#0 ap_enable_reg_pp2_iter24 = 1'b0;
#0 ap_enable_reg_pp2_iter25 = 1'b0;
#0 ap_enable_reg_pp2_iter26 = 1'b0;
#0 ap_enable_reg_pp2_iter27 = 1'b0;
#0 ap_enable_reg_pp2_iter28 = 1'b0;
end

sbs_accelerator_sbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
state_vector_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(state_vector_address0),
    .ce0(state_vector_ce0),
    .we0(state_vector_we0),
    .d0(state_vector_d0),
    .q0(state_vector_q0),
    .address1(state_vector_address1),
    .ce1(state_vector_ce1),
    .we1(state_vector_we1),
    .d1(tmp_40_reg_1118),
    .q1(state_vector_q1)
);

sbs_accelerator_scud #(
    .DataWidth( 31 ),
    .AddressRange( 3600 ),
    .AddressWidth( 12 ))
spike_matrix_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(spike_matrix_address0),
    .ce0(spike_matrix_ce0),
    .we0(spike_matrix_we0),
    .d0(ap_reg_pp0_iter1_i_load_1_reg_298),
    .q0(spike_matrix_q0)
);

sbs_accelerator_tdEe #(
    .DataWidth( 32 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
temp_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp_data_address0),
    .ce0(temp_data_ce0),
    .we0(temp_data_we0),
    .d0(reg_465),
    .q0(temp_data_q0)
);

sbs_accelerator_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
sbs_accelerator_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .layerSize(layerSize),
    .kernelSize(kernelSize),
    .vectorSize(vectorSize),
    .epsilon(epsilon)
);

sbs_accelerator_feOg #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sbs_accelerator_feOg_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_390_p0),
    .din1(grp_fu_390_p1),
    .ce(grp_fu_390_ce),
    .dout(grp_fu_390_p2)
);

sbs_accelerator_ffYi #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sbs_accelerator_ffYi_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_398_p0),
    .din1(grp_fu_398_p1),
    .ce(grp_fu_398_ce),
    .dout(grp_fu_398_p2)
);

sbs_accelerator_ffYi #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sbs_accelerator_ffYi_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reverse_epsilon_reg_941),
    .din1(reg_452),
    .ce(1'b1),
    .dout(grp_fu_402_p2)
);

sbs_accelerator_fg8j #(
    .ID( 1 ),
    .NUM_STAGE( 30 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sbs_accelerator_fg8j_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_406_p0),
    .din1(grp_fu_406_p1),
    .ce(1'b1),
    .dout(grp_fu_406_p2)
);

sbs_accelerator_fhbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
sbs_accelerator_fhbi_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_412_p0),
    .din1(grp_fu_412_p1),
    .ce(grp_fu_412_ce),
    .opcode(grp_fu_412_opcode),
    .dout(grp_fu_412_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state44) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state43) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state44) & (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_subdone))))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state44);
        end else if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state43) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state64) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state63) & (tmp_18_fu_745_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state64) & (1'b1 == ap_CS_fsm_pp1_stage9) & (1'b0 == ap_block_pp1_stage9_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state64);
        end else if (((1'b1 == ap_CS_fsm_pp1_stage9) & (1'b0 == ap_block_pp1_stage9_subdone))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((1'b1 == ap_CS_fsm_state63) & (tmp_18_fu_745_p2 == 1'd1))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state118) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state117)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state118)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state118);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter17 <= ap_enable_reg_pp2_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter18 <= ap_enable_reg_pp2_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter19 <= ap_enable_reg_pp2_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter20 <= ap_enable_reg_pp2_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter21 <= ap_enable_reg_pp2_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter22 <= ap_enable_reg_pp2_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter23 <= ap_enable_reg_pp2_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter24 <= ap_enable_reg_pp2_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter25 <= ap_enable_reg_pp2_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter26 <= ap_enable_reg_pp2_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter27 <= ap_enable_reg_pp2_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter28 <= ap_enable_reg_pp2_iter27;
        end else if ((1'b1 == ap_CS_fsm_state117)) begin
            ap_enable_reg_pp2_iter28 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state148) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state63) & (tmp_18_fu_745_p2 == 1'd0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state148)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state148);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((1'b1 == ap_CS_fsm_state63) & (tmp_18_fu_745_p2 == 1'd0))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp4_exit_iter0_state152) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state42) & (tmp_4_fu_507_p2 == 1'd0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state152)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state152);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if (((1'b1 == ap_CS_fsm_state42) & (tmp_4_fu_507_p2 == 1'd0))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_data_V_0_ack_out == 1'b1) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
            stream_in_V_data_V_0_sel_rd <= ~stream_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_data_V_0_ack_in == 1'b1) & (stream_in_V_data_V_0_vld_in == 1'b1))) begin
            stream_in_V_data_V_0_sel_wr <= ~stream_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_data_V_0_vld_in == 1'b0) & (stream_in_V_data_V_0_state == 2'd2)) | ((stream_in_V_data_V_0_vld_in == 1'b0) & (stream_in_V_data_V_0_ack_out == 1'b1) & (stream_in_V_data_V_0_state == 2'd3)))) begin
            stream_in_V_data_V_0_state <= 2'd2;
        end else if ((((stream_in_V_data_V_0_ack_out == 1'b0) & (stream_in_V_data_V_0_state == 2'd1)) | ((stream_in_V_data_V_0_ack_out == 1'b0) & (stream_in_V_data_V_0_vld_in == 1'b1) & (stream_in_V_data_V_0_state == 2'd3)))) begin
            stream_in_V_data_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_data_V_0_vld_in == 1'b0) & (stream_in_V_data_V_0_ack_out == 1'b1)) & ~((stream_in_V_data_V_0_ack_out == 1'b0) & (stream_in_V_data_V_0_vld_in == 1'b1)) & (stream_in_V_data_V_0_state == 2'd3)) | ((stream_in_V_data_V_0_ack_out == 1'b1) & (stream_in_V_data_V_0_state == 2'd1)) | ((stream_in_V_data_V_0_vld_in == 1'b1) & (stream_in_V_data_V_0_state == 2'd2)))) begin
            stream_in_V_data_V_0_state <= 2'd3;
        end else begin
            stream_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_dest_V_0_ack_out == 1'b1) & (stream_in_V_dest_V_0_vld_out == 1'b1))) begin
            stream_in_V_dest_V_0_sel_rd <= ~stream_in_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_dest_V_0_ack_in == 1'b1) & (stream_in_V_dest_V_0_vld_in == 1'b1))) begin
            stream_in_V_dest_V_0_sel_wr <= ~stream_in_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_dest_V_0_vld_in == 1'b0) & (stream_in_V_dest_V_0_state == 2'd2)) | ((stream_in_V_dest_V_0_vld_in == 1'b0) & (stream_in_V_dest_V_0_ack_out == 1'b1) & (stream_in_V_dest_V_0_state == 2'd3)))) begin
            stream_in_V_dest_V_0_state <= 2'd2;
        end else if ((((stream_in_V_dest_V_0_ack_out == 1'b0) & (stream_in_V_dest_V_0_state == 2'd1)) | ((stream_in_V_dest_V_0_ack_out == 1'b0) & (stream_in_V_dest_V_0_vld_in == 1'b1) & (stream_in_V_dest_V_0_state == 2'd3)))) begin
            stream_in_V_dest_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_dest_V_0_vld_in == 1'b0) & (stream_in_V_dest_V_0_ack_out == 1'b1)) & ~((stream_in_V_dest_V_0_ack_out == 1'b0) & (stream_in_V_dest_V_0_vld_in == 1'b1)) & (stream_in_V_dest_V_0_state == 2'd3)) | ((stream_in_V_dest_V_0_ack_out == 1'b1) & (stream_in_V_dest_V_0_state == 2'd1)) | ((stream_in_V_dest_V_0_vld_in == 1'b1) & (stream_in_V_dest_V_0_state == 2'd2)))) begin
            stream_in_V_dest_V_0_state <= 2'd3;
        end else begin
            stream_in_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_id_V_0_ack_out == 1'b1) & (stream_in_V_id_V_0_vld_out == 1'b1))) begin
            stream_in_V_id_V_0_sel_rd <= ~stream_in_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_id_V_0_ack_in == 1'b1) & (stream_in_V_id_V_0_vld_in == 1'b1))) begin
            stream_in_V_id_V_0_sel_wr <= ~stream_in_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_id_V_0_vld_in == 1'b0) & (stream_in_V_id_V_0_state == 2'd2)) | ((stream_in_V_id_V_0_vld_in == 1'b0) & (stream_in_V_id_V_0_ack_out == 1'b1) & (stream_in_V_id_V_0_state == 2'd3)))) begin
            stream_in_V_id_V_0_state <= 2'd2;
        end else if ((((stream_in_V_id_V_0_ack_out == 1'b0) & (stream_in_V_id_V_0_state == 2'd1)) | ((stream_in_V_id_V_0_ack_out == 1'b0) & (stream_in_V_id_V_0_vld_in == 1'b1) & (stream_in_V_id_V_0_state == 2'd3)))) begin
            stream_in_V_id_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_id_V_0_vld_in == 1'b0) & (stream_in_V_id_V_0_ack_out == 1'b1)) & ~((stream_in_V_id_V_0_ack_out == 1'b0) & (stream_in_V_id_V_0_vld_in == 1'b1)) & (stream_in_V_id_V_0_state == 2'd3)) | ((stream_in_V_id_V_0_ack_out == 1'b1) & (stream_in_V_id_V_0_state == 2'd1)) | ((stream_in_V_id_V_0_vld_in == 1'b1) & (stream_in_V_id_V_0_state == 2'd2)))) begin
            stream_in_V_id_V_0_state <= 2'd3;
        end else begin
            stream_in_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_keep_V_0_ack_out == 1'b1) & (stream_in_V_keep_V_0_vld_out == 1'b1))) begin
            stream_in_V_keep_V_0_sel_rd <= ~stream_in_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_keep_V_0_ack_in == 1'b1) & (stream_in_V_keep_V_0_vld_in == 1'b1))) begin
            stream_in_V_keep_V_0_sel_wr <= ~stream_in_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_keep_V_0_vld_in == 1'b0) & (stream_in_V_keep_V_0_state == 2'd2)) | ((stream_in_V_keep_V_0_vld_in == 1'b0) & (stream_in_V_keep_V_0_ack_out == 1'b1) & (stream_in_V_keep_V_0_state == 2'd3)))) begin
            stream_in_V_keep_V_0_state <= 2'd2;
        end else if ((((stream_in_V_keep_V_0_ack_out == 1'b0) & (stream_in_V_keep_V_0_state == 2'd1)) | ((stream_in_V_keep_V_0_ack_out == 1'b0) & (stream_in_V_keep_V_0_vld_in == 1'b1) & (stream_in_V_keep_V_0_state == 2'd3)))) begin
            stream_in_V_keep_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_keep_V_0_vld_in == 1'b0) & (stream_in_V_keep_V_0_ack_out == 1'b1)) & ~((stream_in_V_keep_V_0_ack_out == 1'b0) & (stream_in_V_keep_V_0_vld_in == 1'b1)) & (stream_in_V_keep_V_0_state == 2'd3)) | ((stream_in_V_keep_V_0_ack_out == 1'b1) & (stream_in_V_keep_V_0_state == 2'd1)) | ((stream_in_V_keep_V_0_vld_in == 1'b1) & (stream_in_V_keep_V_0_state == 2'd2)))) begin
            stream_in_V_keep_V_0_state <= 2'd3;
        end else begin
            stream_in_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_last_V_0_ack_out == 1'b1) & (stream_in_V_last_V_0_vld_out == 1'b1))) begin
            stream_in_V_last_V_0_sel_rd <= ~stream_in_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_last_V_0_ack_in == 1'b1) & (stream_in_V_last_V_0_vld_in == 1'b1))) begin
            stream_in_V_last_V_0_sel_wr <= ~stream_in_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_last_V_0_vld_in == 1'b0) & (stream_in_V_last_V_0_state == 2'd2)) | ((stream_in_V_last_V_0_vld_in == 1'b0) & (stream_in_V_last_V_0_ack_out == 1'b1) & (stream_in_V_last_V_0_state == 2'd3)))) begin
            stream_in_V_last_V_0_state <= 2'd2;
        end else if ((((stream_in_V_last_V_0_ack_out == 1'b0) & (stream_in_V_last_V_0_state == 2'd1)) | ((stream_in_V_last_V_0_ack_out == 1'b0) & (stream_in_V_last_V_0_vld_in == 1'b1) & (stream_in_V_last_V_0_state == 2'd3)))) begin
            stream_in_V_last_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_last_V_0_vld_in == 1'b0) & (stream_in_V_last_V_0_ack_out == 1'b1)) & ~((stream_in_V_last_V_0_ack_out == 1'b0) & (stream_in_V_last_V_0_vld_in == 1'b1)) & (stream_in_V_last_V_0_state == 2'd3)) | ((stream_in_V_last_V_0_ack_out == 1'b1) & (stream_in_V_last_V_0_state == 2'd1)) | ((stream_in_V_last_V_0_vld_in == 1'b1) & (stream_in_V_last_V_0_state == 2'd2)))) begin
            stream_in_V_last_V_0_state <= 2'd3;
        end else begin
            stream_in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_strb_V_0_ack_out == 1'b1) & (stream_in_V_strb_V_0_vld_out == 1'b1))) begin
            stream_in_V_strb_V_0_sel_rd <= ~stream_in_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_strb_V_0_ack_in == 1'b1) & (stream_in_V_strb_V_0_vld_in == 1'b1))) begin
            stream_in_V_strb_V_0_sel_wr <= ~stream_in_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_strb_V_0_vld_in == 1'b0) & (stream_in_V_strb_V_0_state == 2'd2)) | ((stream_in_V_strb_V_0_vld_in == 1'b0) & (stream_in_V_strb_V_0_ack_out == 1'b1) & (stream_in_V_strb_V_0_state == 2'd3)))) begin
            stream_in_V_strb_V_0_state <= 2'd2;
        end else if ((((stream_in_V_strb_V_0_ack_out == 1'b0) & (stream_in_V_strb_V_0_state == 2'd1)) | ((stream_in_V_strb_V_0_ack_out == 1'b0) & (stream_in_V_strb_V_0_vld_in == 1'b1) & (stream_in_V_strb_V_0_state == 2'd3)))) begin
            stream_in_V_strb_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_strb_V_0_vld_in == 1'b0) & (stream_in_V_strb_V_0_ack_out == 1'b1)) & ~((stream_in_V_strb_V_0_ack_out == 1'b0) & (stream_in_V_strb_V_0_vld_in == 1'b1)) & (stream_in_V_strb_V_0_state == 2'd3)) | ((stream_in_V_strb_V_0_ack_out == 1'b1) & (stream_in_V_strb_V_0_state == 2'd1)) | ((stream_in_V_strb_V_0_vld_in == 1'b1) & (stream_in_V_strb_V_0_state == 2'd2)))) begin
            stream_in_V_strb_V_0_state <= 2'd3;
        end else begin
            stream_in_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_user_V_0_ack_out == 1'b1) & (stream_in_V_user_V_0_vld_out == 1'b1))) begin
            stream_in_V_user_V_0_sel_rd <= ~stream_in_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_user_V_0_ack_in == 1'b1) & (stream_in_V_user_V_0_vld_in == 1'b1))) begin
            stream_in_V_user_V_0_sel_wr <= ~stream_in_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_user_V_0_vld_in == 1'b0) & (stream_in_V_user_V_0_state == 2'd2)) | ((stream_in_V_user_V_0_vld_in == 1'b0) & (stream_in_V_user_V_0_ack_out == 1'b1) & (stream_in_V_user_V_0_state == 2'd3)))) begin
            stream_in_V_user_V_0_state <= 2'd2;
        end else if ((((stream_in_V_user_V_0_ack_out == 1'b0) & (stream_in_V_user_V_0_state == 2'd1)) | ((stream_in_V_user_V_0_ack_out == 1'b0) & (stream_in_V_user_V_0_vld_in == 1'b1) & (stream_in_V_user_V_0_state == 2'd3)))) begin
            stream_in_V_user_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_user_V_0_vld_in == 1'b0) & (stream_in_V_user_V_0_ack_out == 1'b1)) & ~((stream_in_V_user_V_0_ack_out == 1'b0) & (stream_in_V_user_V_0_vld_in == 1'b1)) & (stream_in_V_user_V_0_state == 2'd3)) | ((stream_in_V_user_V_0_ack_out == 1'b1) & (stream_in_V_user_V_0_state == 2'd1)) | ((stream_in_V_user_V_0_vld_in == 1'b1) & (stream_in_V_user_V_0_state == 2'd2)))) begin
            stream_in_V_user_V_0_state <= 2'd3;
        end else begin
            stream_in_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_data_V_1_ack_out == 1'b1) & (stream_out_V_data_V_1_vld_out == 1'b1))) begin
            stream_out_V_data_V_1_sel_rd <= ~stream_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_data_V_1_ack_in == 1'b1) & (stream_out_V_data_V_1_vld_in == 1'b1))) begin
            stream_out_V_data_V_1_sel_wr <= ~stream_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_state == 2'd2)) | ((stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_ack_out == 1'b1) & (stream_out_V_data_V_1_state == 2'd3)))) begin
            stream_out_V_data_V_1_state <= 2'd2;
        end else if ((((stream_out_V_data_V_1_ack_out == 1'b0) & (stream_out_V_data_V_1_state == 2'd1)) | ((stream_out_V_data_V_1_ack_out == 1'b0) & (stream_out_V_data_V_1_vld_in == 1'b1) & (stream_out_V_data_V_1_state == 2'd3)))) begin
            stream_out_V_data_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_ack_out == 1'b1)) & ~((stream_out_V_data_V_1_ack_out == 1'b0) & (stream_out_V_data_V_1_vld_in == 1'b1)) & (stream_out_V_data_V_1_state == 2'd3)) | ((stream_out_V_data_V_1_ack_out == 1'b1) & (stream_out_V_data_V_1_state == 2'd1)) | ((stream_out_V_data_V_1_vld_in == 1'b1) & (stream_out_V_data_V_1_state == 2'd2)))) begin
            stream_out_V_data_V_1_state <= 2'd3;
        end else begin
            stream_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_dest_V_1_ack_out == 1'b1) & (stream_out_V_dest_V_1_vld_out == 1'b1))) begin
            stream_out_V_dest_V_1_sel_rd <= ~stream_out_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_dest_V_1_ack_in == 1'b1) & (stream_out_V_dest_V_1_vld_in == 1'b1))) begin
            stream_out_V_dest_V_1_sel_wr <= ~stream_out_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_dest_V_1_vld_in == 1'b0) & (stream_out_V_dest_V_1_state == 2'd2)) | ((stream_out_V_dest_V_1_vld_in == 1'b0) & (stream_out_V_dest_V_1_ack_out == 1'b1) & (stream_out_V_dest_V_1_state == 2'd3)))) begin
            stream_out_V_dest_V_1_state <= 2'd2;
        end else if ((((stream_out_V_dest_V_1_ack_out == 1'b0) & (stream_out_V_dest_V_1_state == 2'd1)) | ((stream_out_V_dest_V_1_ack_out == 1'b0) & (stream_out_V_dest_V_1_vld_in == 1'b1) & (stream_out_V_dest_V_1_state == 2'd3)))) begin
            stream_out_V_dest_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_dest_V_1_vld_in == 1'b0) & (stream_out_V_dest_V_1_ack_out == 1'b1)) & ~((stream_out_V_dest_V_1_ack_out == 1'b0) & (stream_out_V_dest_V_1_vld_in == 1'b1)) & (stream_out_V_dest_V_1_state == 2'd3)) | ((stream_out_V_dest_V_1_ack_out == 1'b1) & (stream_out_V_dest_V_1_state == 2'd1)) | ((stream_out_V_dest_V_1_vld_in == 1'b1) & (stream_out_V_dest_V_1_state == 2'd2)))) begin
            stream_out_V_dest_V_1_state <= 2'd3;
        end else begin
            stream_out_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_id_V_1_ack_out == 1'b1) & (stream_out_V_id_V_1_vld_out == 1'b1))) begin
            stream_out_V_id_V_1_sel_rd <= ~stream_out_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_id_V_1_ack_in == 1'b1) & (stream_out_V_id_V_1_vld_in == 1'b1))) begin
            stream_out_V_id_V_1_sel_wr <= ~stream_out_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_id_V_1_vld_in == 1'b0) & (stream_out_V_id_V_1_state == 2'd2)) | ((stream_out_V_id_V_1_vld_in == 1'b0) & (stream_out_V_id_V_1_ack_out == 1'b1) & (stream_out_V_id_V_1_state == 2'd3)))) begin
            stream_out_V_id_V_1_state <= 2'd2;
        end else if ((((stream_out_V_id_V_1_ack_out == 1'b0) & (stream_out_V_id_V_1_state == 2'd1)) | ((stream_out_V_id_V_1_ack_out == 1'b0) & (stream_out_V_id_V_1_vld_in == 1'b1) & (stream_out_V_id_V_1_state == 2'd3)))) begin
            stream_out_V_id_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_id_V_1_vld_in == 1'b0) & (stream_out_V_id_V_1_ack_out == 1'b1)) & ~((stream_out_V_id_V_1_ack_out == 1'b0) & (stream_out_V_id_V_1_vld_in == 1'b1)) & (stream_out_V_id_V_1_state == 2'd3)) | ((stream_out_V_id_V_1_ack_out == 1'b1) & (stream_out_V_id_V_1_state == 2'd1)) | ((stream_out_V_id_V_1_vld_in == 1'b1) & (stream_out_V_id_V_1_state == 2'd2)))) begin
            stream_out_V_id_V_1_state <= 2'd3;
        end else begin
            stream_out_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_keep_V_1_ack_out == 1'b1) & (stream_out_V_keep_V_1_vld_out == 1'b1))) begin
            stream_out_V_keep_V_1_sel_rd <= ~stream_out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_keep_V_1_ack_in == 1'b1) & (stream_out_V_keep_V_1_vld_in == 1'b1))) begin
            stream_out_V_keep_V_1_sel_wr <= ~stream_out_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_keep_V_1_vld_in == 1'b0) & (stream_out_V_keep_V_1_state == 2'd2)) | ((stream_out_V_keep_V_1_vld_in == 1'b0) & (stream_out_V_keep_V_1_ack_out == 1'b1) & (stream_out_V_keep_V_1_state == 2'd3)))) begin
            stream_out_V_keep_V_1_state <= 2'd2;
        end else if ((((stream_out_V_keep_V_1_ack_out == 1'b0) & (stream_out_V_keep_V_1_state == 2'd1)) | ((stream_out_V_keep_V_1_ack_out == 1'b0) & (stream_out_V_keep_V_1_vld_in == 1'b1) & (stream_out_V_keep_V_1_state == 2'd3)))) begin
            stream_out_V_keep_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_keep_V_1_vld_in == 1'b0) & (stream_out_V_keep_V_1_ack_out == 1'b1)) & ~((stream_out_V_keep_V_1_ack_out == 1'b0) & (stream_out_V_keep_V_1_vld_in == 1'b1)) & (stream_out_V_keep_V_1_state == 2'd3)) | ((stream_out_V_keep_V_1_ack_out == 1'b1) & (stream_out_V_keep_V_1_state == 2'd1)) | ((stream_out_V_keep_V_1_vld_in == 1'b1) & (stream_out_V_keep_V_1_state == 2'd2)))) begin
            stream_out_V_keep_V_1_state <= 2'd3;
        end else begin
            stream_out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_last_V_1_ack_out == 1'b1) & (stream_out_V_last_V_1_vld_out == 1'b1))) begin
            stream_out_V_last_V_1_sel_rd <= ~stream_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_last_V_1_ack_in == 1'b1) & (stream_out_V_last_V_1_vld_in == 1'b1))) begin
            stream_out_V_last_V_1_sel_wr <= ~stream_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_last_V_1_vld_in == 1'b0) & (stream_out_V_last_V_1_state == 2'd2)) | ((stream_out_V_last_V_1_vld_in == 1'b0) & (stream_out_V_last_V_1_ack_out == 1'b1) & (stream_out_V_last_V_1_state == 2'd3)))) begin
            stream_out_V_last_V_1_state <= 2'd2;
        end else if ((((stream_out_V_last_V_1_ack_out == 1'b0) & (stream_out_V_last_V_1_state == 2'd1)) | ((stream_out_V_last_V_1_ack_out == 1'b0) & (stream_out_V_last_V_1_vld_in == 1'b1) & (stream_out_V_last_V_1_state == 2'd3)))) begin
            stream_out_V_last_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_last_V_1_vld_in == 1'b0) & (stream_out_V_last_V_1_ack_out == 1'b1)) & ~((stream_out_V_last_V_1_ack_out == 1'b0) & (stream_out_V_last_V_1_vld_in == 1'b1)) & (stream_out_V_last_V_1_state == 2'd3)) | ((stream_out_V_last_V_1_ack_out == 1'b1) & (stream_out_V_last_V_1_state == 2'd1)) | ((stream_out_V_last_V_1_vld_in == 1'b1) & (stream_out_V_last_V_1_state == 2'd2)))) begin
            stream_out_V_last_V_1_state <= 2'd3;
        end else begin
            stream_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_strb_V_1_ack_out == 1'b1) & (stream_out_V_strb_V_1_vld_out == 1'b1))) begin
            stream_out_V_strb_V_1_sel_rd <= ~stream_out_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_strb_V_1_ack_in == 1'b1) & (stream_out_V_strb_V_1_vld_in == 1'b1))) begin
            stream_out_V_strb_V_1_sel_wr <= ~stream_out_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_strb_V_1_vld_in == 1'b0) & (stream_out_V_strb_V_1_state == 2'd2)) | ((stream_out_V_strb_V_1_vld_in == 1'b0) & (stream_out_V_strb_V_1_ack_out == 1'b1) & (stream_out_V_strb_V_1_state == 2'd3)))) begin
            stream_out_V_strb_V_1_state <= 2'd2;
        end else if ((((stream_out_V_strb_V_1_ack_out == 1'b0) & (stream_out_V_strb_V_1_state == 2'd1)) | ((stream_out_V_strb_V_1_ack_out == 1'b0) & (stream_out_V_strb_V_1_vld_in == 1'b1) & (stream_out_V_strb_V_1_state == 2'd3)))) begin
            stream_out_V_strb_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_strb_V_1_vld_in == 1'b0) & (stream_out_V_strb_V_1_ack_out == 1'b1)) & ~((stream_out_V_strb_V_1_ack_out == 1'b0) & (stream_out_V_strb_V_1_vld_in == 1'b1)) & (stream_out_V_strb_V_1_state == 2'd3)) | ((stream_out_V_strb_V_1_ack_out == 1'b1) & (stream_out_V_strb_V_1_state == 2'd1)) | ((stream_out_V_strb_V_1_vld_in == 1'b1) & (stream_out_V_strb_V_1_state == 2'd2)))) begin
            stream_out_V_strb_V_1_state <= 2'd3;
        end else begin
            stream_out_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_user_V_1_ack_out == 1'b1) & (stream_out_V_user_V_1_vld_out == 1'b1))) begin
            stream_out_V_user_V_1_sel_rd <= ~stream_out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_user_V_1_ack_in == 1'b1) & (stream_out_V_user_V_1_vld_in == 1'b1))) begin
            stream_out_V_user_V_1_sel_wr <= ~stream_out_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_user_V_1_vld_in == 1'b0) & (stream_out_V_user_V_1_state == 2'd2)) | ((stream_out_V_user_V_1_vld_in == 1'b0) & (stream_out_V_user_V_1_ack_out == 1'b1) & (stream_out_V_user_V_1_state == 2'd3)))) begin
            stream_out_V_user_V_1_state <= 2'd2;
        end else if ((((stream_out_V_user_V_1_ack_out == 1'b0) & (stream_out_V_user_V_1_state == 2'd1)) | ((stream_out_V_user_V_1_ack_out == 1'b0) & (stream_out_V_user_V_1_vld_in == 1'b1) & (stream_out_V_user_V_1_state == 2'd3)))) begin
            stream_out_V_user_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_user_V_1_vld_in == 1'b0) & (stream_out_V_user_V_1_ack_out == 1'b1)) & ~((stream_out_V_user_V_1_ack_out == 1'b0) & (stream_out_V_user_V_1_vld_in == 1'b1)) & (stream_out_V_user_V_1_state == 2'd3)) | ((stream_out_V_user_V_1_ack_out == 1'b1) & (stream_out_V_user_V_1_state == 2'd1)) | ((stream_out_V_user_V_1_vld_in == 1'b1) & (stream_out_V_user_V_1_state == 2'd2)))) begin
            stream_out_V_user_V_1_state <= 2'd3;
        end else begin
            stream_out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        batch_load_reg_323 <= 31'd0;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        batch_load_reg_323 <= tmp_42_reg_1045;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (tmp_s_reg_1152 == 1'd1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        channel_last_V <= tmp_last_V_1_reg_1166;
    end else if (((1'b1 == ap_CS_fsm_state43) & (tmp_5_reg_955 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
        channel_last_V <= stream_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_11_reg_985 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_load_1_reg_298 <= tmp_20_reg_989;
    end else if (((1'b1 == ap_CS_fsm_state43) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
        i_load_1_reg_298 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_22_reg_1050 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_load_2_reg_346 <= tmp_29_reg_1054;
    end else if (((1'b1 == ap_CS_fsm_state63) & (tmp_18_fu_745_p2 == 1'd1))) begin
        i_load_2_reg_346 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state63) & (tmp_18_fu_745_p2 == 1'd0))) begin
        i_load_3_reg_368 <= 31'd0;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (tmp_24_fu_847_p2 == 1'd1) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i_load_3_reg_368 <= tmp_32_fu_852_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (tmp_4_fu_507_p2 == 1'd0))) begin
        i_load_reg_379 <= 31'd0;
    end else if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (tmp_s_fu_883_p2 == 1'd1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        i_load_reg_379 <= tmp_10_fu_888_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage9) & (ap_reg_pp1_iter1_tmp_22_reg_1050 == 1'd1) & (1'b0 == ap_block_pp1_stage9_11001))) begin
        sum_load_1_reg_334 <= grp_fu_390_p2;
    end else if (((1'b1 == ap_CS_fsm_state63) & (tmp_18_fu_745_p2 == 1'd1))) begin
        sum_load_1_reg_334 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_11_reg_985 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_load_reg_286 <= ap_phi_mux_sum_load2_phi_fu_315_p4;
    end else if (((1'b1 == ap_CS_fsm_state43) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
        sum_load_reg_286 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_36_fu_826_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        tmp_35_reg_357 <= tmp_41_fu_831_p2;
    end else if ((1'b1 == ap_CS_fsm_state117)) begin
        tmp_35_reg_357 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state151)) begin
        tmp_3_reg_275 <= tmp_33_fu_873_p2;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        tmp_3_reg_275 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_11_reg_985 == 1'd1) & (tmp_51_fu_682_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_phi_reg_pp0_iter0_sum_load2_reg_311 <= sum_load_reg_286;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001))) begin
        ap_phi_reg_pp0_iter1_sum_load2_reg_311 <= ap_phi_reg_pp0_iter0_sum_load2_reg_311;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_reg_pp0_iter1_i_load_1_reg_298 <= i_load_1_reg_298;
        ap_reg_pp0_iter1_tmp_11_reg_985 <= tmp_11_reg_985;
        i_load_1_cast_reg_980[30 : 0] <= i_load_1_cast_fu_597_p1[30 : 0];
        tmp_11_reg_985 <= tmp_11_fu_601_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_reg_pp0_iter1_tmp_17_reg_1018 <= tmp_17_reg_1018;
        ap_reg_pp0_iter1_tmp_51_reg_1014 <= tmp_51_reg_1014;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        ap_reg_pp1_iter1_tmp_22_reg_1050 <= tmp_22_reg_1050;
        tmp_22_reg_1050 <= tmp_22_fu_760_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        ap_reg_pp2_iter10_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter9_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter10_tmp_36_reg_1093 <= ap_reg_pp2_iter9_tmp_36_reg_1093;
        ap_reg_pp2_iter11_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter10_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter11_tmp_36_reg_1093 <= ap_reg_pp2_iter10_tmp_36_reg_1093;
        ap_reg_pp2_iter12_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter11_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter12_tmp_36_reg_1093 <= ap_reg_pp2_iter11_tmp_36_reg_1093;
        ap_reg_pp2_iter13_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter12_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter13_tmp_36_reg_1093 <= ap_reg_pp2_iter12_tmp_36_reg_1093;
        ap_reg_pp2_iter14_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter13_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter14_tmp_36_reg_1093 <= ap_reg_pp2_iter13_tmp_36_reg_1093;
        ap_reg_pp2_iter15_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter14_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter15_tmp_36_reg_1093 <= ap_reg_pp2_iter14_tmp_36_reg_1093;
        ap_reg_pp2_iter16_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter15_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter16_tmp_36_reg_1093 <= ap_reg_pp2_iter15_tmp_36_reg_1093;
        ap_reg_pp2_iter17_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter16_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter17_tmp_36_reg_1093 <= ap_reg_pp2_iter16_tmp_36_reg_1093;
        ap_reg_pp2_iter18_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter17_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter18_tmp_36_reg_1093 <= ap_reg_pp2_iter17_tmp_36_reg_1093;
        ap_reg_pp2_iter19_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter18_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter19_tmp_36_reg_1093 <= ap_reg_pp2_iter18_tmp_36_reg_1093;
        ap_reg_pp2_iter20_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter19_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter20_tmp_36_reg_1093 <= ap_reg_pp2_iter19_tmp_36_reg_1093;
        ap_reg_pp2_iter21_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter20_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter21_tmp_36_reg_1093 <= ap_reg_pp2_iter20_tmp_36_reg_1093;
        ap_reg_pp2_iter22_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter21_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter22_tmp_36_reg_1093 <= ap_reg_pp2_iter21_tmp_36_reg_1093;
        ap_reg_pp2_iter23_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter22_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter23_tmp_36_reg_1093 <= ap_reg_pp2_iter22_tmp_36_reg_1093;
        ap_reg_pp2_iter24_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter23_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter24_tmp_36_reg_1093 <= ap_reg_pp2_iter23_tmp_36_reg_1093;
        ap_reg_pp2_iter25_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter24_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter25_tmp_36_reg_1093 <= ap_reg_pp2_iter24_tmp_36_reg_1093;
        ap_reg_pp2_iter26_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter25_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter26_tmp_36_reg_1093 <= ap_reg_pp2_iter25_tmp_36_reg_1093;
        ap_reg_pp2_iter27_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter26_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter27_tmp_36_reg_1093 <= ap_reg_pp2_iter26_tmp_36_reg_1093;
        ap_reg_pp2_iter2_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter1_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter2_tmp_36_reg_1093 <= ap_reg_pp2_iter1_tmp_36_reg_1093;
        ap_reg_pp2_iter3_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter2_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter3_tmp_36_reg_1093 <= ap_reg_pp2_iter2_tmp_36_reg_1093;
        ap_reg_pp2_iter4_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter3_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter4_tmp_36_reg_1093 <= ap_reg_pp2_iter3_tmp_36_reg_1093;
        ap_reg_pp2_iter5_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter4_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter5_tmp_36_reg_1093 <= ap_reg_pp2_iter4_tmp_36_reg_1093;
        ap_reg_pp2_iter6_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter5_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter6_tmp_36_reg_1093 <= ap_reg_pp2_iter5_tmp_36_reg_1093;
        ap_reg_pp2_iter7_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter6_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter7_tmp_36_reg_1093 <= ap_reg_pp2_iter6_tmp_36_reg_1093;
        ap_reg_pp2_iter8_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter7_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter8_tmp_36_reg_1093 <= ap_reg_pp2_iter7_tmp_36_reg_1093;
        ap_reg_pp2_iter9_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter8_state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter9_tmp_36_reg_1093 <= ap_reg_pp2_iter8_tmp_36_reg_1093;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        ap_reg_pp2_iter1_state_vector_addr_3_reg_1102 <= state_vector_addr_3_reg_1102;
        ap_reg_pp2_iter1_tmp_36_reg_1093 <= tmp_36_reg_1093;
        tmp_36_reg_1093 <= tmp_36_fu_826_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        ap_reg_pp3_iter1_tmp_24_reg_1123 <= tmp_24_reg_1123;
        tmp_24_reg_1123 <= tmp_24_fu_847_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        ap_reg_pp4_iter1_tmp_s_reg_1152 <= tmp_s_reg_1152;
        tmp_s_reg_1152 <= tmp_s_fu_883_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & (tmp_5_reg_955 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
        channel_dest_V <= stream_in_V_dest_V_0_data_out;
        channel_id_V <= stream_in_V_id_V_0_data_out;
        channel_keep_V <= stream_in_V_keep_V_0_data_out;
        channel_strb_V <= stream_in_V_strb_V_0_data_out;
        channel_user_V <= stream_in_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        epsilon_read_reg_914 <= epsilon;
        kernelSize_read_reg_929 <= kernelSize;
        layerSize_read_reg_934 <= layerSize;
        vectorSize_read_reg_920 <= vectorSize;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        ip_index <= tmp_3_reg_275;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_reg_pp0_iter1_tmp_11_reg_985 == 1'd1) & (tmp_51_reg_1014 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        notlhs1_reg_1023 <= notlhs1_fu_710_p2;
        notrhs2_reg_1028 <= notrhs2_fu_716_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_11_reg_985 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        notlhs5_reg_999 <= notlhs5_fu_645_p2;
        notrhs6_reg_1004 <= notrhs6_fu_651_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_11_fu_601_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        notlhs7_reg_994 <= notlhs7_fu_621_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
        notrhs8_reg_975 <= notrhs8_fu_591_p2;
        tmp_7_reg_969 <= tmp_7_fu_583_p1;
        tmp_data_V_reg_964 <= stream_in_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_enable_reg_pp2_iter19 == 1'b1) & (ap_reg_pp2_iter18_tmp_36_reg_1093 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_51_reg_1014 == 1'd1) & (tmp_11_reg_985 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_452 <= grp_fu_390_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp2_iter9 == 1'b1) & (ap_reg_pp2_iter8_tmp_36_reg_1093 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_22_reg_1050 == 1'd1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        reg_459 <= state_vector_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp2_iter9 == 1'b1) & (ap_reg_pp2_iter8_tmp_36_reg_1093 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage9) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_22_reg_1050 == 1'd1) & (1'b0 == ap_block_pp1_stage9_11001)))) begin
        reg_465 <= grp_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        reverse_epsilon_reg_941 <= grp_fu_406_p2;
        tmp_2_reg_946 <= tmp_2_fu_496_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_36_fu_826_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        state_vector_addr_3_reg_1102 <= tmp_37_fu_837_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_data_V_0_load_A == 1'b1)) begin
        stream_in_V_data_V_0_payload_A <= stream_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_data_V_0_load_B == 1'b1)) begin
        stream_in_V_data_V_0_payload_B <= stream_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_dest_V_0_load_A == 1'b1)) begin
        stream_in_V_dest_V_0_payload_A <= stream_in_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_dest_V_0_load_B == 1'b1)) begin
        stream_in_V_dest_V_0_payload_B <= stream_in_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_id_V_0_load_A == 1'b1)) begin
        stream_in_V_id_V_0_payload_A <= stream_in_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_id_V_0_load_B == 1'b1)) begin
        stream_in_V_id_V_0_payload_B <= stream_in_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_keep_V_0_load_A == 1'b1)) begin
        stream_in_V_keep_V_0_payload_A <= stream_in_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_keep_V_0_load_B == 1'b1)) begin
        stream_in_V_keep_V_0_payload_B <= stream_in_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_last_V_0_load_A == 1'b1)) begin
        stream_in_V_last_V_0_payload_A <= stream_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_last_V_0_load_B == 1'b1)) begin
        stream_in_V_last_V_0_payload_B <= stream_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_strb_V_0_load_A == 1'b1)) begin
        stream_in_V_strb_V_0_payload_A <= stream_in_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_strb_V_0_load_B == 1'b1)) begin
        stream_in_V_strb_V_0_payload_B <= stream_in_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_user_V_0_load_A == 1'b1)) begin
        stream_in_V_user_V_0_payload_A <= stream_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_user_V_0_load_B == 1'b1)) begin
        stream_in_V_user_V_0_payload_B <= stream_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_data_V_1_load_A == 1'b1)) begin
        stream_out_V_data_V_1_payload_A <= stream_out_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_data_V_1_load_B == 1'b1)) begin
        stream_out_V_data_V_1_payload_B <= stream_out_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_dest_V_1_load_A == 1'b1)) begin
        stream_out_V_dest_V_1_payload_A <= channel_dest_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_dest_V_1_load_B == 1'b1)) begin
        stream_out_V_dest_V_1_payload_B <= channel_dest_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_id_V_1_load_A == 1'b1)) begin
        stream_out_V_id_V_1_payload_A <= channel_id_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_id_V_1_load_B == 1'b1)) begin
        stream_out_V_id_V_1_payload_B <= channel_id_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_keep_V_1_load_A == 1'b1)) begin
        stream_out_V_keep_V_1_payload_A <= channel_keep_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_keep_V_1_load_B == 1'b1)) begin
        stream_out_V_keep_V_1_payload_B <= channel_keep_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_last_V_1_load_A == 1'b1)) begin
        stream_out_V_last_V_1_payload_A <= stream_out_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_last_V_1_load_B == 1'b1)) begin
        stream_out_V_last_V_1_payload_B <= stream_out_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_strb_V_1_load_A == 1'b1)) begin
        stream_out_V_strb_V_1_payload_A <= channel_strb_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_strb_V_1_load_B == 1'b1)) begin
        stream_out_V_strb_V_1_payload_B <= channel_strb_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_user_V_1_load_A == 1'b1)) begin
        stream_out_V_user_V_1_payload_A <= channel_user_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_user_V_1_load_B == 1'b1)) begin
        stream_out_V_user_V_1_payload_B <= channel_user_V;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (tmp_36_reg_1093 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        temp_data_load_reg_1113 <= temp_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_51_fu_682_p2 == 1'd1) & (tmp_11_reg_985 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_17_reg_1018 <= tmp_17_fu_688_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_20_reg_989 <= tmp_20_fu_606_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_22_fu_760_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_25_reg_1059[30 : 0] <= tmp_25_fu_771_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_29_reg_1054 <= tmp_29_fu_765_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        tmp_34_reg_1088 <= grp_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp2_iter26_tmp_36_reg_1093 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        tmp_40_reg_1118 <= grp_fu_402_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        tmp_42_reg_1045 <= tmp_42_fu_750_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_11_reg_985 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_51_reg_1014 <= tmp_51_fu_682_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_reg_pp0_iter1_tmp_51_reg_1014 == 1'd1) & (ap_reg_pp0_iter1_tmp_11_reg_985 == 1'd1) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        tmp_55_reg_1033 <= grp_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (tmp_4_fu_507_p2 == 1'd1))) begin
        tmp_5_reg_955 <= tmp_5_fu_512_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        tmp_60_reg_1079 <= grp_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state42) & (tmp_4_fu_507_p2 == 1'd0))) begin
        tmp_6_reg_959 <= tmp_6_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (tmp_s_fu_883_p2 == 1'd1) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        tmp_last_V_1_reg_1166 <= tmp_last_V_1_fu_899_p2;
    end
end

always @ (*) begin
    if ((tmp_11_fu_601_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state44 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state44 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_22_fu_760_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state64 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state64 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_36_fu_826_p2 == 1'd0)) begin
        ap_condition_pp2_exit_iter0_state118 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state118 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_24_fu_847_p2 == 1'd0)) begin
        ap_condition_pp3_exit_iter0_state148 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state148 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_s_fu_883_p2 == 1'd0)) begin
        ap_condition_pp4_exit_iter0_state152 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state152 = 1'b0;
    end
end

always @ (*) begin
    if ((~((stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_id_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_user_V_1_ack_in == 1'b0) | (stream_out_V_strb_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state155))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter28 == 1'b0) & (ap_enable_reg_pp2_iter27 == 1'b0) & (ap_enable_reg_pp2_iter26 == 1'b0) & (ap_enable_reg_pp2_iter25 == 1'b0) & (ap_enable_reg_pp2_iter24 == 1'b0) & (ap_enable_reg_pp2_iter23 == 1'b0) & (ap_enable_reg_pp2_iter22 == 1'b0) & (ap_enable_reg_pp2_iter21 == 1'b0) & (ap_enable_reg_pp2_iter20 == 1'b0) & (ap_enable_reg_pp2_iter18 == 1'b0) & (ap_enable_reg_pp2_iter17 == 1'b0) & (ap_enable_reg_pp2_iter16 == 1'b0) & (ap_enable_reg_pp2_iter15 == 1'b0) & (ap_enable_reg_pp2_iter14 == 1'b0) & (ap_enable_reg_pp2_iter13 == 1'b0) & (ap_enable_reg_pp2_iter12 == 1'b0) & (ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter19 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (tmp_11_reg_985 == 1'd1))) begin
        ap_phi_mux_i_load_1_phi_fu_303_p4 = tmp_20_reg_989;
    end else begin
        ap_phi_mux_i_load_1_phi_fu_303_p4 = i_load_1_reg_298;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0) & (tmp_22_reg_1050 == 1'd1))) begin
        ap_phi_mux_i_load_2_phi_fu_350_p4 = tmp_29_reg_1054;
    end else begin
        ap_phi_mux_i_load_2_phi_fu_350_p4 = i_load_2_reg_346;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (tmp_51_reg_1014 == 1'd1) & (tmp_11_reg_985 == 1'd1))) begin
        ap_phi_mux_sum_load2_phi_fu_315_p4 = grp_fu_390_p2;
    end else begin
        ap_phi_mux_sum_load2_phi_fu_315_p4 = ap_phi_reg_pp0_iter1_sum_load2_reg_311;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (tmp_11_reg_985 == 1'd1))) begin
        ap_phi_mux_sum_load_phi_fu_290_p4 = ap_phi_mux_sum_load2_phi_fu_315_p4;
    end else begin
        ap_phi_mux_sum_load_phi_fu_290_p4 = sum_load_reg_286;
    end
end

always @ (*) begin
    if ((~((stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_id_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_user_V_1_ack_in == 1'b0) | (stream_out_V_strb_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state155))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b0 == ap_block_pp1_stage8_11001) & (1'b1 == ap_CS_fsm_pp1_stage8)) | ((1'b0 == ap_block_pp1_stage7_11001) & (1'b1 == ap_CS_fsm_pp1_stage7)) | ((1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6)) | ((1'b0 == ap_block_pp1_stage5_11001) & (1'b1 == ap_CS_fsm_pp1_stage5)) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage9) & (1'b0 == ap_block_pp1_stage9_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001)))) begin
        grp_fu_390_ce = 1'b1;
    end else begin
        grp_fu_390_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter10 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        grp_fu_390_p0 = reg_459;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        grp_fu_390_p0 = sum_load_1_reg_334;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_390_p0 = sum_load_reg_286;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_390_p0 = epsilon_read_reg_914;
    end else begin
        grp_fu_390_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter10 == 1'b1) & (1'b0 == ap_block_pp2_stage0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0)))) begin
        grp_fu_390_p1 = reg_465;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_390_p1 = tmp_12_fu_657_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_390_p1 = 32'd1065353216;
    end else begin
        grp_fu_390_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage8_11001) & (1'b1 == ap_CS_fsm_pp1_stage8)) | ((1'b0 == ap_block_pp1_stage7_11001) & (1'b1 == ap_CS_fsm_pp1_stage7)) | ((1'b0 == ap_block_pp1_stage6_11001) & (1'b1 == ap_CS_fsm_pp1_stage6)) | ((1'b0 == ap_block_pp1_stage5_11001) & (1'b1 == ap_CS_fsm_pp1_stage5)) | ((1'b0 == ap_block_pp1_stage4_11001) & (1'b1 == ap_CS_fsm_pp1_stage4)) | ((1'b0 == ap_block_pp1_stage3_11001) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((1'b1 == ap_CS_fsm_pp1_stage9) & (1'b0 == ap_block_pp1_stage9_11001)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2_11001)))) begin
        grp_fu_398_ce = 1'b1;
    end else begin
        grp_fu_398_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        grp_fu_398_p0 = temp_data_load_reg_1113;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2))) begin
        grp_fu_398_p0 = reg_459;
    end else begin
        grp_fu_398_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        grp_fu_398_p1 = tmp_34_reg_1088;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (1'b0 == ap_block_pp1_stage2))) begin
        grp_fu_398_p1 = tmp_26_fu_776_p1;
    end else begin
        grp_fu_398_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        grp_fu_406_p0 = epsilon_read_reg_914;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_406_p0 = 32'd1065353216;
    end else begin
        grp_fu_406_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        grp_fu_406_p1 = sum_load_1_reg_334;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_406_p1 = reg_452;
    end else begin
        grp_fu_406_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state87) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        grp_fu_412_ce = 1'b1;
    end else begin
        grp_fu_412_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        grp_fu_412_opcode = 5'd2;
    end else if (((1'b0 == ap_block_pp0_stage1_00001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op309_fcmp_state57 == 1'b1))) begin
        grp_fu_412_opcode = 5'd5;
    end else if (((1'b0 == ap_block_pp0_stage0_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_11_fu_601_p2 == 1'd1))) begin
        grp_fu_412_opcode = 5'd4;
    end else begin
        grp_fu_412_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        grp_fu_412_p0 = sum_load_1_reg_334;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_412_p0 = tmp_7_reg_969;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_412_p0 = ap_phi_mux_sum_load_phi_fu_290_p4;
    end else begin
        grp_fu_412_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        grp_fu_412_p1 = 32'd507307272;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_412_p1 = reg_452;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_412_p1 = tmp_7_reg_969;
    end else begin
        grp_fu_412_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        spike_matrix_address0 = tmp_8_fu_894_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5))) begin
        spike_matrix_address0 = tmp_19_fu_736_p1;
    end else begin
        spike_matrix_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)))) begin
        spike_matrix_ce0 = 1'b1;
    end else begin
        spike_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (or_cond_fu_731_p2 == 1'd1) & (ap_reg_pp0_iter1_tmp_51_reg_1014 == 1'd1))) begin
        spike_matrix_we0 = 1'b1;
    end else begin
        spike_matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter8 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        state_vector_address0 = ap_reg_pp2_iter7_state_vector_addr_3_reg_1102;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        state_vector_address0 = tmp_25_fu_771_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        state_vector_address0 = tmp_13_fu_663_p1;
    end else begin
        state_vector_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        state_vector_address1 = tmp_31_fu_858_p1;
    end else if (((ap_enable_reg_pp2_iter28 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        state_vector_address1 = ap_reg_pp2_iter27_state_vector_addr_3_reg_1102;
    end else begin
        state_vector_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp2_iter8 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        state_vector_ce0 = 1'b1;
    end else begin
        state_vector_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter28 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        state_vector_ce1 = 1'b1;
    end else begin
        state_vector_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_11_reg_985 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        state_vector_we0 = 1'b1;
    end else begin
        state_vector_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter28 == 1'b1) & (ap_reg_pp2_iter27_tmp_36_reg_1093 == 1'd1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        state_vector_we1 = 1'b1;
    end else begin
        state_vector_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_11_reg_985 == 1'd1) & (1'b0 == ap_block_pp0_stage3)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (tmp_22_reg_1050 == 1'd1) & (1'b0 == ap_block_pp1_stage2)))) begin
        stream_in_TDATA_blk_n = stream_in_V_data_V_0_state[1'd0];
    end else begin
        stream_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_11_reg_985 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_state43) & (stream_in_V_data_V_0_vld_out == 1'b1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (tmp_22_reg_1050 == 1'd1) & (1'b0 == ap_block_pp1_stage2_11001)))) begin
        stream_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_data_V_0_sel == 1'b1)) begin
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_B;
    end else begin
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_11_reg_985 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_state43) & (stream_in_V_data_V_0_vld_out == 1'b1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (tmp_22_reg_1050 == 1'd1) & (1'b0 == ap_block_pp1_stage2_11001)))) begin
        stream_in_V_dest_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_dest_V_0_sel == 1'b1)) begin
        stream_in_V_dest_V_0_data_out = stream_in_V_dest_V_0_payload_B;
    end else begin
        stream_in_V_dest_V_0_data_out = stream_in_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_11_reg_985 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_state43) & (stream_in_V_data_V_0_vld_out == 1'b1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (tmp_22_reg_1050 == 1'd1) & (1'b0 == ap_block_pp1_stage2_11001)))) begin
        stream_in_V_id_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_id_V_0_sel == 1'b1)) begin
        stream_in_V_id_V_0_data_out = stream_in_V_id_V_0_payload_B;
    end else begin
        stream_in_V_id_V_0_data_out = stream_in_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_11_reg_985 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_state43) & (stream_in_V_data_V_0_vld_out == 1'b1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (tmp_22_reg_1050 == 1'd1) & (1'b0 == ap_block_pp1_stage2_11001)))) begin
        stream_in_V_keep_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_keep_V_0_sel == 1'b1)) begin
        stream_in_V_keep_V_0_data_out = stream_in_V_keep_V_0_payload_B;
    end else begin
        stream_in_V_keep_V_0_data_out = stream_in_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_11_reg_985 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_state43) & (stream_in_V_data_V_0_vld_out == 1'b1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (tmp_22_reg_1050 == 1'd1) & (1'b0 == ap_block_pp1_stage2_11001)))) begin
        stream_in_V_last_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_last_V_0_sel == 1'b1)) begin
        stream_in_V_last_V_0_data_out = stream_in_V_last_V_0_payload_B;
    end else begin
        stream_in_V_last_V_0_data_out = stream_in_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_11_reg_985 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_state43) & (stream_in_V_data_V_0_vld_out == 1'b1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (tmp_22_reg_1050 == 1'd1) & (1'b0 == ap_block_pp1_stage2_11001)))) begin
        stream_in_V_strb_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_strb_V_0_sel == 1'b1)) begin
        stream_in_V_strb_V_0_data_out = stream_in_V_strb_V_0_payload_B;
    end else begin
        stream_in_V_strb_V_0_data_out = stream_in_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_11_reg_985 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_state43) & (stream_in_V_data_V_0_vld_out == 1'b1)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2) & (tmp_22_reg_1050 == 1'd1) & (1'b0 == ap_block_pp1_stage2_11001)))) begin
        stream_in_V_user_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_user_V_0_sel == 1'b1)) begin
        stream_in_V_user_V_0_data_out = stream_in_V_user_V_0_payload_B;
    end else begin
        stream_in_V_user_V_0_data_out = stream_in_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter2 == 1'b1) & (ap_reg_pp4_iter1_tmp_s_reg_1152 == 1'd1) & (1'b0 == ap_block_pp4_stage0)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (tmp_s_reg_1152 == 1'd1) & (1'b0 == ap_block_pp4_stage0)) | ((ap_enable_reg_pp3_iter2 == 1'b1) & (ap_reg_pp3_iter1_tmp_24_reg_1123 == 1'd1) & (1'b0 == ap_block_pp3_stage0)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (tmp_24_reg_1123 == 1'd1) & (1'b0 == ap_block_pp3_stage0)))) begin
        stream_out_TDATA_blk_n = stream_out_V_data_V_1_state[1'd1];
    end else begin
        stream_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_01001) & (tmp_s_reg_1152 == 1'd1))) begin
        stream_out_V_data_V_1_data_in = tmp_data_V_1_fu_904_p1;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_01001) & (tmp_24_reg_1123 == 1'd1))) begin
        stream_out_V_data_V_1_data_in = tmp_data_V_4_fu_863_p1;
    end else begin
        stream_out_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_V_data_V_1_sel == 1'b1)) begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_B;
    end else begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (tmp_s_reg_1152 == 1'd1) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (tmp_24_reg_1123 == 1'd1) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        stream_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_dest_V_1_sel == 1'b1)) begin
        stream_out_V_dest_V_1_data_out = stream_out_V_dest_V_1_payload_B;
    end else begin
        stream_out_V_dest_V_1_data_out = stream_out_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (tmp_s_reg_1152 == 1'd1) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (tmp_24_reg_1123 == 1'd1) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        stream_out_V_dest_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_id_V_1_sel == 1'b1)) begin
        stream_out_V_id_V_1_data_out = stream_out_V_id_V_1_payload_B;
    end else begin
        stream_out_V_id_V_1_data_out = stream_out_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (tmp_s_reg_1152 == 1'd1) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (tmp_24_reg_1123 == 1'd1) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        stream_out_V_id_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_keep_V_1_sel == 1'b1)) begin
        stream_out_V_keep_V_1_data_out = stream_out_V_keep_V_1_payload_B;
    end else begin
        stream_out_V_keep_V_1_data_out = stream_out_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (tmp_s_reg_1152 == 1'd1) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (tmp_24_reg_1123 == 1'd1) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        stream_out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_01001) & (tmp_s_reg_1152 == 1'd1))) begin
        stream_out_V_last_V_1_data_in = tmp_last_V_1_reg_1166;
    end else if (((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_01001) & (tmp_24_reg_1123 == 1'd1))) begin
        stream_out_V_last_V_1_data_in = channel_last_V;
    end else begin
        stream_out_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_V_last_V_1_sel == 1'b1)) begin
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_B;
    end else begin
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (tmp_s_reg_1152 == 1'd1) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (tmp_24_reg_1123 == 1'd1) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        stream_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_strb_V_1_sel == 1'b1)) begin
        stream_out_V_strb_V_1_data_out = stream_out_V_strb_V_1_payload_B;
    end else begin
        stream_out_V_strb_V_1_data_out = stream_out_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (tmp_s_reg_1152 == 1'd1) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (tmp_24_reg_1123 == 1'd1) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        stream_out_V_strb_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_user_V_1_sel == 1'b1)) begin
        stream_out_V_user_V_1_data_out = stream_out_V_user_V_1_payload_B;
    end else begin
        stream_out_V_user_V_1_data_out = stream_out_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (tmp_s_reg_1152 == 1'd1) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (tmp_24_reg_1123 == 1'd1) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        stream_out_V_user_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0))) begin
        temp_data_address0 = tmp_37_fu_837_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        temp_data_address0 = tmp_25_reg_1059;
    end else begin
        temp_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        temp_data_ce0 = 1'b1;
    end else begin
        temp_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_22_reg_1050 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        temp_data_we0 = 1'b1;
    end else begin
        temp_data_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == ap_CS_fsm_state42) & (tmp_4_fu_507_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_11_fu_601_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (tmp_11_fu_601_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_subdone)) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            if (((1'b1 == ap_CS_fsm_state63) & (tmp_18_fu_745_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (tmp_22_fu_760_p2 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (tmp_22_fu_760_p2 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_pp1_stage4 : begin
            if ((1'b0 == ap_block_pp1_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage4;
            end
        end
        ap_ST_fsm_pp1_stage5 : begin
            if ((1'b0 == ap_block_pp1_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage5;
            end
        end
        ap_ST_fsm_pp1_stage6 : begin
            if ((1'b0 == ap_block_pp1_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage6;
            end
        end
        ap_ST_fsm_pp1_stage7 : begin
            if ((1'b0 == ap_block_pp1_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage7;
            end
        end
        ap_ST_fsm_pp1_stage8 : begin
            if ((1'b0 == ap_block_pp1_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage8;
            end
        end
        ap_ST_fsm_pp1_stage9 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage9) & (1'b0 == ap_block_pp1_stage9_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0)) & (1'b0 == ap_block_pp1_stage9_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage9) & (1'b0 == ap_block_pp1_stage9_subdone) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage9;
            end
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            if (((1'b1 == ap_CS_fsm_state88) & (tmp_61_fu_817_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state147;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (tmp_36_fu_826_p2 == 1'd0)) & ~((ap_enable_reg_pp2_iter28 == 1'b1) & (ap_enable_reg_pp2_iter27 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter28 == 1'b1) & (ap_enable_reg_pp2_iter27 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0) & (tmp_36_fu_826_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state147;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (tmp_24_fu_847_p2 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b0)) & ~((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (tmp_24_fu_847_p2 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b0)) | ((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state151;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (tmp_s_fu_883_p2 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b0)) & ~((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (tmp_s_fu_883_p2 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b0)) | ((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state155;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state155 : begin
            if ((~((stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_id_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_user_V_1_ack_in == 1'b0) | (stream_out_V_strb_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state155))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state155;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_pp1_stage4 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_pp1_stage5 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_pp1_stage6 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_pp1_stage7 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_pp1_stage8 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_pp1_stage9 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state147 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state151 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state155 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((stream_in_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_11_reg_985 == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((stream_in_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_11_reg_985 == 1'd1));
end

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage2_11001 = ((stream_in_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_22_reg_1050 == 1'd1));
end

always @ (*) begin
    ap_block_pp1_stage2_subdone = ((stream_in_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (tmp_22_reg_1050 == 1'd1));
end

assign ap_block_pp1_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_block_state150_io)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_block_state149_io)));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_block_state150_io)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_block_state149_io)));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = (((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_block_state154_io)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_block_state153_io)));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = (((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_block_state154_io)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_block_state153_io)));
end

assign ap_block_state118_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state119_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state120_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state121_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state122_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state123_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state124_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state125_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state126_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state127_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state128_pp2_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state129_pp2_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state130_pp2_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state131_pp2_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state132_pp2_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state133_pp2_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state134_pp2_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state135_pp2_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state136_pp2_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state137_pp2_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state138_pp2_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state139_pp2_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state140_pp2_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state141_pp2_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state142_pp2_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state143_pp2_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state144_pp2_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state145_pp2_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state146_pp2_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state148_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state149_io = ((stream_out_V_data_V_1_ack_in == 1'b0) & (tmp_24_reg_1123 == 1'd1));
end

assign ap_block_state149_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state150_io = ((stream_out_V_data_V_1_ack_in == 1'b0) & (ap_reg_pp3_iter1_tmp_24_reg_1123 == 1'd1));
end

assign ap_block_state150_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state152_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state153_io = ((stream_out_V_data_V_1_ack_in == 1'b0) & (tmp_s_reg_1152 == 1'd1));
end

assign ap_block_state153_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state154_io = ((stream_out_V_data_V_1_ack_in == 1'b0) & (ap_reg_pp4_iter1_tmp_s_reg_1152 == 1'd1));
end

assign ap_block_state154_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state155 = ((stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_id_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_user_V_1_ack_in == 1'b0) | (stream_out_V_strb_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state44_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state47_pp0_stage3_iter0 = ((stream_in_V_data_V_0_vld_out == 1'b0) & (tmp_11_reg_985 == 1'd1));
end

assign ap_block_state48_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state66_pp1_stage2_iter0 = ((stream_in_V_data_V_0_vld_out == 1'b0) & (tmp_22_reg_1050 == 1'd1));
end

assign ap_block_state67_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp1_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp1_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp1_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp1_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp1_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp1_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp1_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp1_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp1_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp1_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp1_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp1_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp1_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp1_stage9_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

always @ (*) begin
    ap_predicate_op289_fadd_state47 = ((tmp_51_fu_682_p2 == 1'd1) & (tmp_11_reg_985 == 1'd1));
end

always @ (*) begin
    ap_predicate_op309_fcmp_state57 = ((ap_reg_pp0_iter1_tmp_11_reg_985 == 1'd1) & (tmp_51_reg_1014 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign batch_load_cast_fu_741_p1 = batch_load_reg_323;

assign i_load_1_cast_fu_597_p1 = ap_phi_mux_i_load_1_phi_fu_303_p4;

assign i_load_2_cast_fu_756_p1 = ap_phi_mux_i_load_2_phi_fu_350_p4;

assign i_load_3_cast_fu_843_p1 = i_load_3_reg_368;

assign i_load_cast_fu_879_p1 = i_load_reg_379;

assign notlhs1_fu_710_p2 = ((tmp_52_fu_696_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs5_fu_645_p2 = ((tmp_16_fu_631_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs7_fu_621_p2 = ((tmp_30_fu_612_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_799_p2 = ((tmp_57_fu_785_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs2_fu_716_p2 = ((tmp_53_fu_706_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs6_fu_651_p2 = ((tmp_46_fu_641_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs8_fu_591_p2 = ((tmp_21_fu_587_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_805_p2 = ((tmp_58_fu_795_p1 == 23'd0) ? 1'b1 : 1'b0);

assign or_cond_fu_731_p2 = (tmp_56_fu_726_p2 | ap_reg_pp0_iter1_tmp_17_reg_1018);

assign state_vector_d0 = stream_in_V_data_V_0_data_out;

assign stream_in_TREADY = stream_in_V_dest_V_0_state[1'd1];

assign stream_in_V_data_V_0_ack_in = stream_in_V_data_V_0_state[1'd1];

assign stream_in_V_data_V_0_load_A = (stream_in_V_data_V_0_state_cmp_full & ~stream_in_V_data_V_0_sel_wr);

assign stream_in_V_data_V_0_load_B = (stream_in_V_data_V_0_state_cmp_full & stream_in_V_data_V_0_sel_wr);

assign stream_in_V_data_V_0_sel = stream_in_V_data_V_0_sel_rd;

assign stream_in_V_data_V_0_state_cmp_full = ((stream_in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_data_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_data_V_0_vld_out = stream_in_V_data_V_0_state[1'd0];

assign stream_in_V_dest_V_0_ack_in = stream_in_V_dest_V_0_state[1'd1];

assign stream_in_V_dest_V_0_load_A = (stream_in_V_dest_V_0_state_cmp_full & ~stream_in_V_dest_V_0_sel_wr);

assign stream_in_V_dest_V_0_load_B = (stream_in_V_dest_V_0_state_cmp_full & stream_in_V_dest_V_0_sel_wr);

assign stream_in_V_dest_V_0_sel = stream_in_V_dest_V_0_sel_rd;

assign stream_in_V_dest_V_0_state_cmp_full = ((stream_in_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_dest_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_dest_V_0_vld_out = stream_in_V_dest_V_0_state[1'd0];

assign stream_in_V_id_V_0_ack_in = stream_in_V_id_V_0_state[1'd1];

assign stream_in_V_id_V_0_load_A = (stream_in_V_id_V_0_state_cmp_full & ~stream_in_V_id_V_0_sel_wr);

assign stream_in_V_id_V_0_load_B = (stream_in_V_id_V_0_state_cmp_full & stream_in_V_id_V_0_sel_wr);

assign stream_in_V_id_V_0_sel = stream_in_V_id_V_0_sel_rd;

assign stream_in_V_id_V_0_state_cmp_full = ((stream_in_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_id_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_id_V_0_vld_out = stream_in_V_id_V_0_state[1'd0];

assign stream_in_V_keep_V_0_ack_in = stream_in_V_keep_V_0_state[1'd1];

assign stream_in_V_keep_V_0_load_A = (stream_in_V_keep_V_0_state_cmp_full & ~stream_in_V_keep_V_0_sel_wr);

assign stream_in_V_keep_V_0_load_B = (stream_in_V_keep_V_0_state_cmp_full & stream_in_V_keep_V_0_sel_wr);

assign stream_in_V_keep_V_0_sel = stream_in_V_keep_V_0_sel_rd;

assign stream_in_V_keep_V_0_state_cmp_full = ((stream_in_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_keep_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_keep_V_0_vld_out = stream_in_V_keep_V_0_state[1'd0];

assign stream_in_V_last_V_0_ack_in = stream_in_V_last_V_0_state[1'd1];

assign stream_in_V_last_V_0_load_A = (stream_in_V_last_V_0_state_cmp_full & ~stream_in_V_last_V_0_sel_wr);

assign stream_in_V_last_V_0_load_B = (stream_in_V_last_V_0_state_cmp_full & stream_in_V_last_V_0_sel_wr);

assign stream_in_V_last_V_0_sel = stream_in_V_last_V_0_sel_rd;

assign stream_in_V_last_V_0_state_cmp_full = ((stream_in_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_last_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_last_V_0_vld_out = stream_in_V_last_V_0_state[1'd0];

assign stream_in_V_strb_V_0_ack_in = stream_in_V_strb_V_0_state[1'd1];

assign stream_in_V_strb_V_0_load_A = (stream_in_V_strb_V_0_state_cmp_full & ~stream_in_V_strb_V_0_sel_wr);

assign stream_in_V_strb_V_0_load_B = (stream_in_V_strb_V_0_state_cmp_full & stream_in_V_strb_V_0_sel_wr);

assign stream_in_V_strb_V_0_sel = stream_in_V_strb_V_0_sel_rd;

assign stream_in_V_strb_V_0_state_cmp_full = ((stream_in_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_strb_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_strb_V_0_vld_out = stream_in_V_strb_V_0_state[1'd0];

assign stream_in_V_user_V_0_ack_in = stream_in_V_user_V_0_state[1'd1];

assign stream_in_V_user_V_0_load_A = (stream_in_V_user_V_0_state_cmp_full & ~stream_in_V_user_V_0_sel_wr);

assign stream_in_V_user_V_0_load_B = (stream_in_V_user_V_0_state_cmp_full & stream_in_V_user_V_0_sel_wr);

assign stream_in_V_user_V_0_sel = stream_in_V_user_V_0_sel_rd;

assign stream_in_V_user_V_0_state_cmp_full = ((stream_in_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_user_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_user_V_0_vld_out = stream_in_V_user_V_0_state[1'd0];

assign stream_out_TDATA = stream_out_V_data_V_1_data_out;

assign stream_out_TDEST = stream_out_V_dest_V_1_data_out;

assign stream_out_TID = stream_out_V_id_V_1_data_out;

assign stream_out_TKEEP = stream_out_V_keep_V_1_data_out;

assign stream_out_TLAST = stream_out_V_last_V_1_data_out;

assign stream_out_TSTRB = stream_out_V_strb_V_1_data_out;

assign stream_out_TUSER = stream_out_V_user_V_1_data_out;

assign stream_out_TVALID = stream_out_V_dest_V_1_state[1'd0];

assign stream_out_V_data_V_1_ack_in = stream_out_V_data_V_1_state[1'd1];

assign stream_out_V_data_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_data_V_1_load_A = (stream_out_V_data_V_1_state_cmp_full & ~stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_load_B = (stream_out_V_data_V_1_state_cmp_full & stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_sel = stream_out_V_data_V_1_sel_rd;

assign stream_out_V_data_V_1_state_cmp_full = ((stream_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_data_V_1_vld_out = stream_out_V_data_V_1_state[1'd0];

assign stream_out_V_dest_V_1_ack_in = stream_out_V_dest_V_1_state[1'd1];

assign stream_out_V_dest_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_dest_V_1_load_A = (stream_out_V_dest_V_1_state_cmp_full & ~stream_out_V_dest_V_1_sel_wr);

assign stream_out_V_dest_V_1_load_B = (stream_out_V_dest_V_1_state_cmp_full & stream_out_V_dest_V_1_sel_wr);

assign stream_out_V_dest_V_1_sel = stream_out_V_dest_V_1_sel_rd;

assign stream_out_V_dest_V_1_state_cmp_full = ((stream_out_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_dest_V_1_vld_out = stream_out_V_dest_V_1_state[1'd0];

assign stream_out_V_id_V_1_ack_in = stream_out_V_id_V_1_state[1'd1];

assign stream_out_V_id_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_id_V_1_load_A = (stream_out_V_id_V_1_state_cmp_full & ~stream_out_V_id_V_1_sel_wr);

assign stream_out_V_id_V_1_load_B = (stream_out_V_id_V_1_state_cmp_full & stream_out_V_id_V_1_sel_wr);

assign stream_out_V_id_V_1_sel = stream_out_V_id_V_1_sel_rd;

assign stream_out_V_id_V_1_state_cmp_full = ((stream_out_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_id_V_1_vld_out = stream_out_V_id_V_1_state[1'd0];

assign stream_out_V_keep_V_1_ack_in = stream_out_V_keep_V_1_state[1'd1];

assign stream_out_V_keep_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_keep_V_1_load_A = (stream_out_V_keep_V_1_state_cmp_full & ~stream_out_V_keep_V_1_sel_wr);

assign stream_out_V_keep_V_1_load_B = (stream_out_V_keep_V_1_state_cmp_full & stream_out_V_keep_V_1_sel_wr);

assign stream_out_V_keep_V_1_sel = stream_out_V_keep_V_1_sel_rd;

assign stream_out_V_keep_V_1_state_cmp_full = ((stream_out_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_keep_V_1_vld_out = stream_out_V_keep_V_1_state[1'd0];

assign stream_out_V_last_V_1_ack_in = stream_out_V_last_V_1_state[1'd1];

assign stream_out_V_last_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_last_V_1_load_A = (stream_out_V_last_V_1_state_cmp_full & ~stream_out_V_last_V_1_sel_wr);

assign stream_out_V_last_V_1_load_B = (stream_out_V_last_V_1_state_cmp_full & stream_out_V_last_V_1_sel_wr);

assign stream_out_V_last_V_1_sel = stream_out_V_last_V_1_sel_rd;

assign stream_out_V_last_V_1_state_cmp_full = ((stream_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_last_V_1_vld_out = stream_out_V_last_V_1_state[1'd0];

assign stream_out_V_strb_V_1_ack_in = stream_out_V_strb_V_1_state[1'd1];

assign stream_out_V_strb_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_strb_V_1_load_A = (stream_out_V_strb_V_1_state_cmp_full & ~stream_out_V_strb_V_1_sel_wr);

assign stream_out_V_strb_V_1_load_B = (stream_out_V_strb_V_1_state_cmp_full & stream_out_V_strb_V_1_sel_wr);

assign stream_out_V_strb_V_1_sel = stream_out_V_strb_V_1_sel_rd;

assign stream_out_V_strb_V_1_state_cmp_full = ((stream_out_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_strb_V_1_vld_out = stream_out_V_strb_V_1_state[1'd0];

assign stream_out_V_user_V_1_ack_in = stream_out_V_user_V_1_state[1'd1];

assign stream_out_V_user_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_user_V_1_load_A = (stream_out_V_user_V_1_state_cmp_full & ~stream_out_V_user_V_1_sel_wr);

assign stream_out_V_user_V_1_load_B = (stream_out_V_user_V_1_state_cmp_full & stream_out_V_user_V_1_sel_wr);

assign stream_out_V_user_V_1_sel = stream_out_V_user_V_1_sel_rd;

assign stream_out_V_user_V_1_state_cmp_full = ((stream_out_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_user_V_1_vld_out = stream_out_V_user_V_1_state[1'd0];

assign sum_load_1_to_int_fu_781_p1 = sum_load_1_reg_334;

assign sum_load_to_int_fu_627_p1 = sum_load_reg_286;

assign tmp_10_fu_888_p2 = (i_load_reg_379 + 31'd1);

assign tmp_11_fu_601_p2 = (($signed(i_load_1_cast_fu_597_p1) < $signed(vectorSize_read_reg_920)) ? 1'b1 : 1'b0);

assign tmp_12_fu_657_p1 = stream_in_V_data_V_0_data_out;

assign tmp_13_fu_663_p1 = i_load_1_reg_298;

assign tmp_15_to_int_fu_692_p1 = reg_452;

assign tmp_16_fu_631_p4 = {{sum_load_to_int_fu_627_p1[30:23]}};

assign tmp_17_fu_688_p2 = ((i_load_1_cast_reg_980 == tmp_2_reg_946) ? 1'b1 : 1'b0);

assign tmp_18_fu_745_p2 = (($signed(batch_load_cast_fu_741_p1) < $signed(kernelSize_read_reg_929)) ? 1'b1 : 1'b0);

assign tmp_19_fu_736_p1 = $signed(ip_index);

assign tmp_20_fu_606_p2 = (ap_phi_mux_i_load_1_phi_fu_303_p4 + 31'd1);

assign tmp_21_fu_587_p1 = stream_in_V_data_V_0_data_out[22:0];

assign tmp_22_fu_760_p2 = (($signed(i_load_2_cast_fu_756_p1) < $signed(vectorSize_read_reg_920)) ? 1'b1 : 1'b0);

assign tmp_24_fu_847_p2 = (($signed(i_load_3_cast_fu_843_p1) < $signed(vectorSize_read_reg_920)) ? 1'b1 : 1'b0);

assign tmp_25_fu_771_p1 = ap_phi_mux_i_load_2_phi_fu_350_p4;

assign tmp_26_fu_776_p1 = stream_in_V_data_V_0_data_out;

assign tmp_29_fu_765_p2 = (ap_phi_mux_i_load_2_phi_fu_350_p4 + 31'd1);

assign tmp_2_fu_496_p2 = ($signed(vectorSize_read_reg_920) + $signed(32'd4294967295));

assign tmp_30_fu_612_p4 = {{tmp_data_V_reg_964[30:23]}};

assign tmp_31_fu_858_p1 = i_load_3_reg_368;

assign tmp_32_fu_852_p2 = (i_load_3_reg_368 + 31'd1);

assign tmp_33_fu_873_p2 = (ip_index + 32'd1);

assign tmp_35_cast_fu_822_p1 = tmp_35_reg_357;

assign tmp_36_fu_826_p2 = (($signed(tmp_35_cast_fu_822_p1) < $signed(vectorSize_read_reg_920)) ? 1'b1 : 1'b0);

assign tmp_37_fu_837_p1 = tmp_35_reg_357;

assign tmp_41_fu_831_p2 = (tmp_35_reg_357 + 31'd1);

assign tmp_42_fu_750_p2 = (batch_load_reg_323 + 31'd1);

assign tmp_46_fu_641_p1 = sum_load_to_int_fu_627_p1[22:0];

assign tmp_47_fu_668_p2 = (notrhs6_reg_1004 | notlhs5_reg_999);

assign tmp_48_fu_672_p2 = (notrhs8_reg_975 | notlhs7_reg_994);

assign tmp_49_fu_676_p2 = (tmp_48_fu_672_p2 & tmp_47_fu_668_p2);

assign tmp_4_fu_507_p2 = (($signed(tmp_3_reg_275) < $signed(layerSize_read_reg_934)) ? 1'b1 : 1'b0);

assign tmp_51_fu_682_p2 = (tmp_49_fu_676_p2 & grp_fu_412_p2);

assign tmp_52_fu_696_p4 = {{tmp_15_to_int_fu_692_p1[30:23]}};

assign tmp_53_fu_706_p1 = tmp_15_to_int_fu_692_p1[22:0];

assign tmp_54_fu_722_p2 = (notrhs2_reg_1028 | notlhs1_reg_1023);

assign tmp_56_fu_726_p2 = (tmp_55_reg_1033 & tmp_54_fu_722_p2);

assign tmp_57_fu_785_p4 = {{sum_load_1_to_int_fu_781_p1[30:23]}};

assign tmp_58_fu_795_p1 = sum_load_1_to_int_fu_781_p1[22:0];

assign tmp_59_fu_811_p2 = (notrhs_fu_805_p2 | notlhs_fu_799_p2);

assign tmp_5_fu_512_p2 = ((tmp_3_reg_275 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_61_fu_817_p2 = (tmp_60_reg_1079 & tmp_59_fu_811_p2);

assign tmp_6_fu_518_p2 = ($signed(layerSize_read_reg_934) + $signed(32'd4294967295));

assign tmp_7_fu_583_p1 = stream_in_V_data_V_0_data_out;

assign tmp_8_fu_894_p1 = i_load_reg_379;

assign tmp_data_V_1_fu_904_p1 = spike_matrix_q0;

assign tmp_data_V_4_fu_863_p1 = state_vector_q1;

assign tmp_last_V_1_fu_899_p2 = ((i_load_cast_fu_879_p1 == tmp_6_reg_959) ? 1'b1 : 1'b0);

assign tmp_s_fu_883_p2 = (($signed(i_load_cast_fu_879_p1) < $signed(layerSize_read_reg_934)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    i_load_1_cast_reg_980[31] <= 1'b0;
    tmp_25_reg_1059[63:31] <= 33'b000000000000000000000000000000000;
end

endmodule //sbs_accelerator
