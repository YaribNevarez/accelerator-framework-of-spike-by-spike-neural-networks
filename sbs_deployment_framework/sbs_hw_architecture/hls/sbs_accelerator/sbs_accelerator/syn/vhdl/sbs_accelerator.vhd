-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sbs_accelerator is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    stream_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    stream_in_TVALID : IN STD_LOGIC;
    stream_in_TREADY : OUT STD_LOGIC;
    stream_in_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    stream_in_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    stream_in_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    stream_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    stream_in_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    stream_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    stream_out_TVALID : OUT STD_LOGIC;
    stream_out_TREADY : IN STD_LOGIC;
    stream_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    stream_out_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    stream_out_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    stream_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    stream_out_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of sbs_accelerator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sbs_accelerator,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.430000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=8,HLS_SYN_FF=4107,HLS_SYN_LUT=5240}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage4 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage5 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage6 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage7 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage8 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage9 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (106 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (106 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (106 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (106 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (106 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (106 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (106 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (106 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (106 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state151 : STD_LOGIC_VECTOR (106 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (106 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state155 : STD_LOGIC_VECTOR (106 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1E3CE508 : STD_LOGIC_VECTOR (31 downto 0) := "00011110001111001110010100001000";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (106 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal stream_in_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_in_V_data_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_data_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_data_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_data_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_in_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_in_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_data_V_0_sel : STD_LOGIC;
    signal stream_in_V_data_V_0_load_A : STD_LOGIC;
    signal stream_in_V_data_V_0_load_B : STD_LOGIC;
    signal stream_in_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_V_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_in_V_keep_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_keep_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_keep_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_keep_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_in_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_in_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_keep_V_0_sel : STD_LOGIC;
    signal stream_in_V_keep_V_0_load_A : STD_LOGIC;
    signal stream_in_V_keep_V_0_load_B : STD_LOGIC;
    signal stream_in_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_V_strb_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_in_V_strb_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_strb_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_strb_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_strb_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_in_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_in_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_strb_V_0_sel : STD_LOGIC;
    signal stream_in_V_strb_V_0_load_A : STD_LOGIC;
    signal stream_in_V_strb_V_0_load_B : STD_LOGIC;
    signal stream_in_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_V_user_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal stream_in_V_user_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_user_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_user_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_user_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_user_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal stream_in_V_user_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal stream_in_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_user_V_0_sel : STD_LOGIC;
    signal stream_in_V_user_V_0_load_A : STD_LOGIC;
    signal stream_in_V_user_V_0_load_B : STD_LOGIC;
    signal stream_in_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_V_last_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_last_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_last_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_last_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_last_V_0_sel : STD_LOGIC;
    signal stream_in_V_last_V_0_load_A : STD_LOGIC;
    signal stream_in_V_last_V_0_load_B : STD_LOGIC;
    signal stream_in_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_V_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_in_V_id_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_id_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_id_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_id_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_in_V_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_in_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_id_V_0_sel : STD_LOGIC;
    signal stream_in_V_id_V_0_load_A : STD_LOGIC;
    signal stream_in_V_id_V_0_load_B : STD_LOGIC;
    signal stream_in_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_V_dest_V_0_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal stream_in_V_dest_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_dest_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_dest_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_dest_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal stream_in_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal stream_in_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_dest_V_0_sel : STD_LOGIC;
    signal stream_in_V_dest_V_0_load_A : STD_LOGIC;
    signal stream_in_V_dest_V_0_load_B : STD_LOGIC;
    signal stream_in_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal stream_out_V_data_V_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_out_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_out_V_data_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_data_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_data_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_data_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_data_V_1_sel : STD_LOGIC;
    signal stream_out_V_data_V_1_load_A : STD_LOGIC;
    signal stream_out_V_data_V_1_load_B : STD_LOGIC;
    signal stream_out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_out_V_keep_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_keep_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_keep_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_keep_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_out_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_out_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_keep_V_1_sel : STD_LOGIC;
    signal stream_out_V_keep_V_1_load_A : STD_LOGIC;
    signal stream_out_V_keep_V_1_load_B : STD_LOGIC;
    signal stream_out_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_out_V_strb_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_strb_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_strb_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_strb_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_out_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_out_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_strb_V_1_sel : STD_LOGIC;
    signal stream_out_V_strb_V_1_load_A : STD_LOGIC;
    signal stream_out_V_strb_V_1_load_B : STD_LOGIC;
    signal stream_out_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_user_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal stream_out_V_user_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_user_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_user_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_user_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_user_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal stream_out_V_user_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal stream_out_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_user_V_1_sel : STD_LOGIC;
    signal stream_out_V_user_V_1_load_A : STD_LOGIC;
    signal stream_out_V_user_V_1_load_B : STD_LOGIC;
    signal stream_out_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_last_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_last_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_last_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_last_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_last_V_1_sel : STD_LOGIC;
    signal stream_out_V_last_V_1_load_A : STD_LOGIC;
    signal stream_out_V_last_V_1_load_B : STD_LOGIC;
    signal stream_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_out_V_id_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_id_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_id_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_id_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_id_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_out_V_id_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_out_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_id_V_1_sel : STD_LOGIC;
    signal stream_out_V_id_V_1_load_A : STD_LOGIC;
    signal stream_out_V_id_V_1_load_B : STD_LOGIC;
    signal stream_out_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_dest_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal stream_out_V_dest_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_dest_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_dest_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_dest_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal stream_out_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal stream_out_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_dest_V_1_sel : STD_LOGIC;
    signal stream_out_V_dest_V_1_load_A : STD_LOGIC;
    signal stream_out_V_dest_V_1_load_B : STD_LOGIC;
    signal stream_out_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal layerSize : STD_LOGIC_VECTOR (31 downto 0);
    signal kernelSize : STD_LOGIC_VECTOR (31 downto 0);
    signal vectorSize : STD_LOGIC_VECTOR (31 downto 0);
    signal epsilon : STD_LOGIC_VECTOR (31 downto 0);
    signal ip_index : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal channel_keep_V : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal channel_strb_V : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal channel_user_V : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal channel_last_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal channel_id_V : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal channel_dest_V : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal state_vector_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal state_vector_ce0 : STD_LOGIC;
    signal state_vector_we0 : STD_LOGIC;
    signal state_vector_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_vector_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_vector_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal state_vector_ce1 : STD_LOGIC;
    signal state_vector_we1 : STD_LOGIC;
    signal state_vector_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal spike_matrix_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal spike_matrix_ce0 : STD_LOGIC;
    signal spike_matrix_we0 : STD_LOGIC;
    signal spike_matrix_q0 : STD_LOGIC_VECTOR (30 downto 0);
    signal temp_data_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal temp_data_ce0 : STD_LOGIC;
    signal temp_data_we0 : STD_LOGIC;
    signal temp_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal tmp_11_reg_985 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal tmp_22_reg_1050 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal tmp_24_reg_1123 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_reg_pp3_iter1_tmp_24_reg_1123 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal tmp_s_reg_1152 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_reg_pp4_iter1_tmp_s_reg_1152 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_load_reg_286 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_load_1_reg_298 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_reg_pp0_iter1_i_load_1_reg_298 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state44_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sum_load_1_reg_334 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_load_2_reg_346 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_35_reg_357 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_load_3_reg_368 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_load_reg_379 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_452 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_state118_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state119_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state120_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state121_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state122_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state123_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state124_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state125_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state126_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_state127_pp2_stage0_iter9 : BOOLEAN;
    signal ap_block_state128_pp2_stage0_iter10 : BOOLEAN;
    signal ap_block_state129_pp2_stage0_iter11 : BOOLEAN;
    signal ap_block_state130_pp2_stage0_iter12 : BOOLEAN;
    signal ap_block_state131_pp2_stage0_iter13 : BOOLEAN;
    signal ap_block_state132_pp2_stage0_iter14 : BOOLEAN;
    signal ap_block_state133_pp2_stage0_iter15 : BOOLEAN;
    signal ap_block_state134_pp2_stage0_iter16 : BOOLEAN;
    signal ap_block_state135_pp2_stage0_iter17 : BOOLEAN;
    signal ap_block_state136_pp2_stage0_iter18 : BOOLEAN;
    signal ap_block_state137_pp2_stage0_iter19 : BOOLEAN;
    signal ap_block_state138_pp2_stage0_iter20 : BOOLEAN;
    signal ap_block_state139_pp2_stage0_iter21 : BOOLEAN;
    signal ap_block_state140_pp2_stage0_iter22 : BOOLEAN;
    signal ap_block_state141_pp2_stage0_iter23 : BOOLEAN;
    signal ap_block_state142_pp2_stage0_iter24 : BOOLEAN;
    signal ap_block_state143_pp2_stage0_iter25 : BOOLEAN;
    signal ap_block_state144_pp2_stage0_iter26 : BOOLEAN;
    signal ap_block_state145_pp2_stage0_iter27 : BOOLEAN;
    signal ap_block_state146_pp2_stage0_iter28 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_51_reg_1014 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp2_iter19 : STD_LOGIC := '0';
    signal tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter18_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_459 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_block_state65_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state75_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_reg_pp2_iter8_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_398_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_465 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage9 : signal is "none";
    signal ap_block_state73_pp1_stage9_iter0 : BOOLEAN;
    signal ap_block_state83_pp1_stage9_iter1 : BOOLEAN;
    signal ap_block_pp1_stage9_11001 : BOOLEAN;
    signal ap_block_state148_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state149_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state149_io : BOOLEAN;
    signal ap_block_state150_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state150_io : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal ap_block_state152_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state153_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state153_io : BOOLEAN;
    signal ap_block_state154_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state154_io : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal epsilon_read_reg_914 : STD_LOGIC_VECTOR (31 downto 0);
    signal vectorSize_read_reg_920 : STD_LOGIC_VECTOR (31 downto 0);
    signal kernelSize_read_reg_929 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerSize_read_reg_934 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reverse_epsilon_reg_941 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal tmp_2_fu_496_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_946 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal tmp_5_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_955 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_518_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_959 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_reg_964 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_583_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_969 : STD_LOGIC_VECTOR (31 downto 0);
    signal notrhs8_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs8_reg_975 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_load_1_cast_fu_597_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_load_1_cast_reg_980 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_11_reg_985 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_606_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_20_reg_989 : STD_LOGIC_VECTOR (30 downto 0);
    signal notlhs7_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs7_reg_994 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs5_reg_999 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state46_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state58_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal notrhs6_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs6_reg_1004 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_657_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state47_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state59_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_51_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_51_reg_1014 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_1018 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_17_reg_1018 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_reg_1023 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state45_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state57_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal notrhs2_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs2_reg_1028 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_reg_1033 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state48_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state60_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal tmp_18_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal tmp_42_fu_750_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_42_reg_1045 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_22_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state64_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state74_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ap_reg_pp1_iter1_tmp_22_reg_1050 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_765_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_29_reg_1054 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_25_fu_771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_reg_1059 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_fu_776_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state66_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_state76_pp1_stage2_iter1 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal tmp_60_reg_1079 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal tmp_61_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal tmp_34_reg_1088 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal tmp_36_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_reg_pp2_iter1_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter2_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter3_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter4_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter5_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter6_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter7_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter9_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter10_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter11_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter12_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter13_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter14_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter15_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter16_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter17_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter19_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter20_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter21_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter22_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter23_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter24_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter25_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter26_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter27_tmp_36_reg_1093 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_831_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter1_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter2_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter3_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter4_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter5_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter6_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter7_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter8_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter9_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter10_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter11_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter12_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter13_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter14_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter15_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter16_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter17_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter18_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter19_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter20_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter21_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter22_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter23_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter24_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter25_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter26_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_reg_pp2_iter27_state_vector_addr_3_reg_1102 : STD_LOGIC_VECTOR (9 downto 0);
    signal temp_data_load_reg_1113 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal grp_fu_402_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_reg_1118 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_852_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal tmp_data_V_4_fu_863_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_873_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state151 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state151 : signal is "none";
    signal tmp_s_fu_883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_888_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal tmp_last_V_1_fu_899_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_1_reg_1166 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_1_fu_904_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state44 : STD_LOGIC;
    signal ap_block_state55_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state49_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state61_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state64 : STD_LOGIC;
    signal ap_block_pp1_stage9_subdone : BOOLEAN;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state118 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter28 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state148 : STD_LOGIC;
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state152 : STD_LOGIC;
    signal tmp_3_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_sum_load_phi_fu_290_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_sum_load2_phi_fu_315_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_load_1_phi_fu_303_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_phi_reg_pp0_iter1_sum_load2_reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_sum_load2_reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal batch_load_reg_323 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state147 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state147 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_phi_mux_i_load_2_phi_fu_350_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_13_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal or_cond_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_837_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal tmp_31_fu_858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_894_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0_01001 : BOOLEAN;
    signal ap_block_pp4_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal grp_fu_390_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_390_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_398_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_406_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_412_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal tmp_21_fu_587_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_30_fu_612_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal sum_load_to_int_fu_627_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_631_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_46_fu_641_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_47_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_to_int_fu_692_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_696_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_fu_706_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_54_fu_722_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal batch_load_cast_fu_741_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_load_2_cast_fu_756_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_load_1_to_int_fu_781_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_fu_785_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_58_fu_795_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_cast_fu_822_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_load_3_cast_fu_843_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_load_cast_fu_879_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_390_ce : STD_LOGIC;
    signal ap_predicate_op289_fadd_state47 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_state50_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state51_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state52_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state53_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state54_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state67_pp1_stage3_iter0 : BOOLEAN;
    signal ap_block_state77_pp1_stage3_iter1 : BOOLEAN;
    signal ap_block_pp1_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage3 : signal is "none";
    signal ap_block_state68_pp1_stage4_iter0 : BOOLEAN;
    signal ap_block_state78_pp1_stage4_iter1 : BOOLEAN;
    signal ap_block_pp1_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage4 : signal is "none";
    signal ap_block_state69_pp1_stage5_iter0 : BOOLEAN;
    signal ap_block_state79_pp1_stage5_iter1 : BOOLEAN;
    signal ap_block_pp1_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage5 : signal is "none";
    signal ap_block_state70_pp1_stage6_iter0 : BOOLEAN;
    signal ap_block_state80_pp1_stage6_iter1 : BOOLEAN;
    signal ap_block_pp1_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage6 : signal is "none";
    signal ap_block_state71_pp1_stage7_iter0 : BOOLEAN;
    signal ap_block_state81_pp1_stage7_iter1 : BOOLEAN;
    signal ap_block_pp1_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage7 : signal is "none";
    signal ap_block_state72_pp1_stage8_iter0 : BOOLEAN;
    signal ap_block_state82_pp1_stage8_iter1 : BOOLEAN;
    signal ap_block_pp1_stage8_11001 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage8 : signal is "none";
    signal grp_fu_398_ce : STD_LOGIC;
    signal grp_fu_412_ce : STD_LOGIC;
    signal ap_predicate_op309_fcmp_state57 : BOOLEAN;
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal grp_fu_412_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_CS_fsm_state155 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state155 : signal is "none";
    signal ap_block_state155 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (106 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_block_pp1_stage3_subdone : BOOLEAN;
    signal ap_block_pp1_stage4_subdone : BOOLEAN;
    signal ap_block_pp1_stage5_subdone : BOOLEAN;
    signal ap_block_pp1_stage6_subdone : BOOLEAN;
    signal ap_block_pp1_stage7_subdone : BOOLEAN;
    signal ap_block_pp1_stage8_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;

    component sbs_accelerator_feOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sbs_accelerator_ffYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sbs_accelerator_fg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sbs_accelerator_fhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sbs_accelerator_sbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sbs_accelerator_scud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (30 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component sbs_accelerator_tdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sbs_accelerator_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        layerSize : OUT STD_LOGIC_VECTOR (31 downto 0);
        kernelSize : OUT STD_LOGIC_VECTOR (31 downto 0);
        vectorSize : OUT STD_LOGIC_VECTOR (31 downto 0);
        epsilon : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    state_vector_U : component sbs_accelerator_sbkb
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => state_vector_address0,
        ce0 => state_vector_ce0,
        we0 => state_vector_we0,
        d0 => state_vector_d0,
        q0 => state_vector_q0,
        address1 => state_vector_address1,
        ce1 => state_vector_ce1,
        we1 => state_vector_we1,
        d1 => tmp_40_reg_1118,
        q1 => state_vector_q1);

    spike_matrix_U : component sbs_accelerator_scud
    generic map (
        DataWidth => 31,
        AddressRange => 3600,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => spike_matrix_address0,
        ce0 => spike_matrix_ce0,
        we0 => spike_matrix_we0,
        d0 => ap_reg_pp0_iter1_i_load_1_reg_298,
        q0 => spike_matrix_q0);

    temp_data_U : component sbs_accelerator_tdEe
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => temp_data_address0,
        ce0 => temp_data_ce0,
        we0 => temp_data_we0,
        d0 => reg_465,
        q0 => temp_data_q0);

    sbs_accelerator_CRTL_BUS_s_axi_U : component sbs_accelerator_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        layerSize => layerSize,
        kernelSize => kernelSize,
        vectorSize => vectorSize,
        epsilon => epsilon);

    sbs_accelerator_feOg_U1 : component sbs_accelerator_feOg
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_390_p0,
        din1 => grp_fu_390_p1,
        ce => grp_fu_390_ce,
        dout => grp_fu_390_p2);

    sbs_accelerator_ffYi_U2 : component sbs_accelerator_ffYi
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_398_p0,
        din1 => grp_fu_398_p1,
        ce => grp_fu_398_ce,
        dout => grp_fu_398_p2);

    sbs_accelerator_ffYi_U3 : component sbs_accelerator_ffYi
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reverse_epsilon_reg_941,
        din1 => reg_452,
        ce => ap_const_logic_1,
        dout => grp_fu_402_p2);

    sbs_accelerator_fg8j_U4 : component sbs_accelerator_fg8j
    generic map (
        ID => 1,
        NUM_STAGE => 30,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_406_p0,
        din1 => grp_fu_406_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_406_p2);

    sbs_accelerator_fhbi_U5 : component sbs_accelerator_fhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_412_p0,
        din1 => grp_fu_412_p1,
        ce => grp_fu_412_ce,
        opcode => grp_fu_412_opcode,
        dout => grp_fu_412_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state44) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (stream_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state44) and (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_subdone))))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state44);
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (stream_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state64) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state63) and (tmp_18_fu_745_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state64) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9) and (ap_const_boolean_0 = ap_block_pp1_stage9_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state64);
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage9) and (ap_const_boolean_0 = ap_block_pp1_stage9_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state63) and (tmp_18_fu_745_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state118) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state118)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state118);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter17 <= ap_enable_reg_pp2_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter18 <= ap_enable_reg_pp2_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter19 <= ap_enable_reg_pp2_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter20 <= ap_enable_reg_pp2_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter21 <= ap_enable_reg_pp2_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter22 <= ap_enable_reg_pp2_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter23 <= ap_enable_reg_pp2_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter24 <= ap_enable_reg_pp2_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter25 <= ap_enable_reg_pp2_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter26 <= ap_enable_reg_pp2_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter27 <= ap_enable_reg_pp2_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter28 <= ap_enable_reg_pp2_iter27;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
                    ap_enable_reg_pp2_iter28 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state148) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state63) and (tmp_18_fu_745_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state148)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state148);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state63) and (tmp_18_fu_745_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state152) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_4_fu_507_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state152)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state152);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_4_fu_507_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_V_data_V_0_ack_out = ap_const_logic_1) and (stream_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_V_data_V_0_sel_rd <= not(stream_in_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_V_data_V_0_ack_in = ap_const_logic_1) and (stream_in_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_V_data_V_0_sel_wr <= not(stream_in_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_data_V_0_vld_in = ap_const_logic_0) and (stream_in_V_data_V_0_state = ap_const_lv2_2)) or ((stream_in_V_data_V_0_vld_in = ap_const_logic_0) and (stream_in_V_data_V_0_ack_out = ap_const_logic_1) and (stream_in_V_data_V_0_state = ap_const_lv2_3)))) then 
                    stream_in_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_data_V_0_ack_out = ap_const_logic_0) and (stream_in_V_data_V_0_state = ap_const_lv2_1)) or ((stream_in_V_data_V_0_ack_out = ap_const_logic_0) and (stream_in_V_data_V_0_vld_in = ap_const_logic_1) and (stream_in_V_data_V_0_state = ap_const_lv2_3)))) then 
                    stream_in_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_data_V_0_vld_in = ap_const_logic_0) and (stream_in_V_data_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_data_V_0_ack_out = ap_const_logic_0) and (stream_in_V_data_V_0_vld_in = ap_const_logic_1))) and (stream_in_V_data_V_0_state = ap_const_lv2_3)) or ((stream_in_V_data_V_0_ack_out = ap_const_logic_1) and (stream_in_V_data_V_0_state = ap_const_lv2_1)) or ((stream_in_V_data_V_0_vld_in = ap_const_logic_1) and (stream_in_V_data_V_0_state = ap_const_lv2_2)))) then 
                    stream_in_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_V_dest_V_0_ack_out = ap_const_logic_1) and (stream_in_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_V_dest_V_0_sel_rd <= not(stream_in_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_V_dest_V_0_ack_in = ap_const_logic_1) and (stream_in_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_V_dest_V_0_sel_wr <= not(stream_in_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_dest_V_0_vld_in = ap_const_logic_0) and (stream_in_V_dest_V_0_state = ap_const_lv2_2)) or ((stream_in_V_dest_V_0_vld_in = ap_const_logic_0) and (stream_in_V_dest_V_0_ack_out = ap_const_logic_1) and (stream_in_V_dest_V_0_state = ap_const_lv2_3)))) then 
                    stream_in_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_dest_V_0_ack_out = ap_const_logic_0) and (stream_in_V_dest_V_0_state = ap_const_lv2_1)) or ((stream_in_V_dest_V_0_ack_out = ap_const_logic_0) and (stream_in_V_dest_V_0_vld_in = ap_const_logic_1) and (stream_in_V_dest_V_0_state = ap_const_lv2_3)))) then 
                    stream_in_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_dest_V_0_vld_in = ap_const_logic_0) and (stream_in_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_dest_V_0_ack_out = ap_const_logic_0) and (stream_in_V_dest_V_0_vld_in = ap_const_logic_1))) and (stream_in_V_dest_V_0_state = ap_const_lv2_3)) or ((stream_in_V_dest_V_0_ack_out = ap_const_logic_1) and (stream_in_V_dest_V_0_state = ap_const_lv2_1)) or ((stream_in_V_dest_V_0_vld_in = ap_const_logic_1) and (stream_in_V_dest_V_0_state = ap_const_lv2_2)))) then 
                    stream_in_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_V_id_V_0_ack_out = ap_const_logic_1) and (stream_in_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_V_id_V_0_sel_rd <= not(stream_in_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_V_id_V_0_ack_in = ap_const_logic_1) and (stream_in_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_V_id_V_0_sel_wr <= not(stream_in_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_id_V_0_vld_in = ap_const_logic_0) and (stream_in_V_id_V_0_state = ap_const_lv2_2)) or ((stream_in_V_id_V_0_vld_in = ap_const_logic_0) and (stream_in_V_id_V_0_ack_out = ap_const_logic_1) and (stream_in_V_id_V_0_state = ap_const_lv2_3)))) then 
                    stream_in_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_id_V_0_ack_out = ap_const_logic_0) and (stream_in_V_id_V_0_state = ap_const_lv2_1)) or ((stream_in_V_id_V_0_ack_out = ap_const_logic_0) and (stream_in_V_id_V_0_vld_in = ap_const_logic_1) and (stream_in_V_id_V_0_state = ap_const_lv2_3)))) then 
                    stream_in_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_id_V_0_vld_in = ap_const_logic_0) and (stream_in_V_id_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_id_V_0_ack_out = ap_const_logic_0) and (stream_in_V_id_V_0_vld_in = ap_const_logic_1))) and (stream_in_V_id_V_0_state = ap_const_lv2_3)) or ((stream_in_V_id_V_0_ack_out = ap_const_logic_1) and (stream_in_V_id_V_0_state = ap_const_lv2_1)) or ((stream_in_V_id_V_0_vld_in = ap_const_logic_1) and (stream_in_V_id_V_0_state = ap_const_lv2_2)))) then 
                    stream_in_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_V_keep_V_0_ack_out = ap_const_logic_1) and (stream_in_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_V_keep_V_0_sel_rd <= not(stream_in_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_V_keep_V_0_ack_in = ap_const_logic_1) and (stream_in_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_V_keep_V_0_sel_wr <= not(stream_in_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_keep_V_0_vld_in = ap_const_logic_0) and (stream_in_V_keep_V_0_state = ap_const_lv2_2)) or ((stream_in_V_keep_V_0_vld_in = ap_const_logic_0) and (stream_in_V_keep_V_0_ack_out = ap_const_logic_1) and (stream_in_V_keep_V_0_state = ap_const_lv2_3)))) then 
                    stream_in_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_keep_V_0_ack_out = ap_const_logic_0) and (stream_in_V_keep_V_0_state = ap_const_lv2_1)) or ((stream_in_V_keep_V_0_ack_out = ap_const_logic_0) and (stream_in_V_keep_V_0_vld_in = ap_const_logic_1) and (stream_in_V_keep_V_0_state = ap_const_lv2_3)))) then 
                    stream_in_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_keep_V_0_vld_in = ap_const_logic_0) and (stream_in_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_keep_V_0_ack_out = ap_const_logic_0) and (stream_in_V_keep_V_0_vld_in = ap_const_logic_1))) and (stream_in_V_keep_V_0_state = ap_const_lv2_3)) or ((stream_in_V_keep_V_0_ack_out = ap_const_logic_1) and (stream_in_V_keep_V_0_state = ap_const_lv2_1)) or ((stream_in_V_keep_V_0_vld_in = ap_const_logic_1) and (stream_in_V_keep_V_0_state = ap_const_lv2_2)))) then 
                    stream_in_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_V_last_V_0_ack_out = ap_const_logic_1) and (stream_in_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_V_last_V_0_sel_rd <= not(stream_in_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_V_last_V_0_ack_in = ap_const_logic_1) and (stream_in_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_V_last_V_0_sel_wr <= not(stream_in_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_last_V_0_vld_in = ap_const_logic_0) and (stream_in_V_last_V_0_state = ap_const_lv2_2)) or ((stream_in_V_last_V_0_vld_in = ap_const_logic_0) and (stream_in_V_last_V_0_ack_out = ap_const_logic_1) and (stream_in_V_last_V_0_state = ap_const_lv2_3)))) then 
                    stream_in_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_last_V_0_ack_out = ap_const_logic_0) and (stream_in_V_last_V_0_state = ap_const_lv2_1)) or ((stream_in_V_last_V_0_ack_out = ap_const_logic_0) and (stream_in_V_last_V_0_vld_in = ap_const_logic_1) and (stream_in_V_last_V_0_state = ap_const_lv2_3)))) then 
                    stream_in_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_last_V_0_vld_in = ap_const_logic_0) and (stream_in_V_last_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_last_V_0_ack_out = ap_const_logic_0) and (stream_in_V_last_V_0_vld_in = ap_const_logic_1))) and (stream_in_V_last_V_0_state = ap_const_lv2_3)) or ((stream_in_V_last_V_0_ack_out = ap_const_logic_1) and (stream_in_V_last_V_0_state = ap_const_lv2_1)) or ((stream_in_V_last_V_0_vld_in = ap_const_logic_1) and (stream_in_V_last_V_0_state = ap_const_lv2_2)))) then 
                    stream_in_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_V_strb_V_0_ack_out = ap_const_logic_1) and (stream_in_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_V_strb_V_0_sel_rd <= not(stream_in_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_V_strb_V_0_ack_in = ap_const_logic_1) and (stream_in_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_V_strb_V_0_sel_wr <= not(stream_in_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_strb_V_0_vld_in = ap_const_logic_0) and (stream_in_V_strb_V_0_state = ap_const_lv2_2)) or ((stream_in_V_strb_V_0_vld_in = ap_const_logic_0) and (stream_in_V_strb_V_0_ack_out = ap_const_logic_1) and (stream_in_V_strb_V_0_state = ap_const_lv2_3)))) then 
                    stream_in_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_strb_V_0_ack_out = ap_const_logic_0) and (stream_in_V_strb_V_0_state = ap_const_lv2_1)) or ((stream_in_V_strb_V_0_ack_out = ap_const_logic_0) and (stream_in_V_strb_V_0_vld_in = ap_const_logic_1) and (stream_in_V_strb_V_0_state = ap_const_lv2_3)))) then 
                    stream_in_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_strb_V_0_vld_in = ap_const_logic_0) and (stream_in_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_strb_V_0_ack_out = ap_const_logic_0) and (stream_in_V_strb_V_0_vld_in = ap_const_logic_1))) and (stream_in_V_strb_V_0_state = ap_const_lv2_3)) or ((stream_in_V_strb_V_0_ack_out = ap_const_logic_1) and (stream_in_V_strb_V_0_state = ap_const_lv2_1)) or ((stream_in_V_strb_V_0_vld_in = ap_const_logic_1) and (stream_in_V_strb_V_0_state = ap_const_lv2_2)))) then 
                    stream_in_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_V_user_V_0_ack_out = ap_const_logic_1) and (stream_in_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_V_user_V_0_sel_rd <= not(stream_in_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_V_user_V_0_ack_in = ap_const_logic_1) and (stream_in_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_V_user_V_0_sel_wr <= not(stream_in_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_user_V_0_vld_in = ap_const_logic_0) and (stream_in_V_user_V_0_state = ap_const_lv2_2)) or ((stream_in_V_user_V_0_vld_in = ap_const_logic_0) and (stream_in_V_user_V_0_ack_out = ap_const_logic_1) and (stream_in_V_user_V_0_state = ap_const_lv2_3)))) then 
                    stream_in_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_user_V_0_ack_out = ap_const_logic_0) and (stream_in_V_user_V_0_state = ap_const_lv2_1)) or ((stream_in_V_user_V_0_ack_out = ap_const_logic_0) and (stream_in_V_user_V_0_vld_in = ap_const_logic_1) and (stream_in_V_user_V_0_state = ap_const_lv2_3)))) then 
                    stream_in_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_user_V_0_vld_in = ap_const_logic_0) and (stream_in_V_user_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_user_V_0_ack_out = ap_const_logic_0) and (stream_in_V_user_V_0_vld_in = ap_const_logic_1))) and (stream_in_V_user_V_0_state = ap_const_lv2_3)) or ((stream_in_V_user_V_0_ack_out = ap_const_logic_1) and (stream_in_V_user_V_0_state = ap_const_lv2_1)) or ((stream_in_V_user_V_0_vld_in = ap_const_logic_1) and (stream_in_V_user_V_0_state = ap_const_lv2_2)))) then 
                    stream_in_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_data_V_1_ack_out = ap_const_logic_1) and (stream_out_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_data_V_1_sel_rd <= not(stream_out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_data_V_1_ack_in = ap_const_logic_1) and (stream_out_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_data_V_1_sel_wr <= not(stream_out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_data_V_1_vld_in = ap_const_logic_0) and (stream_out_V_data_V_1_state = ap_const_lv2_2)) or ((stream_out_V_data_V_1_vld_in = ap_const_logic_0) and (stream_out_V_data_V_1_ack_out = ap_const_logic_1) and (stream_out_V_data_V_1_state = ap_const_lv2_3)))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_data_V_1_ack_out = ap_const_logic_0) and (stream_out_V_data_V_1_state = ap_const_lv2_1)) or ((stream_out_V_data_V_1_ack_out = ap_const_logic_0) and (stream_out_V_data_V_1_vld_in = ap_const_logic_1) and (stream_out_V_data_V_1_state = ap_const_lv2_3)))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_data_V_1_vld_in = ap_const_logic_0) and (stream_out_V_data_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_data_V_1_ack_out = ap_const_logic_0) and (stream_out_V_data_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_data_V_1_state = ap_const_lv2_3)) or ((stream_out_V_data_V_1_ack_out = ap_const_logic_1) and (stream_out_V_data_V_1_state = ap_const_lv2_1)) or ((stream_out_V_data_V_1_vld_in = ap_const_logic_1) and (stream_out_V_data_V_1_state = ap_const_lv2_2)))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_dest_V_1_ack_out = ap_const_logic_1) and (stream_out_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_dest_V_1_sel_rd <= not(stream_out_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_dest_V_1_ack_in = ap_const_logic_1) and (stream_out_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_dest_V_1_sel_wr <= not(stream_out_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_dest_V_1_vld_in = ap_const_logic_0) and (stream_out_V_dest_V_1_state = ap_const_lv2_2)) or ((stream_out_V_dest_V_1_vld_in = ap_const_logic_0) and (stream_out_V_dest_V_1_ack_out = ap_const_logic_1) and (stream_out_V_dest_V_1_state = ap_const_lv2_3)))) then 
                    stream_out_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_dest_V_1_ack_out = ap_const_logic_0) and (stream_out_V_dest_V_1_state = ap_const_lv2_1)) or ((stream_out_V_dest_V_1_ack_out = ap_const_logic_0) and (stream_out_V_dest_V_1_vld_in = ap_const_logic_1) and (stream_out_V_dest_V_1_state = ap_const_lv2_3)))) then 
                    stream_out_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_dest_V_1_vld_in = ap_const_logic_0) and (stream_out_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_dest_V_1_ack_out = ap_const_logic_0) and (stream_out_V_dest_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_dest_V_1_state = ap_const_lv2_3)) or ((stream_out_V_dest_V_1_ack_out = ap_const_logic_1) and (stream_out_V_dest_V_1_state = ap_const_lv2_1)) or ((stream_out_V_dest_V_1_vld_in = ap_const_logic_1) and (stream_out_V_dest_V_1_state = ap_const_lv2_2)))) then 
                    stream_out_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_id_V_1_ack_out = ap_const_logic_1) and (stream_out_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_id_V_1_sel_rd <= not(stream_out_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_id_V_1_ack_in = ap_const_logic_1) and (stream_out_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_id_V_1_sel_wr <= not(stream_out_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_id_V_1_vld_in = ap_const_logic_0) and (stream_out_V_id_V_1_state = ap_const_lv2_2)) or ((stream_out_V_id_V_1_vld_in = ap_const_logic_0) and (stream_out_V_id_V_1_ack_out = ap_const_logic_1) and (stream_out_V_id_V_1_state = ap_const_lv2_3)))) then 
                    stream_out_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_id_V_1_ack_out = ap_const_logic_0) and (stream_out_V_id_V_1_state = ap_const_lv2_1)) or ((stream_out_V_id_V_1_ack_out = ap_const_logic_0) and (stream_out_V_id_V_1_vld_in = ap_const_logic_1) and (stream_out_V_id_V_1_state = ap_const_lv2_3)))) then 
                    stream_out_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_id_V_1_vld_in = ap_const_logic_0) and (stream_out_V_id_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_id_V_1_ack_out = ap_const_logic_0) and (stream_out_V_id_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_id_V_1_state = ap_const_lv2_3)) or ((stream_out_V_id_V_1_ack_out = ap_const_logic_1) and (stream_out_V_id_V_1_state = ap_const_lv2_1)) or ((stream_out_V_id_V_1_vld_in = ap_const_logic_1) and (stream_out_V_id_V_1_state = ap_const_lv2_2)))) then 
                    stream_out_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_keep_V_1_ack_out = ap_const_logic_1) and (stream_out_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_keep_V_1_sel_rd <= not(stream_out_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_keep_V_1_ack_in = ap_const_logic_1) and (stream_out_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_keep_V_1_sel_wr <= not(stream_out_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_keep_V_1_vld_in = ap_const_logic_0) and (stream_out_V_keep_V_1_state = ap_const_lv2_2)) or ((stream_out_V_keep_V_1_vld_in = ap_const_logic_0) and (stream_out_V_keep_V_1_ack_out = ap_const_logic_1) and (stream_out_V_keep_V_1_state = ap_const_lv2_3)))) then 
                    stream_out_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_keep_V_1_ack_out = ap_const_logic_0) and (stream_out_V_keep_V_1_state = ap_const_lv2_1)) or ((stream_out_V_keep_V_1_ack_out = ap_const_logic_0) and (stream_out_V_keep_V_1_vld_in = ap_const_logic_1) and (stream_out_V_keep_V_1_state = ap_const_lv2_3)))) then 
                    stream_out_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_keep_V_1_vld_in = ap_const_logic_0) and (stream_out_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_keep_V_1_ack_out = ap_const_logic_0) and (stream_out_V_keep_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_keep_V_1_state = ap_const_lv2_3)) or ((stream_out_V_keep_V_1_ack_out = ap_const_logic_1) and (stream_out_V_keep_V_1_state = ap_const_lv2_1)) or ((stream_out_V_keep_V_1_vld_in = ap_const_logic_1) and (stream_out_V_keep_V_1_state = ap_const_lv2_2)))) then 
                    stream_out_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_last_V_1_ack_out = ap_const_logic_1) and (stream_out_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_last_V_1_sel_rd <= not(stream_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_last_V_1_ack_in = ap_const_logic_1) and (stream_out_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_last_V_1_sel_wr <= not(stream_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_last_V_1_vld_in = ap_const_logic_0) and (stream_out_V_last_V_1_state = ap_const_lv2_2)) or ((stream_out_V_last_V_1_vld_in = ap_const_logic_0) and (stream_out_V_last_V_1_ack_out = ap_const_logic_1) and (stream_out_V_last_V_1_state = ap_const_lv2_3)))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_last_V_1_ack_out = ap_const_logic_0) and (stream_out_V_last_V_1_state = ap_const_lv2_1)) or ((stream_out_V_last_V_1_ack_out = ap_const_logic_0) and (stream_out_V_last_V_1_vld_in = ap_const_logic_1) and (stream_out_V_last_V_1_state = ap_const_lv2_3)))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_last_V_1_vld_in = ap_const_logic_0) and (stream_out_V_last_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_last_V_1_ack_out = ap_const_logic_0) and (stream_out_V_last_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_last_V_1_state = ap_const_lv2_3)) or ((stream_out_V_last_V_1_ack_out = ap_const_logic_1) and (stream_out_V_last_V_1_state = ap_const_lv2_1)) or ((stream_out_V_last_V_1_vld_in = ap_const_logic_1) and (stream_out_V_last_V_1_state = ap_const_lv2_2)))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_strb_V_1_ack_out = ap_const_logic_1) and (stream_out_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_strb_V_1_sel_rd <= not(stream_out_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_strb_V_1_ack_in = ap_const_logic_1) and (stream_out_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_strb_V_1_sel_wr <= not(stream_out_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_strb_V_1_vld_in = ap_const_logic_0) and (stream_out_V_strb_V_1_state = ap_const_lv2_2)) or ((stream_out_V_strb_V_1_vld_in = ap_const_logic_0) and (stream_out_V_strb_V_1_ack_out = ap_const_logic_1) and (stream_out_V_strb_V_1_state = ap_const_lv2_3)))) then 
                    stream_out_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_strb_V_1_ack_out = ap_const_logic_0) and (stream_out_V_strb_V_1_state = ap_const_lv2_1)) or ((stream_out_V_strb_V_1_ack_out = ap_const_logic_0) and (stream_out_V_strb_V_1_vld_in = ap_const_logic_1) and (stream_out_V_strb_V_1_state = ap_const_lv2_3)))) then 
                    stream_out_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_strb_V_1_vld_in = ap_const_logic_0) and (stream_out_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_strb_V_1_ack_out = ap_const_logic_0) and (stream_out_V_strb_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_strb_V_1_state = ap_const_lv2_3)) or ((stream_out_V_strb_V_1_ack_out = ap_const_logic_1) and (stream_out_V_strb_V_1_state = ap_const_lv2_1)) or ((stream_out_V_strb_V_1_vld_in = ap_const_logic_1) and (stream_out_V_strb_V_1_state = ap_const_lv2_2)))) then 
                    stream_out_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_user_V_1_ack_out = ap_const_logic_1) and (stream_out_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_user_V_1_sel_rd <= not(stream_out_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_user_V_1_ack_in = ap_const_logic_1) and (stream_out_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_user_V_1_sel_wr <= not(stream_out_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_user_V_1_vld_in = ap_const_logic_0) and (stream_out_V_user_V_1_state = ap_const_lv2_2)) or ((stream_out_V_user_V_1_vld_in = ap_const_logic_0) and (stream_out_V_user_V_1_ack_out = ap_const_logic_1) and (stream_out_V_user_V_1_state = ap_const_lv2_3)))) then 
                    stream_out_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_user_V_1_ack_out = ap_const_logic_0) and (stream_out_V_user_V_1_state = ap_const_lv2_1)) or ((stream_out_V_user_V_1_ack_out = ap_const_logic_0) and (stream_out_V_user_V_1_vld_in = ap_const_logic_1) and (stream_out_V_user_V_1_state = ap_const_lv2_3)))) then 
                    stream_out_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_user_V_1_vld_in = ap_const_logic_0) and (stream_out_V_user_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_user_V_1_ack_out = ap_const_logic_0) and (stream_out_V_user_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_user_V_1_state = ap_const_lv2_3)) or ((stream_out_V_user_V_1_ack_out = ap_const_logic_1) and (stream_out_V_user_V_1_state = ap_const_lv2_1)) or ((stream_out_V_user_V_1_vld_in = ap_const_logic_1) and (stream_out_V_user_V_1_state = ap_const_lv2_2)))) then 
                    stream_out_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    batch_load_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
                batch_load_reg_323 <= ap_const_lv31_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
                batch_load_reg_323 <= tmp_42_reg_1045;
            end if; 
        end if;
    end process;

    channel_last_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (tmp_s_reg_1152 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                channel_last_V <= tmp_last_V_1_reg_1166;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (tmp_5_reg_955 = ap_const_lv1_1) and (stream_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                channel_last_V <= stream_in_V_last_V_0_data_out;
            end if; 
        end if;
    end process;

    i_load_1_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_11_reg_985 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_load_1_reg_298 <= tmp_20_reg_989;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (stream_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                i_load_1_reg_298 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_load_2_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_22_reg_1050 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_load_2_reg_346 <= tmp_29_reg_1054;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state63) and (tmp_18_fu_745_p2 = ap_const_lv1_1))) then 
                i_load_2_reg_346 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    i_load_3_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state63) and (tmp_18_fu_745_p2 = ap_const_lv1_0))) then 
                i_load_3_reg_368 <= ap_const_lv31_0;
            elsif (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (tmp_24_fu_847_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                i_load_3_reg_368 <= tmp_32_fu_852_p2;
            end if; 
        end if;
    end process;

    i_load_reg_379_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_4_fu_507_p2 = ap_const_lv1_0))) then 
                i_load_reg_379 <= ap_const_lv31_0;
            elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (tmp_s_fu_883_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                i_load_reg_379 <= tmp_10_fu_888_p2;
            end if; 
        end if;
    end process;

    sum_load_1_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9) and (ap_reg_pp1_iter1_tmp_22_reg_1050 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage9_11001))) then 
                sum_load_1_reg_334 <= grp_fu_390_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state63) and (tmp_18_fu_745_p2 = ap_const_lv1_1))) then 
                sum_load_1_reg_334 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_load_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_11_reg_985 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sum_load_reg_286 <= ap_phi_mux_sum_load2_phi_fu_315_p4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (stream_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                sum_load_reg_286 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_35_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_36_fu_826_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                tmp_35_reg_357 <= tmp_41_fu_831_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
                tmp_35_reg_357 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    tmp_3_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state151)) then 
                tmp_3_reg_275 <= tmp_33_fu_873_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                tmp_3_reg_275 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_11_reg_985 = ap_const_lv1_1) and (tmp_51_fu_682_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                ap_phi_reg_pp0_iter0_sum_load2_reg_311 <= sum_load_reg_286;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001))) then
                ap_phi_reg_pp0_iter1_sum_load2_reg_311 <= ap_phi_reg_pp0_iter0_sum_load2_reg_311;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_reg_pp0_iter1_i_load_1_reg_298 <= i_load_1_reg_298;
                ap_reg_pp0_iter1_tmp_11_reg_985 <= tmp_11_reg_985;
                    i_load_1_cast_reg_980(30 downto 0) <= i_load_1_cast_fu_597_p1(30 downto 0);
                tmp_11_reg_985 <= tmp_11_fu_601_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                ap_reg_pp0_iter1_tmp_17_reg_1018 <= tmp_17_reg_1018;
                ap_reg_pp0_iter1_tmp_51_reg_1014 <= tmp_51_reg_1014;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                ap_reg_pp1_iter1_tmp_22_reg_1050 <= tmp_22_reg_1050;
                tmp_22_reg_1050 <= tmp_22_fu_760_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                ap_reg_pp2_iter10_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter9_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter10_tmp_36_reg_1093 <= ap_reg_pp2_iter9_tmp_36_reg_1093;
                ap_reg_pp2_iter11_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter10_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter11_tmp_36_reg_1093 <= ap_reg_pp2_iter10_tmp_36_reg_1093;
                ap_reg_pp2_iter12_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter11_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter12_tmp_36_reg_1093 <= ap_reg_pp2_iter11_tmp_36_reg_1093;
                ap_reg_pp2_iter13_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter12_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter13_tmp_36_reg_1093 <= ap_reg_pp2_iter12_tmp_36_reg_1093;
                ap_reg_pp2_iter14_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter13_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter14_tmp_36_reg_1093 <= ap_reg_pp2_iter13_tmp_36_reg_1093;
                ap_reg_pp2_iter15_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter14_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter15_tmp_36_reg_1093 <= ap_reg_pp2_iter14_tmp_36_reg_1093;
                ap_reg_pp2_iter16_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter15_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter16_tmp_36_reg_1093 <= ap_reg_pp2_iter15_tmp_36_reg_1093;
                ap_reg_pp2_iter17_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter16_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter17_tmp_36_reg_1093 <= ap_reg_pp2_iter16_tmp_36_reg_1093;
                ap_reg_pp2_iter18_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter17_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter18_tmp_36_reg_1093 <= ap_reg_pp2_iter17_tmp_36_reg_1093;
                ap_reg_pp2_iter19_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter18_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter19_tmp_36_reg_1093 <= ap_reg_pp2_iter18_tmp_36_reg_1093;
                ap_reg_pp2_iter20_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter19_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter20_tmp_36_reg_1093 <= ap_reg_pp2_iter19_tmp_36_reg_1093;
                ap_reg_pp2_iter21_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter20_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter21_tmp_36_reg_1093 <= ap_reg_pp2_iter20_tmp_36_reg_1093;
                ap_reg_pp2_iter22_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter21_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter22_tmp_36_reg_1093 <= ap_reg_pp2_iter21_tmp_36_reg_1093;
                ap_reg_pp2_iter23_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter22_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter23_tmp_36_reg_1093 <= ap_reg_pp2_iter22_tmp_36_reg_1093;
                ap_reg_pp2_iter24_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter23_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter24_tmp_36_reg_1093 <= ap_reg_pp2_iter23_tmp_36_reg_1093;
                ap_reg_pp2_iter25_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter24_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter25_tmp_36_reg_1093 <= ap_reg_pp2_iter24_tmp_36_reg_1093;
                ap_reg_pp2_iter26_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter25_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter26_tmp_36_reg_1093 <= ap_reg_pp2_iter25_tmp_36_reg_1093;
                ap_reg_pp2_iter27_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter26_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter27_tmp_36_reg_1093 <= ap_reg_pp2_iter26_tmp_36_reg_1093;
                ap_reg_pp2_iter2_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter1_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter2_tmp_36_reg_1093 <= ap_reg_pp2_iter1_tmp_36_reg_1093;
                ap_reg_pp2_iter3_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter2_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter3_tmp_36_reg_1093 <= ap_reg_pp2_iter2_tmp_36_reg_1093;
                ap_reg_pp2_iter4_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter3_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter4_tmp_36_reg_1093 <= ap_reg_pp2_iter3_tmp_36_reg_1093;
                ap_reg_pp2_iter5_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter4_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter5_tmp_36_reg_1093 <= ap_reg_pp2_iter4_tmp_36_reg_1093;
                ap_reg_pp2_iter6_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter5_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter6_tmp_36_reg_1093 <= ap_reg_pp2_iter5_tmp_36_reg_1093;
                ap_reg_pp2_iter7_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter6_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter7_tmp_36_reg_1093 <= ap_reg_pp2_iter6_tmp_36_reg_1093;
                ap_reg_pp2_iter8_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter7_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter8_tmp_36_reg_1093 <= ap_reg_pp2_iter7_tmp_36_reg_1093;
                ap_reg_pp2_iter9_state_vector_addr_3_reg_1102 <= ap_reg_pp2_iter8_state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter9_tmp_36_reg_1093 <= ap_reg_pp2_iter8_tmp_36_reg_1093;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                ap_reg_pp2_iter1_state_vector_addr_3_reg_1102 <= state_vector_addr_3_reg_1102;
                ap_reg_pp2_iter1_tmp_36_reg_1093 <= tmp_36_reg_1093;
                tmp_36_reg_1093 <= tmp_36_fu_826_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                ap_reg_pp3_iter1_tmp_24_reg_1123 <= tmp_24_reg_1123;
                tmp_24_reg_1123 <= tmp_24_fu_847_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                ap_reg_pp4_iter1_tmp_s_reg_1152 <= tmp_s_reg_1152;
                tmp_s_reg_1152 <= tmp_s_fu_883_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (tmp_5_reg_955 = ap_const_lv1_1) and (stream_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                channel_dest_V <= stream_in_V_dest_V_0_data_out;
                channel_id_V <= stream_in_V_id_V_0_data_out;
                channel_keep_V <= stream_in_V_keep_V_0_data_out;
                channel_strb_V <= stream_in_V_strb_V_0_data_out;
                channel_user_V <= stream_in_V_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                epsilon_read_reg_914 <= epsilon;
                kernelSize_read_reg_929 <= kernelSize;
                layerSize_read_reg_934 <= layerSize;
                vectorSize_read_reg_920 <= vectorSize;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                ip_index <= tmp_3_reg_275;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_reg_pp0_iter1_tmp_11_reg_985 = ap_const_lv1_1) and (tmp_51_reg_1014 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                notlhs1_reg_1023 <= notlhs1_fu_710_p2;
                notrhs2_reg_1028 <= notrhs2_fu_716_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (tmp_11_reg_985 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                notlhs5_reg_999 <= notlhs5_fu_645_p2;
                notrhs6_reg_1004 <= notrhs6_fu_651_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_11_fu_601_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                notlhs7_reg_994 <= notlhs7_fu_621_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state43) and (stream_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                notrhs8_reg_975 <= notrhs8_fu_591_p2;
                tmp_7_reg_969 <= tmp_7_fu_583_p1;
                tmp_data_V_reg_964 <= stream_in_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_enable_reg_pp2_iter19 = ap_const_logic_1) and (ap_reg_pp2_iter18_tmp_36_reg_1093 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_51_reg_1014 = ap_const_lv1_1) and (tmp_11_reg_985 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_452 <= grp_fu_390_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp2_iter9 = ap_const_logic_1) and (ap_reg_pp2_iter8_tmp_36_reg_1093 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_22_reg_1050 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)))) then
                reg_459 <= state_vector_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp2_iter9 = ap_const_logic_1) and (ap_reg_pp2_iter8_tmp_36_reg_1093 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage9) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_22_reg_1050 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage9_11001)))) then
                reg_465 <= grp_fu_398_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                reverse_epsilon_reg_941 <= grp_fu_406_p2;
                tmp_2_reg_946 <= tmp_2_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_36_fu_826_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                state_vector_addr_3_reg_1102 <= tmp_37_fu_837_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_data_V_0_load_A = ap_const_logic_1)) then
                stream_in_V_data_V_0_payload_A <= stream_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_data_V_0_load_B = ap_const_logic_1)) then
                stream_in_V_data_V_0_payload_B <= stream_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_dest_V_0_load_A = ap_const_logic_1)) then
                stream_in_V_dest_V_0_payload_A <= stream_in_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_dest_V_0_load_B = ap_const_logic_1)) then
                stream_in_V_dest_V_0_payload_B <= stream_in_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_id_V_0_load_A = ap_const_logic_1)) then
                stream_in_V_id_V_0_payload_A <= stream_in_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_id_V_0_load_B = ap_const_logic_1)) then
                stream_in_V_id_V_0_payload_B <= stream_in_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_keep_V_0_load_A = ap_const_logic_1)) then
                stream_in_V_keep_V_0_payload_A <= stream_in_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_keep_V_0_load_B = ap_const_logic_1)) then
                stream_in_V_keep_V_0_payload_B <= stream_in_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_last_V_0_load_A = ap_const_logic_1)) then
                stream_in_V_last_V_0_payload_A <= stream_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_last_V_0_load_B = ap_const_logic_1)) then
                stream_in_V_last_V_0_payload_B <= stream_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_strb_V_0_load_A = ap_const_logic_1)) then
                stream_in_V_strb_V_0_payload_A <= stream_in_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_strb_V_0_load_B = ap_const_logic_1)) then
                stream_in_V_strb_V_0_payload_B <= stream_in_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_user_V_0_load_A = ap_const_logic_1)) then
                stream_in_V_user_V_0_payload_A <= stream_in_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_user_V_0_load_B = ap_const_logic_1)) then
                stream_in_V_user_V_0_payload_B <= stream_in_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_data_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_data_V_1_payload_A <= stream_out_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_data_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_data_V_1_payload_B <= stream_out_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_dest_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_dest_V_1_payload_A <= channel_dest_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_dest_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_dest_V_1_payload_B <= channel_dest_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_id_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_id_V_1_payload_A <= channel_id_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_id_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_id_V_1_payload_B <= channel_id_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_keep_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_keep_V_1_payload_A <= channel_keep_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_keep_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_keep_V_1_payload_B <= channel_keep_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_last_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_last_V_1_payload_A <= stream_out_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_last_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_last_V_1_payload_B <= stream_out_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_strb_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_strb_V_1_payload_A <= channel_strb_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_strb_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_strb_V_1_payload_B <= channel_strb_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_user_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_user_V_1_payload_A <= channel_user_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_user_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_user_V_1_payload_B <= channel_user_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (tmp_36_reg_1093 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                temp_data_load_reg_1113 <= temp_data_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_51_fu_682_p2 = ap_const_lv1_1) and (tmp_11_reg_985 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                tmp_17_reg_1018 <= tmp_17_fu_688_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_20_reg_989 <= tmp_20_fu_606_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_22_fu_760_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    tmp_25_reg_1059(30 downto 0) <= tmp_25_fu_771_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_29_reg_1054 <= tmp_29_fu_765_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state117)) then
                tmp_34_reg_1088 <= grp_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp2_iter26_tmp_36_reg_1093 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                tmp_40_reg_1118 <= grp_fu_402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                tmp_42_reg_1045 <= tmp_42_fu_750_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_11_reg_985 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                tmp_51_reg_1014 <= tmp_51_fu_682_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_reg_pp0_iter1_tmp_51_reg_1014 = ap_const_lv1_1) and (ap_reg_pp0_iter1_tmp_11_reg_985 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                tmp_55_reg_1033 <= grp_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_4_fu_507_p2 = ap_const_lv1_1))) then
                tmp_5_reg_955 <= tmp_5_fu_512_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then
                tmp_60_reg_1079 <= grp_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_4_fu_507_p2 = ap_const_lv1_0))) then
                tmp_6_reg_959 <= tmp_6_fu_518_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (tmp_s_fu_883_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                tmp_last_V_1_reg_1166 <= tmp_last_V_1_fu_899_p2;
            end if;
        end if;
    end process;
    i_load_1_cast_reg_980(31) <= '0';
    tmp_25_reg_1059(63 downto 31) <= "000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, stream_in_V_data_V_0_vld_out, stream_out_V_data_V_1_ack_in, stream_out_V_keep_V_1_ack_in, stream_out_V_strb_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in, stream_out_V_id_V_1_ack_in, stream_out_V_dest_V_1_ack_in, ap_CS_fsm_state43, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter2, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage9, tmp_4_fu_507_p2, ap_CS_fsm_state42, tmp_11_fu_601_p2, tmp_18_fu_745_p2, ap_CS_fsm_state63, tmp_22_fu_760_p2, ap_enable_reg_pp1_iter1, tmp_61_fu_817_p2, ap_CS_fsm_state88, tmp_36_fu_826_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, tmp_24_fu_847_p2, ap_enable_reg_pp3_iter0, tmp_s_fu_883_p2, ap_enable_reg_pp4_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage5_subdone, ap_CS_fsm_pp0_stage5, ap_block_pp1_stage0_subdone, ap_block_pp1_stage9_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter27, ap_enable_reg_pp2_iter28, ap_block_pp3_stage0_subdone, ap_block_pp4_stage0_subdone, ap_CS_fsm_state155, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp1_stage1_subdone, ap_block_pp1_stage2_subdone, ap_block_pp1_stage3_subdone, ap_block_pp1_stage4_subdone, ap_block_pp1_stage5_subdone, ap_block_pp1_stage6_subdone, ap_block_pp1_stage7_subdone, ap_block_pp1_stage8_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state42) and (tmp_4_fu_507_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (stream_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_11_fu_601_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_11_fu_601_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state63) and (tmp_18_fu_745_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (tmp_22_fu_760_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (tmp_22_fu_760_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_pp1_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                end if;
            when ap_ST_fsm_pp1_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage4;
                end if;
            when ap_ST_fsm_pp1_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage5;
                end if;
            when ap_ST_fsm_pp1_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage6;
                end if;
            when ap_ST_fsm_pp1_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage7;
                end if;
            when ap_ST_fsm_pp1_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage8;
                end if;
            when ap_ST_fsm_pp1_stage9 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9) and (ap_const_boolean_0 = ap_block_pp1_stage9_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp1_stage9_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage9) and (ap_const_boolean_0 = ap_block_pp1_stage9_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage9;
                end if;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state88) and (tmp_61_fu_817_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state147;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (tmp_36_fu_826_p2 = ap_const_lv1_0))) and not(((ap_enable_reg_pp2_iter28 = ap_const_logic_1) and (ap_enable_reg_pp2_iter27 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter28 = ap_const_logic_1) and (ap_enable_reg_pp2_iter27 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (tmp_36_fu_826_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state147;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state147 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (tmp_24_fu_847_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (tmp_24_fu_847_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state151;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state151 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (tmp_s_fu_883_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (tmp_s_fu_883_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state155;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state155 => 
                if ((not(((stream_out_V_dest_V_1_ack_in = ap_const_logic_0) or (stream_out_V_id_V_1_ack_in = ap_const_logic_0) or (stream_out_V_last_V_1_ack_in = ap_const_logic_0) or (stream_out_V_user_V_1_ack_in = ap_const_logic_0) or (stream_out_V_strb_V_1_ack_in = ap_const_logic_0) or (stream_out_V_keep_V_1_ack_in = ap_const_logic_0) or (stream_out_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state155))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state155;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(43);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(44);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(53);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(54);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(45);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(46);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(47);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(48);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(49);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(50);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(51);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(52);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(57);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(58);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(59);
    ap_CS_fsm_pp1_stage3 <= ap_CS_fsm(60);
    ap_CS_fsm_pp1_stage4 <= ap_CS_fsm(61);
    ap_CS_fsm_pp1_stage5 <= ap_CS_fsm(62);
    ap_CS_fsm_pp1_stage6 <= ap_CS_fsm(63);
    ap_CS_fsm_pp1_stage7 <= ap_CS_fsm(64);
    ap_CS_fsm_pp1_stage8 <= ap_CS_fsm(65);
    ap_CS_fsm_pp1_stage9 <= ap_CS_fsm(66);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(101);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(103);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(105);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state117 <= ap_CS_fsm(100);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state147 <= ap_CS_fsm(102);
    ap_CS_fsm_state151 <= ap_CS_fsm(104);
    ap_CS_fsm_state155 <= ap_CS_fsm(106);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state62 <= ap_CS_fsm(55);
    ap_CS_fsm_state63 <= ap_CS_fsm(56);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state84 <= ap_CS_fsm(67);
    ap_CS_fsm_state85 <= ap_CS_fsm(68);
    ap_CS_fsm_state86 <= ap_CS_fsm(69);
    ap_CS_fsm_state87 <= ap_CS_fsm(70);
    ap_CS_fsm_state88 <= ap_CS_fsm(71);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(stream_in_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, tmp_11_reg_985)
    begin
                ap_block_pp0_stage3_11001 <= ((stream_in_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_11_reg_985 = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(stream_in_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, tmp_11_reg_985)
    begin
                ap_block_pp0_stage3_subdone <= ((stream_in_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_11_reg_985 = ap_const_lv1_1));
    end process;

        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage2_11001_assign_proc : process(stream_in_V_data_V_0_vld_out, ap_enable_reg_pp1_iter0, tmp_22_reg_1050)
    begin
                ap_block_pp1_stage2_11001 <= ((stream_in_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_22_reg_1050 = ap_const_lv1_1));
    end process;


    ap_block_pp1_stage2_subdone_assign_proc : process(stream_in_V_data_V_0_vld_out, ap_enable_reg_pp1_iter0, tmp_22_reg_1050)
    begin
                ap_block_pp1_stage2_subdone <= ((stream_in_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (tmp_22_reg_1050 = ap_const_lv1_1));
    end process;

        ap_block_pp1_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_block_state149_io, ap_block_state150_io)
    begin
                ap_block_pp3_stage0_11001 <= (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state150_io)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state149_io)));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_block_state149_io, ap_block_state150_io)
    begin
                ap_block_pp3_stage0_subdone <= (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state150_io)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state149_io)));
    end process;

        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage0_11001_assign_proc : process(ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter2, ap_block_state153_io, ap_block_state154_io)
    begin
                ap_block_pp4_stage0_11001 <= (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state154_io)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state153_io)));
    end process;


    ap_block_pp4_stage0_subdone_assign_proc : process(ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter2, ap_block_state153_io, ap_block_state154_io)
    begin
                ap_block_pp4_stage0_subdone <= (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state154_io)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state153_io)));
    end process;

        ap_block_state118_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state119_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state120_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state121_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state122_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state123_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state124_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state125_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state126_pp2_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state127_pp2_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state128_pp2_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state129_pp2_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state130_pp2_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state131_pp2_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state132_pp2_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state133_pp2_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state134_pp2_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state135_pp2_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state136_pp2_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state137_pp2_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state138_pp2_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state139_pp2_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state140_pp2_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state141_pp2_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state142_pp2_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state143_pp2_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state144_pp2_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state145_pp2_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state146_pp2_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state148_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state149_io_assign_proc : process(stream_out_V_data_V_1_ack_in, tmp_24_reg_1123)
    begin
                ap_block_state149_io <= ((stream_out_V_data_V_1_ack_in = ap_const_logic_0) and (tmp_24_reg_1123 = ap_const_lv1_1));
    end process;

        ap_block_state149_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state150_io_assign_proc : process(stream_out_V_data_V_1_ack_in, ap_reg_pp3_iter1_tmp_24_reg_1123)
    begin
                ap_block_state150_io <= ((stream_out_V_data_V_1_ack_in = ap_const_logic_0) and (ap_reg_pp3_iter1_tmp_24_reg_1123 = ap_const_lv1_1));
    end process;

        ap_block_state150_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state152_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state153_io_assign_proc : process(stream_out_V_data_V_1_ack_in, tmp_s_reg_1152)
    begin
                ap_block_state153_io <= ((stream_out_V_data_V_1_ack_in = ap_const_logic_0) and (tmp_s_reg_1152 = ap_const_lv1_1));
    end process;

        ap_block_state153_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state154_io_assign_proc : process(stream_out_V_data_V_1_ack_in, ap_reg_pp4_iter1_tmp_s_reg_1152)
    begin
                ap_block_state154_io <= ((stream_out_V_data_V_1_ack_in = ap_const_logic_0) and (ap_reg_pp4_iter1_tmp_s_reg_1152 = ap_const_lv1_1));
    end process;

        ap_block_state154_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state155_assign_proc : process(stream_out_V_data_V_1_ack_in, stream_out_V_keep_V_1_ack_in, stream_out_V_strb_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in, stream_out_V_id_V_1_ack_in, stream_out_V_dest_V_1_ack_in)
    begin
                ap_block_state155 <= ((stream_out_V_dest_V_1_ack_in = ap_const_logic_0) or (stream_out_V_id_V_1_ack_in = ap_const_logic_0) or (stream_out_V_last_V_1_ack_in = ap_const_logic_0) or (stream_out_V_user_V_1_ack_in = ap_const_logic_0) or (stream_out_V_strb_V_1_ack_in = ap_const_logic_0) or (stream_out_V_keep_V_1_ack_in = ap_const_logic_0) or (stream_out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state44_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state47_pp0_stage3_iter0_assign_proc : process(stream_in_V_data_V_0_vld_out, tmp_11_reg_985)
    begin
                ap_block_state47_pp0_stage3_iter0 <= ((stream_in_V_data_V_0_vld_out = ap_const_logic_0) and (tmp_11_reg_985 = ap_const_lv1_1));
    end process;

        ap_block_state48_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state66_pp1_stage2_iter0_assign_proc : process(stream_in_V_data_V_0_vld_out, tmp_22_reg_1050)
    begin
                ap_block_state66_pp1_stage2_iter0 <= ((stream_in_V_data_V_0_vld_out = ap_const_logic_0) and (tmp_22_reg_1050 = ap_const_lv1_1));
    end process;

        ap_block_state67_pp1_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp1_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp1_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state70_pp1_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp1_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp1_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp1_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp1_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp1_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp1_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp1_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp1_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state81_pp1_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp1_stage8_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp1_stage9_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state44_assign_proc : process(tmp_11_fu_601_p2)
    begin
        if ((tmp_11_fu_601_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state44 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state44 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state64_assign_proc : process(tmp_22_fu_760_p2)
    begin
        if ((tmp_22_fu_760_p2 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state64 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state64 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state118_assign_proc : process(tmp_36_fu_826_p2)
    begin
        if ((tmp_36_fu_826_p2 = ap_const_lv1_0)) then 
            ap_condition_pp2_exit_iter0_state118 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state118 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state148_assign_proc : process(tmp_24_fu_847_p2)
    begin
        if ((tmp_24_fu_847_p2 = ap_const_lv1_0)) then 
            ap_condition_pp3_exit_iter0_state148 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state148 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state152_assign_proc : process(tmp_s_fu_883_p2)
    begin
        if ((tmp_s_fu_883_p2 = ap_const_lv1_0)) then 
            ap_condition_pp4_exit_iter0_state152 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state152 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(stream_out_V_data_V_1_ack_in, stream_out_V_keep_V_1_ack_in, stream_out_V_strb_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in, stream_out_V_id_V_1_ack_in, stream_out_V_dest_V_1_ack_in, ap_CS_fsm_state155)
    begin
        if ((not(((stream_out_V_dest_V_1_ack_in = ap_const_logic_0) or (stream_out_V_id_V_1_ack_in = ap_const_logic_0) or (stream_out_V_last_V_1_ack_in = ap_const_logic_0) or (stream_out_V_user_V_1_ack_in = ap_const_logic_0) or (stream_out_V_strb_V_1_ack_in = ap_const_logic_0) or (stream_out_V_keep_V_1_ack_in = ap_const_logic_0) or (stream_out_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state155))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter19, ap_enable_reg_pp2_iter9, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter10, ap_enable_reg_pp2_iter11, ap_enable_reg_pp2_iter12, ap_enable_reg_pp2_iter13, ap_enable_reg_pp2_iter14, ap_enable_reg_pp2_iter15, ap_enable_reg_pp2_iter16, ap_enable_reg_pp2_iter17, ap_enable_reg_pp2_iter18, ap_enable_reg_pp2_iter20, ap_enable_reg_pp2_iter21, ap_enable_reg_pp2_iter22, ap_enable_reg_pp2_iter23, ap_enable_reg_pp2_iter24, ap_enable_reg_pp2_iter25, ap_enable_reg_pp2_iter26, ap_enable_reg_pp2_iter27, ap_enable_reg_pp2_iter28)
    begin
        if (((ap_enable_reg_pp2_iter28 = ap_const_logic_0) and (ap_enable_reg_pp2_iter27 = ap_const_logic_0) and (ap_enable_reg_pp2_iter26 = ap_const_logic_0) and (ap_enable_reg_pp2_iter25 = ap_const_logic_0) and (ap_enable_reg_pp2_iter24 = ap_const_logic_0) and (ap_enable_reg_pp2_iter23 = ap_const_logic_0) and (ap_enable_reg_pp2_iter22 = ap_const_logic_0) and (ap_enable_reg_pp2_iter21 = ap_const_logic_0) and (ap_enable_reg_pp2_iter20 = ap_const_logic_0) and (ap_enable_reg_pp2_iter18 = ap_const_logic_0) and (ap_enable_reg_pp2_iter17 = ap_const_logic_0) and (ap_enable_reg_pp2_iter16 = ap_const_logic_0) and (ap_enable_reg_pp2_iter15 = ap_const_logic_0) and (ap_enable_reg_pp2_iter14 = ap_const_logic_0) and (ap_enable_reg_pp2_iter13 = ap_const_logic_0) and (ap_enable_reg_pp2_iter12 = ap_const_logic_0) and (ap_enable_reg_pp2_iter11 = ap_const_logic_0) and (ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_enable_reg_pp2_iter19 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter0)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_load_1_phi_fu_303_p4_assign_proc : process(tmp_11_reg_985, i_load_1_reg_298, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_20_reg_989, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_11_reg_985 = ap_const_lv1_1))) then 
            ap_phi_mux_i_load_1_phi_fu_303_p4 <= tmp_20_reg_989;
        else 
            ap_phi_mux_i_load_1_phi_fu_303_p4 <= i_load_1_reg_298;
        end if; 
    end process;


    ap_phi_mux_i_load_2_phi_fu_350_p4_assign_proc : process(tmp_22_reg_1050, i_load_2_reg_346, ap_CS_fsm_pp1_stage0, tmp_29_reg_1054, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (tmp_22_reg_1050 = ap_const_lv1_1))) then 
            ap_phi_mux_i_load_2_phi_fu_350_p4 <= tmp_29_reg_1054;
        else 
            ap_phi_mux_i_load_2_phi_fu_350_p4 <= i_load_2_reg_346;
        end if; 
    end process;


    ap_phi_mux_sum_load2_phi_fu_315_p4_assign_proc : process(tmp_11_reg_985, ap_CS_fsm_pp0_stage0, grp_fu_390_p2, ap_enable_reg_pp0_iter1, tmp_51_reg_1014, ap_block_pp0_stage0, ap_phi_reg_pp0_iter1_sum_load2_reg_311)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_51_reg_1014 = ap_const_lv1_1) and (tmp_11_reg_985 = ap_const_lv1_1))) then 
            ap_phi_mux_sum_load2_phi_fu_315_p4 <= grp_fu_390_p2;
        else 
            ap_phi_mux_sum_load2_phi_fu_315_p4 <= ap_phi_reg_pp0_iter1_sum_load2_reg_311;
        end if; 
    end process;


    ap_phi_mux_sum_load_phi_fu_290_p4_assign_proc : process(tmp_11_reg_985, sum_load_reg_286, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_phi_mux_sum_load2_phi_fu_315_p4, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_11_reg_985 = ap_const_lv1_1))) then 
            ap_phi_mux_sum_load_phi_fu_290_p4 <= ap_phi_mux_sum_load2_phi_fu_315_p4;
        else 
            ap_phi_mux_sum_load_phi_fu_290_p4 <= sum_load_reg_286;
        end if; 
    end process;


    ap_predicate_op289_fadd_state47_assign_proc : process(tmp_11_reg_985, tmp_51_fu_682_p2)
    begin
                ap_predicate_op289_fadd_state47 <= ((tmp_51_fu_682_p2 = ap_const_lv1_1) and (tmp_11_reg_985 = ap_const_lv1_1));
    end process;


    ap_predicate_op309_fcmp_state57_assign_proc : process(tmp_51_reg_1014, ap_reg_pp0_iter1_tmp_11_reg_985)
    begin
                ap_predicate_op309_fcmp_state57 <= ((ap_reg_pp0_iter1_tmp_11_reg_985 = ap_const_lv1_1) and (tmp_51_reg_1014 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(stream_out_V_data_V_1_ack_in, stream_out_V_keep_V_1_ack_in, stream_out_V_strb_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in, stream_out_V_id_V_1_ack_in, stream_out_V_dest_V_1_ack_in, ap_CS_fsm_state155)
    begin
        if ((not(((stream_out_V_dest_V_1_ack_in = ap_const_logic_0) or (stream_out_V_id_V_1_ack_in = ap_const_logic_0) or (stream_out_V_last_V_1_ack_in = ap_const_logic_0) or (stream_out_V_user_V_1_ack_in = ap_const_logic_0) or (stream_out_V_strb_V_1_ack_in = ap_const_logic_0) or (stream_out_V_keep_V_1_ack_in = ap_const_logic_0) or (stream_out_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state155))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    batch_load_cast_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(batch_load_reg_323),32));

    grp_fu_390_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state11, ap_block_pp2_stage0_11001, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_pp1_stage9, ap_block_pp1_stage9_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_block_pp1_stage2_11001, ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage11_11001, ap_block_pp0_stage5_11001, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage10, ap_block_pp1_stage3_11001, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage4_11001, ap_CS_fsm_pp1_stage4, ap_block_pp1_stage5_11001, ap_CS_fsm_pp1_stage5, ap_block_pp1_stage6_11001, ap_CS_fsm_pp1_stage6, ap_block_pp1_stage7_11001, ap_CS_fsm_pp1_stage7, ap_block_pp1_stage8_11001, ap_CS_fsm_pp1_stage8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_boolean_0 = ap_block_pp1_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8)) or ((ap_const_boolean_0 = ap_block_pp1_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7)) or ((ap_const_boolean_0 = ap_block_pp1_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6)) or ((ap_const_boolean_0 = ap_block_pp1_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5)) or ((ap_const_boolean_0 = ap_block_pp1_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4)) or ((ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage9) and (ap_const_boolean_0 = ap_block_pp1_stage9_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)))) then 
            grp_fu_390_ce <= ap_const_logic_1;
        else 
            grp_fu_390_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_390_p0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, ap_block_pp0_stage3, sum_load_reg_286, sum_load_1_reg_334, reg_459, epsilon_read_reg_914, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter10, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_CS_fsm_state2)
    begin
        if (((ap_enable_reg_pp2_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_fu_390_p0 <= reg_459;
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            grp_fu_390_p0 <= sum_load_1_reg_334;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_fu_390_p0 <= sum_load_reg_286;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_390_p0 <= epsilon_read_reg_914;
        else 
            grp_fu_390_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_390_p1_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, ap_block_pp0_stage3, reg_465, tmp_12_fu_657_p1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter10, ap_block_pp1_stage0, ap_block_pp2_stage0, ap_CS_fsm_state2)
    begin
        if ((((ap_enable_reg_pp2_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0)))) then 
            grp_fu_390_p1 <= reg_465;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            grp_fu_390_p1 <= tmp_12_fu_657_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_390_p1 <= ap_const_lv32_3F800000;
        else 
            grp_fu_390_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_398_ce_assign_proc : process(ap_CS_fsm_pp1_stage2, ap_block_pp2_stage0_11001, ap_CS_fsm_pp1_stage9, ap_block_pp1_stage9_11001, ap_block_pp1_stage2_11001, ap_CS_fsm_pp2_stage0, ap_block_pp1_stage3_11001, ap_CS_fsm_pp1_stage3, ap_block_pp1_stage4_11001, ap_CS_fsm_pp1_stage4, ap_block_pp1_stage5_11001, ap_CS_fsm_pp1_stage5, ap_block_pp1_stage6_11001, ap_CS_fsm_pp1_stage6, ap_block_pp1_stage7_11001, ap_CS_fsm_pp1_stage7, ap_block_pp1_stage8_11001, ap_CS_fsm_pp1_stage8)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage8)) or ((ap_const_boolean_0 = ap_block_pp1_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage7)) or ((ap_const_boolean_0 = ap_block_pp1_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage6)) or ((ap_const_boolean_0 = ap_block_pp1_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage5)) or ((ap_const_boolean_0 = ap_block_pp1_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage4)) or ((ap_const_boolean_0 = ap_block_pp1_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage9) and (ap_const_boolean_0 = ap_block_pp1_stage9_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)))) then 
            grp_fu_398_ce <= ap_const_logic_1;
        else 
            grp_fu_398_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_398_p0_assign_proc : process(ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_block_pp1_stage2, reg_459, temp_data_load_reg_1113, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_fu_398_p0 <= temp_data_load_reg_1113;
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2))) then 
            grp_fu_398_p0 <= reg_459;
        else 
            grp_fu_398_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_398_p1_assign_proc : process(ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_block_pp1_stage2, tmp_26_fu_776_p1, tmp_34_reg_1088, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            grp_fu_398_p1 <= tmp_34_reg_1088;
        elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_const_boolean_0 = ap_block_pp1_stage2))) then 
            grp_fu_398_p1 <= tmp_26_fu_776_p1;
        else 
            grp_fu_398_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_406_p0_assign_proc : process(epsilon_read_reg_914, ap_CS_fsm_state88, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_fu_406_p0 <= epsilon_read_reg_914;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_406_p0 <= ap_const_lv32_3F800000;
        else 
            grp_fu_406_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_406_p1_assign_proc : process(sum_load_1_reg_334, reg_452, ap_CS_fsm_state88, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_fu_406_p1 <= sum_load_1_reg_334;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_406_p1 <= reg_452;
        else 
            grp_fu_406_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_412_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_state87, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_412_ce <= ap_const_logic_1;
        else 
            grp_fu_412_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_412_opcode_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_11_fu_601_p2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_state84, ap_predicate_op309_fcmp_state57, ap_block_pp0_stage0_00001, ap_block_pp0_stage1_00001)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            grp_fu_412_opcode <= ap_const_lv5_2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_predicate_op309_fcmp_state57 = ap_const_boolean_1))) then 
            grp_fu_412_opcode <= ap_const_lv5_5;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_11_fu_601_p2 = ap_const_lv1_1))) then 
            grp_fu_412_opcode <= ap_const_lv5_4;
        else 
            grp_fu_412_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_412_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, sum_load_1_reg_334, ap_enable_reg_pp0_iter1, tmp_7_reg_969, ap_CS_fsm_pp0_stage1, ap_phi_mux_sum_load_phi_fu_290_p4, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_CS_fsm_state84)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            grp_fu_412_p0 <= sum_load_1_reg_334;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_412_p0 <= tmp_7_reg_969;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_412_p0 <= ap_phi_mux_sum_load_phi_fu_290_p4;
        else 
            grp_fu_412_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_412_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, reg_452, ap_enable_reg_pp0_iter1, tmp_7_reg_969, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_CS_fsm_state84)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            grp_fu_412_p1 <= ap_const_lv32_1E3CE508;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_412_p1 <= reg_452;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_412_p1 <= tmp_7_reg_969;
        else 
            grp_fu_412_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_load_1_cast_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_load_1_phi_fu_303_p4),32));
    i_load_2_cast_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_load_2_phi_fu_350_p4),32));
    i_load_3_cast_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_load_3_reg_368),32));
    i_load_cast_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_load_reg_379),32));
    notlhs1_fu_710_p2 <= "0" when (tmp_52_fu_696_p4 = ap_const_lv8_FF) else "1";
    notlhs5_fu_645_p2 <= "0" when (tmp_16_fu_631_p4 = ap_const_lv8_FF) else "1";
    notlhs7_fu_621_p2 <= "0" when (tmp_30_fu_612_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_799_p2 <= "0" when (tmp_57_fu_785_p4 = ap_const_lv8_FF) else "1";
    notrhs2_fu_716_p2 <= "1" when (tmp_53_fu_706_p1 = ap_const_lv23_0) else "0";
    notrhs6_fu_651_p2 <= "1" when (tmp_46_fu_641_p1 = ap_const_lv23_0) else "0";
    notrhs8_fu_591_p2 <= "1" when (tmp_21_fu_587_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_805_p2 <= "1" when (tmp_58_fu_795_p1 = ap_const_lv23_0) else "0";
    or_cond_fu_731_p2 <= (tmp_56_fu_726_p2 or ap_reg_pp0_iter1_tmp_17_reg_1018);

    spike_matrix_address0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp0_stage5, tmp_19_fu_736_p1, ap_block_pp0_stage5, tmp_8_fu_894_p1)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            spike_matrix_address0 <= tmp_8_fu_894_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5))) then 
            spike_matrix_address0 <= tmp_19_fu_736_p1(12 - 1 downto 0);
        else 
            spike_matrix_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    spike_matrix_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp0_iter1, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)))) then 
            spike_matrix_ce0 <= ap_const_logic_1;
        else 
            spike_matrix_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    spike_matrix_we0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_tmp_51_reg_1014, ap_CS_fsm_pp0_stage5, or_cond_fu_731_p2, ap_block_pp0_stage5_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (or_cond_fu_731_p2 = ap_const_lv1_1) and (ap_reg_pp0_iter1_tmp_51_reg_1014 = ap_const_lv1_1))) then 
            spike_matrix_we0 <= ap_const_logic_1;
        else 
            spike_matrix_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_vector_address0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, ap_block_pp0_stage3, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage0, tmp_25_fu_771_p1, ap_reg_pp2_iter7_state_vector_addr_3_reg_1102, ap_enable_reg_pp2_iter8, ap_block_pp1_stage0, tmp_13_fu_663_p1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            state_vector_address0 <= ap_reg_pp2_iter7_state_vector_addr_3_reg_1102;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            state_vector_address0 <= tmp_25_fu_771_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3))) then 
            state_vector_address0 <= tmp_13_fu_663_p1(10 - 1 downto 0);
        else 
            state_vector_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    state_vector_address1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0, ap_reg_pp2_iter27_state_vector_addr_3_reg_1102, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter28, ap_block_pp2_stage0, tmp_31_fu_858_p1)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            state_vector_address1 <= tmp_31_fu_858_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter28 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            state_vector_address1 <= ap_reg_pp2_iter27_state_vector_addr_3_reg_1102;
        else 
            state_vector_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    state_vector_ce0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_block_pp2_stage0_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp2_iter8)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp2_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            state_vector_ce0 <= ap_const_logic_1;
        else 
            state_vector_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_vector_ce1_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_enable_reg_pp2_iter28)
    begin
        if ((((ap_enable_reg_pp2_iter28 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            state_vector_ce1 <= ap_const_logic_1;
        else 
            state_vector_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    state_vector_d0 <= stream_in_V_data_V_0_data_out;

    state_vector_we0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, tmp_11_reg_985, ap_block_pp0_stage3_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_11_reg_985 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
            state_vector_we0 <= ap_const_logic_1;
        else 
            state_vector_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_vector_we1_assign_proc : process(ap_block_pp2_stage0_11001, ap_reg_pp2_iter27_tmp_36_reg_1093, ap_enable_reg_pp2_iter28)
    begin
        if (((ap_enable_reg_pp2_iter28 = ap_const_logic_1) and (ap_reg_pp2_iter27_tmp_36_reg_1093 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            state_vector_we1 <= ap_const_logic_1;
        else 
            state_vector_we1 <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_TDATA_blk_n_assign_proc : process(stream_in_V_data_V_0_state, ap_CS_fsm_state43, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, ap_block_pp0_stage3, tmp_11_reg_985, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, ap_block_pp1_stage2, tmp_22_reg_1050)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_11_reg_985 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (tmp_22_reg_1050 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage2)))) then 
            stream_in_TDATA_blk_n <= stream_in_V_data_V_0_state(0);
        else 
            stream_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_in_TREADY <= stream_in_V_dest_V_0_state(1);
    stream_in_V_data_V_0_ack_in <= stream_in_V_data_V_0_state(1);

    stream_in_V_data_V_0_ack_out_assign_proc : process(stream_in_V_data_V_0_vld_out, ap_CS_fsm_state43, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, tmp_11_reg_985, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, tmp_22_reg_1050, ap_block_pp0_stage3_11001, ap_block_pp1_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_11_reg_985 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (stream_in_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (tmp_22_reg_1050 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)))) then 
            stream_in_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_data_V_0_data_out_assign_proc : process(stream_in_V_data_V_0_payload_A, stream_in_V_data_V_0_payload_B, stream_in_V_data_V_0_sel)
    begin
        if ((stream_in_V_data_V_0_sel = ap_const_logic_1)) then 
            stream_in_V_data_V_0_data_out <= stream_in_V_data_V_0_payload_B;
        else 
            stream_in_V_data_V_0_data_out <= stream_in_V_data_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_data_V_0_load_A <= (stream_in_V_data_V_0_state_cmp_full and not(stream_in_V_data_V_0_sel_wr));
    stream_in_V_data_V_0_load_B <= (stream_in_V_data_V_0_state_cmp_full and stream_in_V_data_V_0_sel_wr);
    stream_in_V_data_V_0_sel <= stream_in_V_data_V_0_sel_rd;
    stream_in_V_data_V_0_state_cmp_full <= '0' when (stream_in_V_data_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_data_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_data_V_0_vld_out <= stream_in_V_data_V_0_state(0);
    stream_in_V_dest_V_0_ack_in <= stream_in_V_dest_V_0_state(1);

    stream_in_V_dest_V_0_ack_out_assign_proc : process(stream_in_V_data_V_0_vld_out, ap_CS_fsm_state43, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, tmp_11_reg_985, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, tmp_22_reg_1050, ap_block_pp0_stage3_11001, ap_block_pp1_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_11_reg_985 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (stream_in_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (tmp_22_reg_1050 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)))) then 
            stream_in_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_dest_V_0_data_out_assign_proc : process(stream_in_V_dest_V_0_payload_A, stream_in_V_dest_V_0_payload_B, stream_in_V_dest_V_0_sel)
    begin
        if ((stream_in_V_dest_V_0_sel = ap_const_logic_1)) then 
            stream_in_V_dest_V_0_data_out <= stream_in_V_dest_V_0_payload_B;
        else 
            stream_in_V_dest_V_0_data_out <= stream_in_V_dest_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_dest_V_0_load_A <= (stream_in_V_dest_V_0_state_cmp_full and not(stream_in_V_dest_V_0_sel_wr));
    stream_in_V_dest_V_0_load_B <= (stream_in_V_dest_V_0_state_cmp_full and stream_in_V_dest_V_0_sel_wr);
    stream_in_V_dest_V_0_sel <= stream_in_V_dest_V_0_sel_rd;
    stream_in_V_dest_V_0_state_cmp_full <= '0' when (stream_in_V_dest_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_dest_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_dest_V_0_vld_out <= stream_in_V_dest_V_0_state(0);
    stream_in_V_id_V_0_ack_in <= stream_in_V_id_V_0_state(1);

    stream_in_V_id_V_0_ack_out_assign_proc : process(stream_in_V_data_V_0_vld_out, ap_CS_fsm_state43, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, tmp_11_reg_985, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, tmp_22_reg_1050, ap_block_pp0_stage3_11001, ap_block_pp1_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_11_reg_985 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (stream_in_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (tmp_22_reg_1050 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)))) then 
            stream_in_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_id_V_0_data_out_assign_proc : process(stream_in_V_id_V_0_payload_A, stream_in_V_id_V_0_payload_B, stream_in_V_id_V_0_sel)
    begin
        if ((stream_in_V_id_V_0_sel = ap_const_logic_1)) then 
            stream_in_V_id_V_0_data_out <= stream_in_V_id_V_0_payload_B;
        else 
            stream_in_V_id_V_0_data_out <= stream_in_V_id_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_id_V_0_load_A <= (stream_in_V_id_V_0_state_cmp_full and not(stream_in_V_id_V_0_sel_wr));
    stream_in_V_id_V_0_load_B <= (stream_in_V_id_V_0_state_cmp_full and stream_in_V_id_V_0_sel_wr);
    stream_in_V_id_V_0_sel <= stream_in_V_id_V_0_sel_rd;
    stream_in_V_id_V_0_state_cmp_full <= '0' when (stream_in_V_id_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_id_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_id_V_0_vld_out <= stream_in_V_id_V_0_state(0);
    stream_in_V_keep_V_0_ack_in <= stream_in_V_keep_V_0_state(1);

    stream_in_V_keep_V_0_ack_out_assign_proc : process(stream_in_V_data_V_0_vld_out, ap_CS_fsm_state43, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, tmp_11_reg_985, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, tmp_22_reg_1050, ap_block_pp0_stage3_11001, ap_block_pp1_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_11_reg_985 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (stream_in_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (tmp_22_reg_1050 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)))) then 
            stream_in_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_keep_V_0_data_out_assign_proc : process(stream_in_V_keep_V_0_payload_A, stream_in_V_keep_V_0_payload_B, stream_in_V_keep_V_0_sel)
    begin
        if ((stream_in_V_keep_V_0_sel = ap_const_logic_1)) then 
            stream_in_V_keep_V_0_data_out <= stream_in_V_keep_V_0_payload_B;
        else 
            stream_in_V_keep_V_0_data_out <= stream_in_V_keep_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_keep_V_0_load_A <= (stream_in_V_keep_V_0_state_cmp_full and not(stream_in_V_keep_V_0_sel_wr));
    stream_in_V_keep_V_0_load_B <= (stream_in_V_keep_V_0_state_cmp_full and stream_in_V_keep_V_0_sel_wr);
    stream_in_V_keep_V_0_sel <= stream_in_V_keep_V_0_sel_rd;
    stream_in_V_keep_V_0_state_cmp_full <= '0' when (stream_in_V_keep_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_keep_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_keep_V_0_vld_out <= stream_in_V_keep_V_0_state(0);
    stream_in_V_last_V_0_ack_in <= stream_in_V_last_V_0_state(1);

    stream_in_V_last_V_0_ack_out_assign_proc : process(stream_in_V_data_V_0_vld_out, ap_CS_fsm_state43, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, tmp_11_reg_985, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, tmp_22_reg_1050, ap_block_pp0_stage3_11001, ap_block_pp1_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_11_reg_985 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (stream_in_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (tmp_22_reg_1050 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)))) then 
            stream_in_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_last_V_0_data_out_assign_proc : process(stream_in_V_last_V_0_payload_A, stream_in_V_last_V_0_payload_B, stream_in_V_last_V_0_sel)
    begin
        if ((stream_in_V_last_V_0_sel = ap_const_logic_1)) then 
            stream_in_V_last_V_0_data_out <= stream_in_V_last_V_0_payload_B;
        else 
            stream_in_V_last_V_0_data_out <= stream_in_V_last_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_last_V_0_load_A <= (stream_in_V_last_V_0_state_cmp_full and not(stream_in_V_last_V_0_sel_wr));
    stream_in_V_last_V_0_load_B <= (stream_in_V_last_V_0_state_cmp_full and stream_in_V_last_V_0_sel_wr);
    stream_in_V_last_V_0_sel <= stream_in_V_last_V_0_sel_rd;
    stream_in_V_last_V_0_state_cmp_full <= '0' when (stream_in_V_last_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_last_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_last_V_0_vld_out <= stream_in_V_last_V_0_state(0);
    stream_in_V_strb_V_0_ack_in <= stream_in_V_strb_V_0_state(1);

    stream_in_V_strb_V_0_ack_out_assign_proc : process(stream_in_V_data_V_0_vld_out, ap_CS_fsm_state43, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, tmp_11_reg_985, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, tmp_22_reg_1050, ap_block_pp0_stage3_11001, ap_block_pp1_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_11_reg_985 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (stream_in_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (tmp_22_reg_1050 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)))) then 
            stream_in_V_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_strb_V_0_data_out_assign_proc : process(stream_in_V_strb_V_0_payload_A, stream_in_V_strb_V_0_payload_B, stream_in_V_strb_V_0_sel)
    begin
        if ((stream_in_V_strb_V_0_sel = ap_const_logic_1)) then 
            stream_in_V_strb_V_0_data_out <= stream_in_V_strb_V_0_payload_B;
        else 
            stream_in_V_strb_V_0_data_out <= stream_in_V_strb_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_strb_V_0_load_A <= (stream_in_V_strb_V_0_state_cmp_full and not(stream_in_V_strb_V_0_sel_wr));
    stream_in_V_strb_V_0_load_B <= (stream_in_V_strb_V_0_state_cmp_full and stream_in_V_strb_V_0_sel_wr);
    stream_in_V_strb_V_0_sel <= stream_in_V_strb_V_0_sel_rd;
    stream_in_V_strb_V_0_state_cmp_full <= '0' when (stream_in_V_strb_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_strb_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_strb_V_0_vld_out <= stream_in_V_strb_V_0_state(0);
    stream_in_V_user_V_0_ack_in <= stream_in_V_user_V_0_state(1);

    stream_in_V_user_V_0_ack_out_assign_proc : process(stream_in_V_data_V_0_vld_out, ap_CS_fsm_state43, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, tmp_11_reg_985, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter0, tmp_22_reg_1050, ap_block_pp0_stage3_11001, ap_block_pp1_stage2_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (tmp_11_reg_985 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_state43) and (stream_in_V_data_V_0_vld_out = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (tmp_22_reg_1050 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage2_11001)))) then 
            stream_in_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_user_V_0_data_out_assign_proc : process(stream_in_V_user_V_0_payload_A, stream_in_V_user_V_0_payload_B, stream_in_V_user_V_0_sel)
    begin
        if ((stream_in_V_user_V_0_sel = ap_const_logic_1)) then 
            stream_in_V_user_V_0_data_out <= stream_in_V_user_V_0_payload_B;
        else 
            stream_in_V_user_V_0_data_out <= stream_in_V_user_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_user_V_0_load_A <= (stream_in_V_user_V_0_state_cmp_full and not(stream_in_V_user_V_0_sel_wr));
    stream_in_V_user_V_0_load_B <= (stream_in_V_user_V_0_state_cmp_full and stream_in_V_user_V_0_sel_wr);
    stream_in_V_user_V_0_sel <= stream_in_V_user_V_0_sel_rd;
    stream_in_V_user_V_0_state_cmp_full <= '0' when (stream_in_V_user_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_user_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_user_V_0_vld_out <= stream_in_V_user_V_0_state(0);
    stream_out_TDATA <= stream_out_V_data_V_1_data_out;

    stream_out_TDATA_blk_n_assign_proc : process(stream_out_V_data_V_1_state, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, tmp_24_reg_1123, ap_enable_reg_pp3_iter2, ap_reg_pp3_iter1_tmp_24_reg_1123, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0, tmp_s_reg_1152, ap_enable_reg_pp4_iter2, ap_reg_pp4_iter1_tmp_s_reg_1152)
    begin
        if ((((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_reg_pp4_iter1_tmp_s_reg_1152 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (tmp_s_reg_1152 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0)) or ((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_reg_pp3_iter1_tmp_24_reg_1123 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (tmp_24_reg_1123 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0)))) then 
            stream_out_TDATA_blk_n <= stream_out_V_data_V_1_state(1);
        else 
            stream_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_TDEST <= stream_out_V_dest_V_1_data_out;
    stream_out_TID <= stream_out_V_id_V_1_data_out;
    stream_out_TKEEP <= stream_out_V_keep_V_1_data_out;
    stream_out_TLAST <= stream_out_V_last_V_1_data_out;
    stream_out_TSTRB <= stream_out_V_strb_V_1_data_out;
    stream_out_TUSER <= stream_out_V_user_V_1_data_out;
    stream_out_TVALID <= stream_out_V_dest_V_1_state(0);
    stream_out_V_data_V_1_ack_in <= stream_out_V_data_V_1_state(1);
    stream_out_V_data_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_data_V_1_data_in_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, tmp_24_reg_1123, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, tmp_s_reg_1152, tmp_data_V_4_fu_863_p1, tmp_data_V_1_fu_904_p1, ap_block_pp3_stage0_01001, ap_block_pp4_stage0_01001)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_01001) and (tmp_s_reg_1152 = ap_const_lv1_1))) then 
            stream_out_V_data_V_1_data_in <= tmp_data_V_1_fu_904_p1;
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_01001) and (tmp_24_reg_1123 = ap_const_lv1_1))) then 
            stream_out_V_data_V_1_data_in <= tmp_data_V_4_fu_863_p1;
        else 
            stream_out_V_data_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stream_out_V_data_V_1_data_out_assign_proc : process(stream_out_V_data_V_1_payload_A, stream_out_V_data_V_1_payload_B, stream_out_V_data_V_1_sel)
    begin
        if ((stream_out_V_data_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_data_V_1_data_out <= stream_out_V_data_V_1_payload_B;
        else 
            stream_out_V_data_V_1_data_out <= stream_out_V_data_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_data_V_1_load_A <= (stream_out_V_data_V_1_state_cmp_full and not(stream_out_V_data_V_1_sel_wr));
    stream_out_V_data_V_1_load_B <= (stream_out_V_data_V_1_state_cmp_full and stream_out_V_data_V_1_sel_wr);
    stream_out_V_data_V_1_sel <= stream_out_V_data_V_1_sel_rd;
    stream_out_V_data_V_1_state_cmp_full <= '0' when (stream_out_V_data_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, tmp_24_reg_1123, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, tmp_s_reg_1152, ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (tmp_s_reg_1152 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (tmp_24_reg_1123 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            stream_out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_data_V_1_vld_out <= stream_out_V_data_V_1_state(0);
    stream_out_V_dest_V_1_ack_in <= stream_out_V_dest_V_1_state(1);
    stream_out_V_dest_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_dest_V_1_data_out_assign_proc : process(stream_out_V_dest_V_1_payload_A, stream_out_V_dest_V_1_payload_B, stream_out_V_dest_V_1_sel)
    begin
        if ((stream_out_V_dest_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_dest_V_1_data_out <= stream_out_V_dest_V_1_payload_B;
        else 
            stream_out_V_dest_V_1_data_out <= stream_out_V_dest_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_dest_V_1_load_A <= (stream_out_V_dest_V_1_state_cmp_full and not(stream_out_V_dest_V_1_sel_wr));
    stream_out_V_dest_V_1_load_B <= (stream_out_V_dest_V_1_state_cmp_full and stream_out_V_dest_V_1_sel_wr);
    stream_out_V_dest_V_1_sel <= stream_out_V_dest_V_1_sel_rd;
    stream_out_V_dest_V_1_state_cmp_full <= '0' when (stream_out_V_dest_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, tmp_24_reg_1123, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, tmp_s_reg_1152, ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (tmp_s_reg_1152 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (tmp_24_reg_1123 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            stream_out_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_dest_V_1_vld_out <= stream_out_V_dest_V_1_state(0);
    stream_out_V_id_V_1_ack_in <= stream_out_V_id_V_1_state(1);
    stream_out_V_id_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_id_V_1_data_out_assign_proc : process(stream_out_V_id_V_1_payload_A, stream_out_V_id_V_1_payload_B, stream_out_V_id_V_1_sel)
    begin
        if ((stream_out_V_id_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_id_V_1_data_out <= stream_out_V_id_V_1_payload_B;
        else 
            stream_out_V_id_V_1_data_out <= stream_out_V_id_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_id_V_1_load_A <= (stream_out_V_id_V_1_state_cmp_full and not(stream_out_V_id_V_1_sel_wr));
    stream_out_V_id_V_1_load_B <= (stream_out_V_id_V_1_state_cmp_full and stream_out_V_id_V_1_sel_wr);
    stream_out_V_id_V_1_sel <= stream_out_V_id_V_1_sel_rd;
    stream_out_V_id_V_1_state_cmp_full <= '0' when (stream_out_V_id_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, tmp_24_reg_1123, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, tmp_s_reg_1152, ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (tmp_s_reg_1152 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (tmp_24_reg_1123 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            stream_out_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_id_V_1_vld_out <= stream_out_V_id_V_1_state(0);
    stream_out_V_keep_V_1_ack_in <= stream_out_V_keep_V_1_state(1);
    stream_out_V_keep_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_keep_V_1_data_out_assign_proc : process(stream_out_V_keep_V_1_payload_A, stream_out_V_keep_V_1_payload_B, stream_out_V_keep_V_1_sel)
    begin
        if ((stream_out_V_keep_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_keep_V_1_data_out <= stream_out_V_keep_V_1_payload_B;
        else 
            stream_out_V_keep_V_1_data_out <= stream_out_V_keep_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_keep_V_1_load_A <= (stream_out_V_keep_V_1_state_cmp_full and not(stream_out_V_keep_V_1_sel_wr));
    stream_out_V_keep_V_1_load_B <= (stream_out_V_keep_V_1_state_cmp_full and stream_out_V_keep_V_1_sel_wr);
    stream_out_V_keep_V_1_sel <= stream_out_V_keep_V_1_sel_rd;
    stream_out_V_keep_V_1_state_cmp_full <= '0' when (stream_out_V_keep_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, tmp_24_reg_1123, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, tmp_s_reg_1152, ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (tmp_s_reg_1152 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (tmp_24_reg_1123 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            stream_out_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_keep_V_1_vld_out <= stream_out_V_keep_V_1_state(0);
    stream_out_V_last_V_1_ack_in <= stream_out_V_last_V_1_state(1);
    stream_out_V_last_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_last_V_1_data_in_assign_proc : process(channel_last_V, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, tmp_24_reg_1123, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, tmp_s_reg_1152, tmp_last_V_1_reg_1166, ap_block_pp3_stage0_01001, ap_block_pp4_stage0_01001)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_01001) and (tmp_s_reg_1152 = ap_const_lv1_1))) then 
            stream_out_V_last_V_1_data_in <= tmp_last_V_1_reg_1166;
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_01001) and (tmp_24_reg_1123 = ap_const_lv1_1))) then 
            stream_out_V_last_V_1_data_in <= channel_last_V;
        else 
            stream_out_V_last_V_1_data_in <= "X";
        end if; 
    end process;


    stream_out_V_last_V_1_data_out_assign_proc : process(stream_out_V_last_V_1_payload_A, stream_out_V_last_V_1_payload_B, stream_out_V_last_V_1_sel)
    begin
        if ((stream_out_V_last_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_last_V_1_data_out <= stream_out_V_last_V_1_payload_B;
        else 
            stream_out_V_last_V_1_data_out <= stream_out_V_last_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_last_V_1_load_A <= (stream_out_V_last_V_1_state_cmp_full and not(stream_out_V_last_V_1_sel_wr));
    stream_out_V_last_V_1_load_B <= (stream_out_V_last_V_1_state_cmp_full and stream_out_V_last_V_1_sel_wr);
    stream_out_V_last_V_1_sel <= stream_out_V_last_V_1_sel_rd;
    stream_out_V_last_V_1_state_cmp_full <= '0' when (stream_out_V_last_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, tmp_24_reg_1123, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, tmp_s_reg_1152, ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (tmp_s_reg_1152 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (tmp_24_reg_1123 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            stream_out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_last_V_1_vld_out <= stream_out_V_last_V_1_state(0);
    stream_out_V_strb_V_1_ack_in <= stream_out_V_strb_V_1_state(1);
    stream_out_V_strb_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_strb_V_1_data_out_assign_proc : process(stream_out_V_strb_V_1_payload_A, stream_out_V_strb_V_1_payload_B, stream_out_V_strb_V_1_sel)
    begin
        if ((stream_out_V_strb_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_strb_V_1_data_out <= stream_out_V_strb_V_1_payload_B;
        else 
            stream_out_V_strb_V_1_data_out <= stream_out_V_strb_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_strb_V_1_load_A <= (stream_out_V_strb_V_1_state_cmp_full and not(stream_out_V_strb_V_1_sel_wr));
    stream_out_V_strb_V_1_load_B <= (stream_out_V_strb_V_1_state_cmp_full and stream_out_V_strb_V_1_sel_wr);
    stream_out_V_strb_V_1_sel <= stream_out_V_strb_V_1_sel_rd;
    stream_out_V_strb_V_1_state_cmp_full <= '0' when (stream_out_V_strb_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, tmp_24_reg_1123, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, tmp_s_reg_1152, ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (tmp_s_reg_1152 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (tmp_24_reg_1123 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            stream_out_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_strb_V_1_vld_out <= stream_out_V_strb_V_1_state(0);
    stream_out_V_user_V_1_ack_in <= stream_out_V_user_V_1_state(1);
    stream_out_V_user_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_user_V_1_data_out_assign_proc : process(stream_out_V_user_V_1_payload_A, stream_out_V_user_V_1_payload_B, stream_out_V_user_V_1_sel)
    begin
        if ((stream_out_V_user_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_user_V_1_data_out <= stream_out_V_user_V_1_payload_B;
        else 
            stream_out_V_user_V_1_data_out <= stream_out_V_user_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_user_V_1_load_A <= (stream_out_V_user_V_1_state_cmp_full and not(stream_out_V_user_V_1_sel_wr));
    stream_out_V_user_V_1_load_B <= (stream_out_V_user_V_1_state_cmp_full and stream_out_V_user_V_1_sel_wr);
    stream_out_V_user_V_1_sel <= stream_out_V_user_V_1_sel_rd;
    stream_out_V_user_V_1_state_cmp_full <= '0' when (stream_out_V_user_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, tmp_24_reg_1123, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, tmp_s_reg_1152, ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (tmp_s_reg_1152 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (tmp_24_reg_1123 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)))) then 
            stream_out_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_user_V_1_vld_out <= stream_out_V_user_V_1_state(0);
    sum_load_1_to_int_fu_781_p1 <= sum_load_1_reg_334;
    sum_load_to_int_fu_627_p1 <= sum_load_reg_286;

    temp_data_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, tmp_25_reg_1059, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp1_stage0, tmp_37_fu_837_p1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            temp_data_address0 <= tmp_37_fu_837_p1(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            temp_data_address0 <= tmp_25_reg_1059(10 - 1 downto 0);
        else 
            temp_data_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    temp_data_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            temp_data_ce0 <= ap_const_logic_1;
        else 
            temp_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_data_we0_assign_proc : process(tmp_22_reg_1050, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_22_reg_1050 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            temp_data_we0 <= ap_const_logic_1;
        else 
            temp_data_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_888_p2 <= std_logic_vector(unsigned(i_load_reg_379) + unsigned(ap_const_lv31_1));
    tmp_11_fu_601_p2 <= "1" when (signed(i_load_1_cast_fu_597_p1) < signed(vectorSize_read_reg_920)) else "0";
    tmp_12_fu_657_p1 <= stream_in_V_data_V_0_data_out;
    tmp_13_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_load_1_reg_298),64));
    tmp_15_to_int_fu_692_p1 <= reg_452;
    tmp_16_fu_631_p4 <= sum_load_to_int_fu_627_p1(30 downto 23);
    tmp_17_fu_688_p2 <= "1" when (i_load_1_cast_reg_980 = tmp_2_reg_946) else "0";
    tmp_18_fu_745_p2 <= "1" when (signed(batch_load_cast_fu_741_p1) < signed(kernelSize_read_reg_929)) else "0";
        tmp_19_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ip_index),64));

    tmp_20_fu_606_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_load_1_phi_fu_303_p4) + unsigned(ap_const_lv31_1));
    tmp_21_fu_587_p1 <= stream_in_V_data_V_0_data_out(23 - 1 downto 0);
    tmp_22_fu_760_p2 <= "1" when (signed(i_load_2_cast_fu_756_p1) < signed(vectorSize_read_reg_920)) else "0";
    tmp_24_fu_847_p2 <= "1" when (signed(i_load_3_cast_fu_843_p1) < signed(vectorSize_read_reg_920)) else "0";
    tmp_25_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_load_2_phi_fu_350_p4),64));
    tmp_26_fu_776_p1 <= stream_in_V_data_V_0_data_out;
    tmp_29_fu_765_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_load_2_phi_fu_350_p4) + unsigned(ap_const_lv31_1));
    tmp_2_fu_496_p2 <= std_logic_vector(unsigned(vectorSize_read_reg_920) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_30_fu_612_p4 <= tmp_data_V_reg_964(30 downto 23);
    tmp_31_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_load_3_reg_368),64));
    tmp_32_fu_852_p2 <= std_logic_vector(unsigned(i_load_3_reg_368) + unsigned(ap_const_lv31_1));
    tmp_33_fu_873_p2 <= std_logic_vector(unsigned(ip_index) + unsigned(ap_const_lv32_1));
    tmp_35_cast_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_reg_357),32));
    tmp_36_fu_826_p2 <= "1" when (signed(tmp_35_cast_fu_822_p1) < signed(vectorSize_read_reg_920)) else "0";
    tmp_37_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_reg_357),64));
    tmp_41_fu_831_p2 <= std_logic_vector(unsigned(tmp_35_reg_357) + unsigned(ap_const_lv31_1));
    tmp_42_fu_750_p2 <= std_logic_vector(unsigned(batch_load_reg_323) + unsigned(ap_const_lv31_1));
    tmp_46_fu_641_p1 <= sum_load_to_int_fu_627_p1(23 - 1 downto 0);
    tmp_47_fu_668_p2 <= (notrhs6_reg_1004 or notlhs5_reg_999);
    tmp_48_fu_672_p2 <= (notrhs8_reg_975 or notlhs7_reg_994);
    tmp_49_fu_676_p2 <= (tmp_48_fu_672_p2 and tmp_47_fu_668_p2);
    tmp_4_fu_507_p2 <= "1" when (signed(tmp_3_reg_275) < signed(layerSize_read_reg_934)) else "0";
    tmp_51_fu_682_p2 <= (tmp_49_fu_676_p2 and grp_fu_412_p2);
    tmp_52_fu_696_p4 <= tmp_15_to_int_fu_692_p1(30 downto 23);
    tmp_53_fu_706_p1 <= tmp_15_to_int_fu_692_p1(23 - 1 downto 0);
    tmp_54_fu_722_p2 <= (notrhs2_reg_1028 or notlhs1_reg_1023);
    tmp_56_fu_726_p2 <= (tmp_55_reg_1033 and tmp_54_fu_722_p2);
    tmp_57_fu_785_p4 <= sum_load_1_to_int_fu_781_p1(30 downto 23);
    tmp_58_fu_795_p1 <= sum_load_1_to_int_fu_781_p1(23 - 1 downto 0);
    tmp_59_fu_811_p2 <= (notrhs_fu_805_p2 or notlhs_fu_799_p2);
    tmp_5_fu_512_p2 <= "1" when (tmp_3_reg_275 = ap_const_lv32_0) else "0";
    tmp_61_fu_817_p2 <= (tmp_60_reg_1079 and tmp_59_fu_811_p2);
    tmp_6_fu_518_p2 <= std_logic_vector(unsigned(layerSize_read_reg_934) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_7_fu_583_p1 <= stream_in_V_data_V_0_data_out;
    tmp_8_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_load_reg_379),64));
    tmp_data_V_1_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(spike_matrix_q0),32));
    tmp_data_V_4_fu_863_p1 <= state_vector_q1;
    tmp_last_V_1_fu_899_p2 <= "1" when (i_load_cast_fu_879_p1 = tmp_6_reg_959) else "0";
    tmp_s_fu_883_p2 <= "1" when (signed(i_load_cast_fu_879_p1) < signed(layerSize_read_reg_934)) else "0";
end behav;
