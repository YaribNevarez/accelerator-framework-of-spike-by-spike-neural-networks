// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _wide_div_HH_
#define _wide_div_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "sbs_fixedpoint_udiv_63ns_42ns_63_67_0.h"

namespace ap_rtl {

struct wide_div : public sc_module {
    // Port declarations 6
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<63> > dividend_V;
    sc_in< sc_lv<42> > divisor_V;
    sc_out< sc_lv<63> > ap_return;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    wide_div(sc_module_name name);
    SC_HAS_PROCESS(wide_div);

    ~wide_div();

    sc_trace_file* mVcdFile;

    sbs_fixedpoint_udiv_63ns_42ns_63_67_0<1,67,63,42,63>* sbs_fixedpoint_udiv_63ns_42ns_63_67_0_U1;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter8;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter9;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter10;
    sc_signal< bool > ap_block_state12_pp0_stage0_iter11;
    sc_signal< bool > ap_block_state13_pp0_stage0_iter12;
    sc_signal< bool > ap_block_state14_pp0_stage0_iter13;
    sc_signal< bool > ap_block_state15_pp0_stage0_iter14;
    sc_signal< bool > ap_block_state16_pp0_stage0_iter15;
    sc_signal< bool > ap_block_state17_pp0_stage0_iter16;
    sc_signal< bool > ap_block_state18_pp0_stage0_iter17;
    sc_signal< bool > ap_block_state19_pp0_stage0_iter18;
    sc_signal< bool > ap_block_state20_pp0_stage0_iter19;
    sc_signal< bool > ap_block_state21_pp0_stage0_iter20;
    sc_signal< bool > ap_block_state22_pp0_stage0_iter21;
    sc_signal< bool > ap_block_state23_pp0_stage0_iter22;
    sc_signal< bool > ap_block_state24_pp0_stage0_iter23;
    sc_signal< bool > ap_block_state25_pp0_stage0_iter24;
    sc_signal< bool > ap_block_state26_pp0_stage0_iter25;
    sc_signal< bool > ap_block_state27_pp0_stage0_iter26;
    sc_signal< bool > ap_block_state28_pp0_stage0_iter27;
    sc_signal< bool > ap_block_state29_pp0_stage0_iter28;
    sc_signal< bool > ap_block_state30_pp0_stage0_iter29;
    sc_signal< bool > ap_block_state31_pp0_stage0_iter30;
    sc_signal< bool > ap_block_state32_pp0_stage0_iter31;
    sc_signal< bool > ap_block_state33_pp0_stage0_iter32;
    sc_signal< bool > ap_block_state34_pp0_stage0_iter33;
    sc_signal< bool > ap_block_state35_pp0_stage0_iter34;
    sc_signal< bool > ap_block_state36_pp0_stage0_iter35;
    sc_signal< bool > ap_block_state37_pp0_stage0_iter36;
    sc_signal< bool > ap_block_state38_pp0_stage0_iter37;
    sc_signal< bool > ap_block_state39_pp0_stage0_iter38;
    sc_signal< bool > ap_block_state40_pp0_stage0_iter39;
    sc_signal< bool > ap_block_state41_pp0_stage0_iter40;
    sc_signal< bool > ap_block_state42_pp0_stage0_iter41;
    sc_signal< bool > ap_block_state43_pp0_stage0_iter42;
    sc_signal< bool > ap_block_state44_pp0_stage0_iter43;
    sc_signal< bool > ap_block_state45_pp0_stage0_iter44;
    sc_signal< bool > ap_block_state46_pp0_stage0_iter45;
    sc_signal< bool > ap_block_state47_pp0_stage0_iter46;
    sc_signal< bool > ap_block_state48_pp0_stage0_iter47;
    sc_signal< bool > ap_block_state49_pp0_stage0_iter48;
    sc_signal< bool > ap_block_state50_pp0_stage0_iter49;
    sc_signal< bool > ap_block_state51_pp0_stage0_iter50;
    sc_signal< bool > ap_block_state52_pp0_stage0_iter51;
    sc_signal< bool > ap_block_state53_pp0_stage0_iter52;
    sc_signal< bool > ap_block_state54_pp0_stage0_iter53;
    sc_signal< bool > ap_block_state55_pp0_stage0_iter54;
    sc_signal< bool > ap_block_state56_pp0_stage0_iter55;
    sc_signal< bool > ap_block_state57_pp0_stage0_iter56;
    sc_signal< bool > ap_block_state58_pp0_stage0_iter57;
    sc_signal< bool > ap_block_state59_pp0_stage0_iter58;
    sc_signal< bool > ap_block_state60_pp0_stage0_iter59;
    sc_signal< bool > ap_block_state61_pp0_stage0_iter60;
    sc_signal< bool > ap_block_state62_pp0_stage0_iter61;
    sc_signal< bool > ap_block_state63_pp0_stage0_iter62;
    sc_signal< bool > ap_block_state64_pp0_stage0_iter63;
    sc_signal< bool > ap_block_state65_pp0_stage0_iter64;
    sc_signal< bool > ap_block_state66_pp0_stage0_iter65;
    sc_signal< bool > ap_block_state67_pp0_stage0_iter66;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<42> > grp_fu_24_p1;
    sc_signal< sc_lv<63> > grp_fu_24_p2;
    sc_signal< sc_logic > grp_fu_24_ce;
    sc_signal< sc_logic > ap_ce_reg;
    sc_signal< sc_lv<63> > dividend_V_int_reg;
    sc_signal< sc_lv<42> > divisor_V_int_reg;
    sc_signal< sc_lv<63> > ap_return_int_reg;
    sc_signal< sc_lv<63> > grp_fu_24_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_state10_pp0_stage0_iter9();
    void thread_ap_block_state11_pp0_stage0_iter10();
    void thread_ap_block_state12_pp0_stage0_iter11();
    void thread_ap_block_state13_pp0_stage0_iter12();
    void thread_ap_block_state14_pp0_stage0_iter13();
    void thread_ap_block_state15_pp0_stage0_iter14();
    void thread_ap_block_state16_pp0_stage0_iter15();
    void thread_ap_block_state17_pp0_stage0_iter16();
    void thread_ap_block_state18_pp0_stage0_iter17();
    void thread_ap_block_state19_pp0_stage0_iter18();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state20_pp0_stage0_iter19();
    void thread_ap_block_state21_pp0_stage0_iter20();
    void thread_ap_block_state22_pp0_stage0_iter21();
    void thread_ap_block_state23_pp0_stage0_iter22();
    void thread_ap_block_state24_pp0_stage0_iter23();
    void thread_ap_block_state25_pp0_stage0_iter24();
    void thread_ap_block_state26_pp0_stage0_iter25();
    void thread_ap_block_state27_pp0_stage0_iter26();
    void thread_ap_block_state28_pp0_stage0_iter27();
    void thread_ap_block_state29_pp0_stage0_iter28();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state30_pp0_stage0_iter29();
    void thread_ap_block_state31_pp0_stage0_iter30();
    void thread_ap_block_state32_pp0_stage0_iter31();
    void thread_ap_block_state33_pp0_stage0_iter32();
    void thread_ap_block_state34_pp0_stage0_iter33();
    void thread_ap_block_state35_pp0_stage0_iter34();
    void thread_ap_block_state36_pp0_stage0_iter35();
    void thread_ap_block_state37_pp0_stage0_iter36();
    void thread_ap_block_state38_pp0_stage0_iter37();
    void thread_ap_block_state39_pp0_stage0_iter38();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state40_pp0_stage0_iter39();
    void thread_ap_block_state41_pp0_stage0_iter40();
    void thread_ap_block_state42_pp0_stage0_iter41();
    void thread_ap_block_state43_pp0_stage0_iter42();
    void thread_ap_block_state44_pp0_stage0_iter43();
    void thread_ap_block_state45_pp0_stage0_iter44();
    void thread_ap_block_state46_pp0_stage0_iter45();
    void thread_ap_block_state47_pp0_stage0_iter46();
    void thread_ap_block_state48_pp0_stage0_iter47();
    void thread_ap_block_state49_pp0_stage0_iter48();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_block_state50_pp0_stage0_iter49();
    void thread_ap_block_state51_pp0_stage0_iter50();
    void thread_ap_block_state52_pp0_stage0_iter51();
    void thread_ap_block_state53_pp0_stage0_iter52();
    void thread_ap_block_state54_pp0_stage0_iter53();
    void thread_ap_block_state55_pp0_stage0_iter54();
    void thread_ap_block_state56_pp0_stage0_iter55();
    void thread_ap_block_state57_pp0_stage0_iter56();
    void thread_ap_block_state58_pp0_stage0_iter57();
    void thread_ap_block_state59_pp0_stage0_iter58();
    void thread_ap_block_state5_pp0_stage0_iter4();
    void thread_ap_block_state60_pp0_stage0_iter59();
    void thread_ap_block_state61_pp0_stage0_iter60();
    void thread_ap_block_state62_pp0_stage0_iter61();
    void thread_ap_block_state63_pp0_stage0_iter62();
    void thread_ap_block_state64_pp0_stage0_iter63();
    void thread_ap_block_state65_pp0_stage0_iter64();
    void thread_ap_block_state66_pp0_stage0_iter65();
    void thread_ap_block_state67_pp0_stage0_iter66();
    void thread_ap_block_state6_pp0_stage0_iter5();
    void thread_ap_block_state7_pp0_stage0_iter6();
    void thread_ap_block_state8_pp0_stage0_iter7();
    void thread_ap_block_state9_pp0_stage0_iter8();
    void thread_ap_return();
    void thread_grp_fu_24_ce();
    void thread_grp_fu_24_p1();
    void thread_grp_fu_24_p10();
};

}

using namespace ap_rtl;

#endif
