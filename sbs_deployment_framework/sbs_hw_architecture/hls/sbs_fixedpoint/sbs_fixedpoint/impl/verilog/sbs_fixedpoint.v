// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sbs_fixedpoint,hls_ip_2019_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.461500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=13,HLS_SYN_DSP=13,HLS_SYN_FF=11986,HLS_SYN_LUT=9587,HLS_VERSION=2019_1_1}" *)

module sbs_fixedpoint (
        ap_clk,
        ap_rst_n,
        stream_in_TDATA,
        stream_in_TVALID,
        stream_in_TREADY,
        stream_in_TKEEP,
        stream_in_TSTRB,
        stream_in_TUSER,
        stream_in_TLAST,
        stream_in_TID,
        stream_in_TDEST,
        stream_out_TDATA,
        stream_out_TVALID,
        stream_out_TREADY,
        stream_out_TKEEP,
        stream_out_TSTRB,
        stream_out_TUSER,
        stream_out_TLAST,
        stream_out_TID,
        stream_out_TDEST,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 152'd1;
parameter    ap_ST_fsm_state2 = 152'd2;
parameter    ap_ST_fsm_state3 = 152'd4;
parameter    ap_ST_fsm_state4 = 152'd8;
parameter    ap_ST_fsm_state5 = 152'd16;
parameter    ap_ST_fsm_state6 = 152'd32;
parameter    ap_ST_fsm_state7 = 152'd64;
parameter    ap_ST_fsm_state8 = 152'd128;
parameter    ap_ST_fsm_state9 = 152'd256;
parameter    ap_ST_fsm_state10 = 152'd512;
parameter    ap_ST_fsm_state11 = 152'd1024;
parameter    ap_ST_fsm_state12 = 152'd2048;
parameter    ap_ST_fsm_state13 = 152'd4096;
parameter    ap_ST_fsm_state14 = 152'd8192;
parameter    ap_ST_fsm_state15 = 152'd16384;
parameter    ap_ST_fsm_state16 = 152'd32768;
parameter    ap_ST_fsm_state17 = 152'd65536;
parameter    ap_ST_fsm_state18 = 152'd131072;
parameter    ap_ST_fsm_state19 = 152'd262144;
parameter    ap_ST_fsm_state20 = 152'd524288;
parameter    ap_ST_fsm_state21 = 152'd1048576;
parameter    ap_ST_fsm_state22 = 152'd2097152;
parameter    ap_ST_fsm_state23 = 152'd4194304;
parameter    ap_ST_fsm_state24 = 152'd8388608;
parameter    ap_ST_fsm_state25 = 152'd16777216;
parameter    ap_ST_fsm_state26 = 152'd33554432;
parameter    ap_ST_fsm_state27 = 152'd67108864;
parameter    ap_ST_fsm_state28 = 152'd134217728;
parameter    ap_ST_fsm_state29 = 152'd268435456;
parameter    ap_ST_fsm_state30 = 152'd536870912;
parameter    ap_ST_fsm_state31 = 152'd1073741824;
parameter    ap_ST_fsm_state32 = 152'd2147483648;
parameter    ap_ST_fsm_state33 = 152'd4294967296;
parameter    ap_ST_fsm_state34 = 152'd8589934592;
parameter    ap_ST_fsm_state35 = 152'd17179869184;
parameter    ap_ST_fsm_state36 = 152'd34359738368;
parameter    ap_ST_fsm_state37 = 152'd68719476736;
parameter    ap_ST_fsm_state38 = 152'd137438953472;
parameter    ap_ST_fsm_state39 = 152'd274877906944;
parameter    ap_ST_fsm_state40 = 152'd549755813888;
parameter    ap_ST_fsm_state41 = 152'd1099511627776;
parameter    ap_ST_fsm_state42 = 152'd2199023255552;
parameter    ap_ST_fsm_state43 = 152'd4398046511104;
parameter    ap_ST_fsm_state44 = 152'd8796093022208;
parameter    ap_ST_fsm_state45 = 152'd17592186044416;
parameter    ap_ST_fsm_state46 = 152'd35184372088832;
parameter    ap_ST_fsm_state47 = 152'd70368744177664;
parameter    ap_ST_fsm_state48 = 152'd140737488355328;
parameter    ap_ST_fsm_state49 = 152'd281474976710656;
parameter    ap_ST_fsm_state50 = 152'd562949953421312;
parameter    ap_ST_fsm_state51 = 152'd1125899906842624;
parameter    ap_ST_fsm_state52 = 152'd2251799813685248;
parameter    ap_ST_fsm_state53 = 152'd4503599627370496;
parameter    ap_ST_fsm_state54 = 152'd9007199254740992;
parameter    ap_ST_fsm_state55 = 152'd18014398509481984;
parameter    ap_ST_fsm_state56 = 152'd36028797018963968;
parameter    ap_ST_fsm_state57 = 152'd72057594037927936;
parameter    ap_ST_fsm_state58 = 152'd144115188075855872;
parameter    ap_ST_fsm_state59 = 152'd288230376151711744;
parameter    ap_ST_fsm_state60 = 152'd576460752303423488;
parameter    ap_ST_fsm_state61 = 152'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 152'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 152'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 152'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 152'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 152'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 152'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 152'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 152'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 152'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 152'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 152'd2361183241434822606848;
parameter    ap_ST_fsm_pp0_stage0 = 152'd4722366482869645213696;
parameter    ap_ST_fsm_pp0_stage1 = 152'd9444732965739290427392;
parameter    ap_ST_fsm_state77 = 152'd18889465931478580854784;
parameter    ap_ST_fsm_state78 = 152'd37778931862957161709568;
parameter    ap_ST_fsm_pp1_stage0 = 152'd75557863725914323419136;
parameter    ap_ST_fsm_pp1_stage1 = 152'd151115727451828646838272;
parameter    ap_ST_fsm_state90 = 152'd302231454903657293676544;
parameter    ap_ST_fsm_state91 = 152'd604462909807314587353088;
parameter    ap_ST_fsm_state92 = 152'd1208925819614629174706176;
parameter    ap_ST_fsm_state93 = 152'd2417851639229258349412352;
parameter    ap_ST_fsm_state94 = 152'd4835703278458516698824704;
parameter    ap_ST_fsm_state95 = 152'd9671406556917033397649408;
parameter    ap_ST_fsm_state96 = 152'd19342813113834066795298816;
parameter    ap_ST_fsm_state97 = 152'd38685626227668133590597632;
parameter    ap_ST_fsm_state98 = 152'd77371252455336267181195264;
parameter    ap_ST_fsm_state99 = 152'd154742504910672534362390528;
parameter    ap_ST_fsm_state100 = 152'd309485009821345068724781056;
parameter    ap_ST_fsm_state101 = 152'd618970019642690137449562112;
parameter    ap_ST_fsm_state102 = 152'd1237940039285380274899124224;
parameter    ap_ST_fsm_state103 = 152'd2475880078570760549798248448;
parameter    ap_ST_fsm_state104 = 152'd4951760157141521099596496896;
parameter    ap_ST_fsm_state105 = 152'd9903520314283042199192993792;
parameter    ap_ST_fsm_state106 = 152'd19807040628566084398385987584;
parameter    ap_ST_fsm_state107 = 152'd39614081257132168796771975168;
parameter    ap_ST_fsm_state108 = 152'd79228162514264337593543950336;
parameter    ap_ST_fsm_state109 = 152'd158456325028528675187087900672;
parameter    ap_ST_fsm_state110 = 152'd316912650057057350374175801344;
parameter    ap_ST_fsm_state111 = 152'd633825300114114700748351602688;
parameter    ap_ST_fsm_state112 = 152'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state113 = 152'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state114 = 152'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state115 = 152'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state116 = 152'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state117 = 152'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state118 = 152'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state119 = 152'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state120 = 152'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state121 = 152'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state122 = 152'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state123 = 152'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state124 = 152'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state125 = 152'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state126 = 152'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state127 = 152'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state128 = 152'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state129 = 152'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state130 = 152'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state131 = 152'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state132 = 152'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state133 = 152'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state134 = 152'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state135 = 152'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state136 = 152'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state137 = 152'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state138 = 152'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state139 = 152'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state140 = 152'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state141 = 152'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state142 = 152'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state143 = 152'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state144 = 152'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state145 = 152'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state146 = 152'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state147 = 152'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state148 = 152'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state149 = 152'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state150 = 152'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state151 = 152'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state152 = 152'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state153 = 152'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state154 = 152'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state155 = 152'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state156 = 152'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state157 = 152'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_pp2_stage0 = 152'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state176 = 152'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_pp3_stage0 = 152'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state180 = 152'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_pp4_stage0 = 152'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state184 = 152'd2854495385411919762116571938898990272765493248;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] stream_in_TDATA;
input   stream_in_TVALID;
output   stream_in_TREADY;
input  [3:0] stream_in_TKEEP;
input  [3:0] stream_in_TSTRB;
input  [1:0] stream_in_TUSER;
input  [0:0] stream_in_TLAST;
input  [4:0] stream_in_TID;
input  [5:0] stream_in_TDEST;
output  [31:0] stream_out_TDATA;
output   stream_out_TVALID;
input   stream_out_TREADY;
output  [3:0] stream_out_TKEEP;
output  [3:0] stream_out_TSTRB;
output  [1:0] stream_out_TUSER;
output  [0:0] stream_out_TLAST;
output  [4:0] stream_out_TID;
output  [5:0] stream_out_TDEST;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [151:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] stream_in_V_data_V_0_data_out;
wire    stream_in_V_data_V_0_vld_in;
wire    stream_in_V_data_V_0_vld_out;
wire    stream_in_V_data_V_0_ack_in;
reg    stream_in_V_data_V_0_ack_out;
reg   [31:0] stream_in_V_data_V_0_payload_A;
reg   [31:0] stream_in_V_data_V_0_payload_B;
reg    stream_in_V_data_V_0_sel_rd;
reg    stream_in_V_data_V_0_sel_wr;
wire    stream_in_V_data_V_0_sel;
wire    stream_in_V_data_V_0_load_A;
wire    stream_in_V_data_V_0_load_B;
reg   [1:0] stream_in_V_data_V_0_state;
wire    stream_in_V_data_V_0_state_cmp_full;
reg   [3:0] stream_in_V_keep_V_0_data_out;
wire    stream_in_V_keep_V_0_vld_in;
wire    stream_in_V_keep_V_0_vld_out;
wire    stream_in_V_keep_V_0_ack_in;
reg    stream_in_V_keep_V_0_ack_out;
reg   [3:0] stream_in_V_keep_V_0_payload_A;
reg   [3:0] stream_in_V_keep_V_0_payload_B;
reg    stream_in_V_keep_V_0_sel_rd;
reg    stream_in_V_keep_V_0_sel_wr;
wire    stream_in_V_keep_V_0_sel;
wire    stream_in_V_keep_V_0_load_A;
wire    stream_in_V_keep_V_0_load_B;
reg   [1:0] stream_in_V_keep_V_0_state;
wire    stream_in_V_keep_V_0_state_cmp_full;
reg   [3:0] stream_in_V_strb_V_0_data_out;
wire    stream_in_V_strb_V_0_vld_in;
wire    stream_in_V_strb_V_0_vld_out;
wire    stream_in_V_strb_V_0_ack_in;
reg    stream_in_V_strb_V_0_ack_out;
reg   [3:0] stream_in_V_strb_V_0_payload_A;
reg   [3:0] stream_in_V_strb_V_0_payload_B;
reg    stream_in_V_strb_V_0_sel_rd;
reg    stream_in_V_strb_V_0_sel_wr;
wire    stream_in_V_strb_V_0_sel;
wire    stream_in_V_strb_V_0_load_A;
wire    stream_in_V_strb_V_0_load_B;
reg   [1:0] stream_in_V_strb_V_0_state;
wire    stream_in_V_strb_V_0_state_cmp_full;
reg   [1:0] stream_in_V_user_V_0_data_out;
wire    stream_in_V_user_V_0_vld_in;
wire    stream_in_V_user_V_0_vld_out;
wire    stream_in_V_user_V_0_ack_in;
reg    stream_in_V_user_V_0_ack_out;
reg   [1:0] stream_in_V_user_V_0_payload_A;
reg   [1:0] stream_in_V_user_V_0_payload_B;
reg    stream_in_V_user_V_0_sel_rd;
reg    stream_in_V_user_V_0_sel_wr;
wire    stream_in_V_user_V_0_sel;
wire    stream_in_V_user_V_0_load_A;
wire    stream_in_V_user_V_0_load_B;
reg   [1:0] stream_in_V_user_V_0_state;
wire    stream_in_V_user_V_0_state_cmp_full;
reg   [0:0] stream_in_V_last_V_0_data_out;
wire    stream_in_V_last_V_0_vld_in;
wire    stream_in_V_last_V_0_vld_out;
wire    stream_in_V_last_V_0_ack_in;
reg    stream_in_V_last_V_0_ack_out;
reg   [0:0] stream_in_V_last_V_0_payload_A;
reg   [0:0] stream_in_V_last_V_0_payload_B;
reg    stream_in_V_last_V_0_sel_rd;
reg    stream_in_V_last_V_0_sel_wr;
wire    stream_in_V_last_V_0_sel;
wire    stream_in_V_last_V_0_load_A;
wire    stream_in_V_last_V_0_load_B;
reg   [1:0] stream_in_V_last_V_0_state;
wire    stream_in_V_last_V_0_state_cmp_full;
reg   [4:0] stream_in_V_id_V_0_data_out;
wire    stream_in_V_id_V_0_vld_in;
wire    stream_in_V_id_V_0_vld_out;
wire    stream_in_V_id_V_0_ack_in;
reg    stream_in_V_id_V_0_ack_out;
reg   [4:0] stream_in_V_id_V_0_payload_A;
reg   [4:0] stream_in_V_id_V_0_payload_B;
reg    stream_in_V_id_V_0_sel_rd;
reg    stream_in_V_id_V_0_sel_wr;
wire    stream_in_V_id_V_0_sel;
wire    stream_in_V_id_V_0_load_A;
wire    stream_in_V_id_V_0_load_B;
reg   [1:0] stream_in_V_id_V_0_state;
wire    stream_in_V_id_V_0_state_cmp_full;
reg   [5:0] stream_in_V_dest_V_0_data_out;
wire    stream_in_V_dest_V_0_vld_in;
wire    stream_in_V_dest_V_0_vld_out;
wire    stream_in_V_dest_V_0_ack_in;
reg    stream_in_V_dest_V_0_ack_out;
reg   [5:0] stream_in_V_dest_V_0_payload_A;
reg   [5:0] stream_in_V_dest_V_0_payload_B;
reg    stream_in_V_dest_V_0_sel_rd;
reg    stream_in_V_dest_V_0_sel_wr;
wire    stream_in_V_dest_V_0_sel;
wire    stream_in_V_dest_V_0_load_A;
wire    stream_in_V_dest_V_0_load_B;
reg   [1:0] stream_in_V_dest_V_0_state;
wire    stream_in_V_dest_V_0_state_cmp_full;
reg   [31:0] stream_out_V_data_V_1_data_in;
reg   [31:0] stream_out_V_data_V_1_data_out;
reg    stream_out_V_data_V_1_vld_in;
wire    stream_out_V_data_V_1_vld_out;
wire    stream_out_V_data_V_1_ack_in;
wire    stream_out_V_data_V_1_ack_out;
reg   [31:0] stream_out_V_data_V_1_payload_A;
reg   [31:0] stream_out_V_data_V_1_payload_B;
reg    stream_out_V_data_V_1_sel_rd;
reg    stream_out_V_data_V_1_sel_wr;
wire    stream_out_V_data_V_1_sel;
wire    stream_out_V_data_V_1_load_A;
wire    stream_out_V_data_V_1_load_B;
reg   [1:0] stream_out_V_data_V_1_state;
wire    stream_out_V_data_V_1_state_cmp_full;
reg   [3:0] stream_out_V_keep_V_1_data_out;
reg    stream_out_V_keep_V_1_vld_in;
wire    stream_out_V_keep_V_1_vld_out;
wire    stream_out_V_keep_V_1_ack_in;
wire    stream_out_V_keep_V_1_ack_out;
reg   [3:0] stream_out_V_keep_V_1_payload_A;
reg   [3:0] stream_out_V_keep_V_1_payload_B;
reg    stream_out_V_keep_V_1_sel_rd;
reg    stream_out_V_keep_V_1_sel_wr;
wire    stream_out_V_keep_V_1_sel;
wire    stream_out_V_keep_V_1_load_A;
wire    stream_out_V_keep_V_1_load_B;
reg   [1:0] stream_out_V_keep_V_1_state;
wire    stream_out_V_keep_V_1_state_cmp_full;
reg   [3:0] stream_out_V_strb_V_1_data_out;
reg    stream_out_V_strb_V_1_vld_in;
wire    stream_out_V_strb_V_1_vld_out;
wire    stream_out_V_strb_V_1_ack_in;
wire    stream_out_V_strb_V_1_ack_out;
reg   [3:0] stream_out_V_strb_V_1_payload_A;
reg   [3:0] stream_out_V_strb_V_1_payload_B;
reg    stream_out_V_strb_V_1_sel_rd;
reg    stream_out_V_strb_V_1_sel_wr;
wire    stream_out_V_strb_V_1_sel;
wire    stream_out_V_strb_V_1_load_A;
wire    stream_out_V_strb_V_1_load_B;
reg   [1:0] stream_out_V_strb_V_1_state;
wire    stream_out_V_strb_V_1_state_cmp_full;
reg   [1:0] stream_out_V_user_V_1_data_out;
reg    stream_out_V_user_V_1_vld_in;
wire    stream_out_V_user_V_1_vld_out;
wire    stream_out_V_user_V_1_ack_in;
wire    stream_out_V_user_V_1_ack_out;
reg   [1:0] stream_out_V_user_V_1_payload_A;
reg   [1:0] stream_out_V_user_V_1_payload_B;
reg    stream_out_V_user_V_1_sel_rd;
reg    stream_out_V_user_V_1_sel_wr;
wire    stream_out_V_user_V_1_sel;
wire    stream_out_V_user_V_1_load_A;
wire    stream_out_V_user_V_1_load_B;
reg   [1:0] stream_out_V_user_V_1_state;
wire    stream_out_V_user_V_1_state_cmp_full;
reg   [0:0] stream_out_V_last_V_1_data_in;
reg   [0:0] stream_out_V_last_V_1_data_out;
reg    stream_out_V_last_V_1_vld_in;
wire    stream_out_V_last_V_1_vld_out;
wire    stream_out_V_last_V_1_ack_in;
wire    stream_out_V_last_V_1_ack_out;
reg   [0:0] stream_out_V_last_V_1_payload_A;
reg   [0:0] stream_out_V_last_V_1_payload_B;
reg    stream_out_V_last_V_1_sel_rd;
reg    stream_out_V_last_V_1_sel_wr;
wire    stream_out_V_last_V_1_sel;
wire    stream_out_V_last_V_1_load_A;
wire    stream_out_V_last_V_1_load_B;
reg   [1:0] stream_out_V_last_V_1_state;
wire    stream_out_V_last_V_1_state_cmp_full;
reg   [4:0] stream_out_V_id_V_1_data_out;
reg    stream_out_V_id_V_1_vld_in;
wire    stream_out_V_id_V_1_vld_out;
wire    stream_out_V_id_V_1_ack_in;
wire    stream_out_V_id_V_1_ack_out;
reg   [4:0] stream_out_V_id_V_1_payload_A;
reg   [4:0] stream_out_V_id_V_1_payload_B;
reg    stream_out_V_id_V_1_sel_rd;
reg    stream_out_V_id_V_1_sel_wr;
wire    stream_out_V_id_V_1_sel;
wire    stream_out_V_id_V_1_load_A;
wire    stream_out_V_id_V_1_load_B;
reg   [1:0] stream_out_V_id_V_1_state;
wire    stream_out_V_id_V_1_state_cmp_full;
reg   [5:0] stream_out_V_dest_V_1_data_out;
reg    stream_out_V_dest_V_1_vld_in;
wire    stream_out_V_dest_V_1_vld_out;
wire    stream_out_V_dest_V_1_ack_in;
wire    stream_out_V_dest_V_1_ack_out;
reg   [5:0] stream_out_V_dest_V_1_payload_A;
reg   [5:0] stream_out_V_dest_V_1_payload_B;
reg    stream_out_V_dest_V_1_sel_rd;
reg    stream_out_V_dest_V_1_sel_wr;
wire    stream_out_V_dest_V_1_sel;
wire    stream_out_V_dest_V_1_load_A;
wire    stream_out_V_dest_V_1_load_B;
reg   [1:0] stream_out_V_dest_V_1_state;
wire    stream_out_V_dest_V_1_state_cmp_full;
wire   [31:0] layerSize;
wire   [31:0] kernelSize;
wire   [31:0] vectorSize;
wire   [31:0] epsilon;
reg   [31:0] ip_index;
reg   [3:0] channel_keep_V;
reg   [3:0] channel_strb_V;
reg   [1:0] channel_user_V;
reg   [0:0] channel_last_V;
reg   [4:0] channel_id_V;
reg   [5:0] channel_dest_V;
reg   [20:0] random_value_V;
reg   [41:0] sum_V;
reg   [31:0] i;
reg   [9:0] state_vector_V_address0;
reg    state_vector_V_ce0;
reg    state_vector_V_we0;
wire   [20:0] state_vector_V_q0;
reg   [9:0] state_vector_V_address1;
reg    state_vector_V_ce1;
reg    state_vector_V_we1;
wire   [20:0] state_vector_V_q1;
reg   [11:0] spike_matrix_address0;
reg    spike_matrix_ce0;
reg    spike_matrix_we0;
wire   [31:0] spike_matrix_q0;
reg   [9:0] temp_data_V_address0;
reg    temp_data_V_ce0;
reg    temp_data_V_we0;
reg   [41:0] temp_data_V_d0;
wire   [41:0] temp_data_V_q0;
reg    stream_in_TDATA_blk_n;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln73_reg_1037;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage1;
reg   [0:0] icmp_ln92_reg_1078;
reg    stream_out_TDATA_blk_n;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln129_reg_1237;
reg    ap_enable_reg_pp3_iter2;
reg   [0:0] icmp_ln129_reg_1237_pp3_iter1_reg;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_pp4_stage0;
reg   [0:0] icmp_ln137_reg_1266;
reg    ap_enable_reg_pp4_iter2;
reg   [0:0] icmp_ln137_reg_1266_pp4_iter1_reg;
reg   [31:0] i_load_2_reg_340;
reg   [31:0] i_load_2_reg_340_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state73_pp0_stage0_iter0;
wire    ap_block_state75_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] empty_11_reg_364;
reg   [31:0] i_load_5_reg_375;
reg   [31:0] i_load_reg_386;
reg   [20:0] reg_449;
reg    ap_block_state80_pp1_stage1_iter0;
wire    ap_block_state82_pp1_stage1_iter1;
wire    ap_block_state84_pp1_stage1_iter2;
wire    ap_block_state86_pp1_stage1_iter3;
wire    ap_block_state88_pp1_stage1_iter4;
reg    ap_block_pp1_stage1_11001;
reg    ap_enable_reg_pp2_iter8;
wire    ap_block_state158_pp2_stage0_iter0;
wire    ap_block_state159_pp2_stage0_iter1;
wire    ap_block_state160_pp2_stage0_iter2;
wire    ap_block_state161_pp2_stage0_iter3;
wire    ap_block_state162_pp2_stage0_iter4;
wire    ap_block_state163_pp2_stage0_iter5;
wire    ap_block_state164_pp2_stage0_iter6;
wire    ap_block_state165_pp2_stage0_iter7;
wire    ap_block_state166_pp2_stage0_iter8;
wire    ap_block_state167_pp2_stage0_iter9;
wire    ap_block_state168_pp2_stage0_iter10;
wire    ap_block_state169_pp2_stage0_iter11;
wire    ap_block_state170_pp2_stage0_iter12;
wire    ap_block_state171_pp2_stage0_iter13;
wire    ap_block_state172_pp2_stage0_iter14;
wire    ap_block_state173_pp2_stage0_iter15;
wire    ap_block_state174_pp2_stage0_iter16;
wire    ap_block_state175_pp2_stage0_iter17;
wire    ap_block_pp2_stage0_11001;
reg   [0:0] icmp_ln115_reg_1187;
reg   [0:0] icmp_ln115_reg_1187_pp2_iter7_reg;
wire    ap_block_state177_pp3_stage0_iter0;
wire    ap_block_state178_pp3_stage0_iter1;
reg    ap_block_state178_io;
wire    ap_block_state179_pp3_stage0_iter2;
reg    ap_block_state179_io;
reg    ap_block_pp3_stage0_11001;
wire    ap_block_state181_pp4_stage0_iter0;
wire    ap_block_state182_pp4_stage0_iter1;
reg    ap_block_state182_io;
wire    ap_block_state183_pp4_stage0_iter2;
reg    ap_block_state183_io;
reg    ap_block_pp4_stage0_11001;
reg   [31:0] epsilon_read_reg_967;
reg   [31:0] vectorSize_read_reg_972;
reg   [31:0] kernelSize_read_reg_982;
reg   [31:0] layerSize_read_reg_987;
wire   [20:0] trunc_ln1503_fu_478_p1;
reg   [20:0] trunc_ln1503_reg_994;
wire   [32:0] ret_V_fu_485_p2;
reg   [32:0] ret_V_reg_999;
wire    ap_CS_fsm_state2;
wire   [41:0] zext_ln57_fu_491_p1;
wire    ap_CS_fsm_state3;
wire   [31:0] add_ln80_fu_499_p2;
reg   [31:0] add_ln80_reg_1009;
wire    ap_CS_fsm_state70;
wire   [62:0] r_V_2_fu_504_p3;
reg   [62:0] r_V_2_reg_1014;
wire   [62:0] zext_ln699_2_fu_511_p1;
reg   [62:0] zext_ln699_2_reg_1019;
wire   [0:0] icmp_ln59_fu_521_p2;
wire    ap_CS_fsm_state71;
wire   [0:0] icmp_ln62_fu_526_p2;
reg   [0:0] icmp_ln62_reg_1028;
wire   [31:0] add_ln141_fu_532_p2;
reg   [31:0] add_ln141_reg_1032;
wire   [0:0] icmp_ln73_fu_622_p2;
wire   [31:0] add_ln73_fu_627_p2;
reg   [31:0] add_ln73_reg_1041;
wire   [41:0] zext_ln887_fu_647_p1;
reg   [41:0] zext_ln887_reg_1046;
reg    ap_block_state74_pp0_stage1_iter0;
wire    ap_block_state76_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [0:0] icmp_ln887_fu_651_p2;
reg   [0:0] icmp_ln887_reg_1051;
wire   [41:0] add_ln700_fu_661_p2;
reg   [41:0] add_ln700_reg_1055;
wire   [0:0] icmp_ln80_fu_672_p2;
reg   [0:0] icmp_ln80_reg_1061;
wire   [0:0] icmp_ln87_fu_691_p2;
wire    ap_CS_fsm_state78;
wire   [31:0] add_ln87_fu_696_p2;
reg   [31:0] add_ln87_reg_1073;
wire   [0:0] icmp_ln92_fu_712_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state79_pp1_stage0_iter0;
wire    ap_block_state81_pp1_stage0_iter1;
wire    ap_block_state83_pp1_stage0_iter2;
wire    ap_block_state85_pp1_stage0_iter3;
wire    ap_block_state87_pp1_stage0_iter4;
wire    ap_block_state89_pp1_stage0_iter5;
wire    ap_block_pp1_stage0_11001;
wire   [63:0] zext_ln97_fu_717_p1;
reg   [63:0] zext_ln97_reg_1082;
reg   [63:0] zext_ln97_reg_1082_pp1_iter1_reg;
reg   [63:0] zext_ln97_reg_1082_pp1_iter2_reg;
reg   [63:0] zext_ln97_reg_1082_pp1_iter3_reg;
wire   [31:0] add_ln100_fu_722_p2;
reg   [31:0] add_ln100_reg_1092;
wire   [31:0] add_ln105_fu_728_p2;
reg   [31:0] add_ln105_reg_1097;
wire   [15:0] trunc_ln1503_1_fu_734_p1;
reg   [15:0] trunc_ln1503_1_reg_1102;
wire   [63:0] zext_ln102_fu_738_p1;
reg   [63:0] zext_ln102_reg_1107;
reg   [63:0] zext_ln102_reg_1107_pp1_iter1_reg;
reg   [63:0] zext_ln102_reg_1107_pp1_iter2_reg;
reg   [15:0] r_V_1_reg_1112;
reg   [15:0] r_V_1_reg_1112_pp1_iter1_reg;
reg   [20:0] state_vector_V_load_2_reg_1132;
reg    ap_enable_reg_pp1_iter1;
wire   [36:0] grp_fu_961_p2;
reg   [36:0] mul_ln699_1_reg_1147;
wire   [41:0] grp_fu_772_p2;
reg   [41:0] mul_ln699_reg_1152;
wire   [41:0] shl_ln_fu_784_p3;
reg   [41:0] shl_ln_reg_1158;
wire   [41:0] add_ln700_1_fu_792_p2;
reg   [41:0] add_ln700_1_reg_1163;
wire   [41:0] add_ln700_2_fu_796_p2;
reg   [41:0] add_ln700_2_reg_1168;
wire    ap_CS_fsm_state90;
wire   [0:0] icmp_ln887_1_fu_806_p2;
reg   [0:0] icmp_ln887_1_reg_1178;
wire   [62:0] grp_wide_div_fu_397_ap_return;
reg  signed [62:0] op2_V_assign_reg_1182;
wire    ap_CS_fsm_state157;
wire   [0:0] icmp_ln115_fu_812_p2;
wire    ap_CS_fsm_pp2_stage0;
reg   [0:0] icmp_ln115_reg_1187_pp2_iter1_reg;
reg   [0:0] icmp_ln115_reg_1187_pp2_iter2_reg;
reg   [0:0] icmp_ln115_reg_1187_pp2_iter3_reg;
reg   [0:0] icmp_ln115_reg_1187_pp2_iter4_reg;
reg   [0:0] icmp_ln115_reg_1187_pp2_iter5_reg;
reg   [0:0] icmp_ln115_reg_1187_pp2_iter6_reg;
reg   [0:0] icmp_ln115_reg_1187_pp2_iter8_reg;
reg   [0:0] icmp_ln115_reg_1187_pp2_iter9_reg;
reg   [0:0] icmp_ln115_reg_1187_pp2_iter10_reg;
reg   [0:0] icmp_ln115_reg_1187_pp2_iter11_reg;
reg   [0:0] icmp_ln115_reg_1187_pp2_iter12_reg;
reg   [0:0] icmp_ln115_reg_1187_pp2_iter13_reg;
reg   [0:0] icmp_ln115_reg_1187_pp2_iter14_reg;
reg   [0:0] icmp_ln115_reg_1187_pp2_iter15_reg;
reg   [0:0] icmp_ln115_reg_1187_pp2_iter16_reg;
wire   [31:0] add_ln115_fu_817_p2;
reg    ap_enable_reg_pp2_iter0;
reg   [9:0] state_vector_V_addr_4_reg_1201;
reg   [9:0] state_vector_V_addr_4_reg_1201_pp2_iter1_reg;
reg   [9:0] state_vector_V_addr_4_reg_1201_pp2_iter2_reg;
reg   [9:0] state_vector_V_addr_4_reg_1201_pp2_iter3_reg;
reg   [9:0] state_vector_V_addr_4_reg_1201_pp2_iter4_reg;
reg   [9:0] state_vector_V_addr_4_reg_1201_pp2_iter5_reg;
reg   [9:0] state_vector_V_addr_4_reg_1201_pp2_iter6_reg;
reg   [9:0] state_vector_V_addr_4_reg_1201_pp2_iter7_reg;
reg   [9:0] state_vector_V_addr_4_reg_1201_pp2_iter8_reg;
reg   [9:0] state_vector_V_addr_4_reg_1201_pp2_iter9_reg;
reg   [9:0] state_vector_V_addr_4_reg_1201_pp2_iter10_reg;
reg   [9:0] state_vector_V_addr_4_reg_1201_pp2_iter11_reg;
reg   [9:0] state_vector_V_addr_4_reg_1201_pp2_iter12_reg;
reg   [9:0] state_vector_V_addr_4_reg_1201_pp2_iter13_reg;
reg   [9:0] state_vector_V_addr_4_reg_1201_pp2_iter14_reg;
reg   [9:0] state_vector_V_addr_4_reg_1201_pp2_iter15_reg;
reg   [9:0] state_vector_V_addr_4_reg_1201_pp2_iter16_reg;
reg   [41:0] temp_data_V_load_reg_1207;
reg    ap_enable_reg_pp2_iter1;
reg   [41:0] tmp_s_reg_1217;
wire   [42:0] add_ln700_3_fu_862_p2;
reg   [42:0] add_ln700_3_reg_1222;
reg   [20:0] trunc_ln209_1_reg_1232;
wire   [0:0] icmp_ln129_fu_897_p2;
wire   [31:0] add_ln129_fu_902_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [31:0] tmp_data_V_3_fu_913_p1;
wire   [31:0] add_ln59_fu_923_p2;
wire    ap_CS_fsm_state180;
wire   [0:0] icmp_ln137_fu_935_p2;
wire   [31:0] add_ln137_fu_940_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [0:0] tmp_last_V_1_fu_951_p2;
reg   [0:0] tmp_last_V_1_reg_1280;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state73;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state79;
reg    ap_block_pp1_stage1_subdone;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state158;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter10;
reg    ap_enable_reg_pp2_iter11;
reg    ap_enable_reg_pp2_iter12;
reg    ap_enable_reg_pp2_iter13;
reg    ap_enable_reg_pp2_iter14;
reg    ap_enable_reg_pp2_iter15;
reg    ap_enable_reg_pp2_iter16;
reg    ap_enable_reg_pp2_iter17;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state177;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state181;
reg   [62:0] grp_wide_div_fu_397_dividend_V;
reg   [41:0] grp_wide_div_fu_397_divisor_V;
reg    grp_wide_div_fu_397_ap_ce;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state176;
wire    ap_CS_fsm_state184;
reg   [31:0] empty_reg_320;
wire   [31:0] zext_ln321_fu_601_p1;
reg   [31:0] ap_phi_mux_storemerge634_in_phi_fu_334_p4;
reg   [31:0] ap_phi_mux_i_load_2_phi_fu_345_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] batch_load_reg_353;
wire   [63:0] zext_ln76_fu_633_p1;
wire   [63:0] zext_ln82_fu_686_p1;
wire   [0:0] and_ln80_fu_681_p2;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln118_fu_823_p1;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln132_fu_908_p1;
wire   [63:0] zext_ln140_fu_946_p1;
wire   [20:0] trunc_ln321_fu_606_p1;
wire    ap_block_pp3_stage0_01001;
wire    ap_block_pp4_stage0_01001;
wire   [20:0] trunc_ln214_1_fu_638_p1;
wire   [32:0] zext_ln215_fu_482_p1;
wire   [20:0] trunc_ln209_fu_495_p1;
wire   [20:0] trunc_ln214_fu_597_p1;
wire   [41:0] zext_ln700_fu_657_p1;
wire   [0:0] icmp_ln80_1_fu_676_p2;
wire   [20:0] shl_ln1503_1_fu_757_p3;
wire   [20:0] grp_fu_772_p0;
wire   [20:0] grp_fu_772_p1;
wire   [41:0] grp_fu_832_p1;
wire   [62:0] grp_fu_832_p2;
wire   [41:0] r_V_3_fu_850_p3;
wire   [42:0] zext_ln209_1_fu_847_p1;
wire   [42:0] zext_ln700_1_fu_858_p1;
wire   [42:0] grp_fu_871_p0;
wire   [20:0] grp_fu_871_p1;
wire   [62:0] grp_fu_871_p2;
wire   [15:0] grp_fu_961_p0;
wire   [20:0] grp_fu_961_p1;
reg    grp_fu_772_ce;
reg    grp_fu_961_ce;
reg    ap_block_state184;
reg   [151:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
wire   [41:0] grp_fu_772_p00;
wire   [41:0] grp_fu_772_p10;
wire   [62:0] grp_fu_832_p10;
wire   [62:0] grp_fu_871_p00;
wire   [36:0] grp_fu_961_p00;
wire   [36:0] grp_fu_961_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 152'd1;
#0 stream_in_V_data_V_0_sel_rd = 1'b0;
#0 stream_in_V_data_V_0_sel_wr = 1'b0;
#0 stream_in_V_data_V_0_state = 2'd0;
#0 stream_in_V_keep_V_0_sel_rd = 1'b0;
#0 stream_in_V_keep_V_0_sel_wr = 1'b0;
#0 stream_in_V_keep_V_0_state = 2'd0;
#0 stream_in_V_strb_V_0_sel_rd = 1'b0;
#0 stream_in_V_strb_V_0_sel_wr = 1'b0;
#0 stream_in_V_strb_V_0_state = 2'd0;
#0 stream_in_V_user_V_0_sel_rd = 1'b0;
#0 stream_in_V_user_V_0_sel_wr = 1'b0;
#0 stream_in_V_user_V_0_state = 2'd0;
#0 stream_in_V_last_V_0_sel_rd = 1'b0;
#0 stream_in_V_last_V_0_sel_wr = 1'b0;
#0 stream_in_V_last_V_0_state = 2'd0;
#0 stream_in_V_id_V_0_sel_rd = 1'b0;
#0 stream_in_V_id_V_0_sel_wr = 1'b0;
#0 stream_in_V_id_V_0_state = 2'd0;
#0 stream_in_V_dest_V_0_sel_rd = 1'b0;
#0 stream_in_V_dest_V_0_sel_wr = 1'b0;
#0 stream_in_V_dest_V_0_state = 2'd0;
#0 stream_out_V_data_V_1_sel_rd = 1'b0;
#0 stream_out_V_data_V_1_sel_wr = 1'b0;
#0 stream_out_V_data_V_1_state = 2'd0;
#0 stream_out_V_keep_V_1_sel_rd = 1'b0;
#0 stream_out_V_keep_V_1_sel_wr = 1'b0;
#0 stream_out_V_keep_V_1_state = 2'd0;
#0 stream_out_V_strb_V_1_sel_rd = 1'b0;
#0 stream_out_V_strb_V_1_sel_wr = 1'b0;
#0 stream_out_V_strb_V_1_state = 2'd0;
#0 stream_out_V_user_V_1_sel_rd = 1'b0;
#0 stream_out_V_user_V_1_sel_wr = 1'b0;
#0 stream_out_V_user_V_1_state = 2'd0;
#0 stream_out_V_last_V_1_sel_rd = 1'b0;
#0 stream_out_V_last_V_1_sel_wr = 1'b0;
#0 stream_out_V_last_V_1_state = 2'd0;
#0 stream_out_V_id_V_1_sel_rd = 1'b0;
#0 stream_out_V_id_V_1_sel_wr = 1'b0;
#0 stream_out_V_id_V_1_state = 2'd0;
#0 stream_out_V_dest_V_1_sel_rd = 1'b0;
#0 stream_out_V_dest_V_1_sel_wr = 1'b0;
#0 stream_out_V_dest_V_1_state = 2'd0;
#0 ip_index = 32'd0;
#0 channel_keep_V = 4'd0;
#0 channel_strb_V = 4'd0;
#0 channel_user_V = 2'd0;
#0 channel_last_V = 1'd0;
#0 channel_id_V = 5'd0;
#0 channel_dest_V = 6'd0;
#0 random_value_V = 21'd0;
#0 sum_V = 42'd0;
#0 i = 32'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
#0 ap_enable_reg_pp2_iter12 = 1'b0;
#0 ap_enable_reg_pp2_iter13 = 1'b0;
#0 ap_enable_reg_pp2_iter14 = 1'b0;
#0 ap_enable_reg_pp2_iter15 = 1'b0;
#0 ap_enable_reg_pp2_iter16 = 1'b0;
#0 ap_enable_reg_pp2_iter17 = 1'b0;
end

sbs_fixedpoint_state_vector_V #(
    .DataWidth( 21 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
state_vector_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(state_vector_V_address0),
    .ce0(state_vector_V_ce0),
    .we0(state_vector_V_we0),
    .d0(trunc_ln214_1_fu_638_p1),
    .q0(state_vector_V_q0),
    .address1(state_vector_V_address1),
    .ce1(state_vector_V_ce1),
    .we1(state_vector_V_we1),
    .d1(trunc_ln209_1_reg_1232),
    .q1(state_vector_V_q1)
);

sbs_fixedpoint_spike_matrix #(
    .DataWidth( 32 ),
    .AddressRange( 3600 ),
    .AddressWidth( 12 ))
spike_matrix_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(spike_matrix_address0),
    .ce0(spike_matrix_ce0),
    .we0(spike_matrix_we0),
    .d0(i_load_2_reg_340_pp0_iter1_reg),
    .q0(spike_matrix_q0)
);

sbs_fixedpoint_temp_data_V #(
    .DataWidth( 42 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
temp_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp_data_V_address0),
    .ce0(temp_data_V_ce0),
    .we0(temp_data_V_we0),
    .d0(temp_data_V_d0),
    .q0(temp_data_V_q0)
);

sbs_fixedpoint_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
sbs_fixedpoint_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .layerSize(layerSize),
    .kernelSize(kernelSize),
    .vectorSize(vectorSize),
    .epsilon(epsilon)
);

wide_div grp_wide_div_fu_397(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .dividend_V(grp_wide_div_fu_397_dividend_V),
    .divisor_V(grp_wide_div_fu_397_divisor_V),
    .ap_return(grp_wide_div_fu_397_ap_return),
    .ap_ce(grp_wide_div_fu_397_ap_ce)
);

sbs_fixedpoint_mul_21ns_21ns_42_6_1 #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 21 ),
    .din1_WIDTH( 21 ),
    .dout_WIDTH( 42 ))
sbs_fixedpoint_mul_21ns_21ns_42_6_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_772_p0),
    .din1(grp_fu_772_p1),
    .ce(grp_fu_772_ce),
    .dout(grp_fu_772_p2)
);

sbs_fixedpoint_mul_63s_42ns_63_7_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 63 ),
    .din1_WIDTH( 42 ),
    .dout_WIDTH( 63 ))
sbs_fixedpoint_mul_63s_42ns_63_7_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(op2_V_assign_reg_1182),
    .din1(grp_fu_832_p1),
    .ce(1'b1),
    .dout(grp_fu_832_p2)
);

sbs_fixedpoint_mul_43ns_21ns_63_7_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 43 ),
    .din1_WIDTH( 21 ),
    .dout_WIDTH( 63 ))
sbs_fixedpoint_mul_43ns_21ns_63_7_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_871_p0),
    .din1(grp_fu_871_p1),
    .ce(1'b1),
    .dout(grp_fu_871_p2)
);

sbs_fixedpoint_mul_mul_16ns_21ns_37_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 21 ),
    .dout_WIDTH( 37 ))
sbs_fixedpoint_mul_mul_16ns_21ns_37_3_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_961_p0),
    .din1(grp_fu_961_p1),
    .ce(grp_fu_961_ce),
    .dout(grp_fu_961_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state73) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state72) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state72) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state79) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state78) & (icmp_ln87_fu_691_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_subdone)))) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end else if (((1'b1 == ap_CS_fsm_state78) & (icmp_ln87_fu_691_p2 == 1'd0))) begin
            ap_enable_reg_pp1_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state158) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state157)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state158)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state158);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter17 <= ap_enable_reg_pp2_iter16;
        end else if ((1'b1 == ap_CS_fsm_state157)) begin
            ap_enable_reg_pp2_iter17 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state177) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state78) & (icmp_ln87_fu_691_p2 == 1'd1))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state177)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state177);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if (((1'b1 == ap_CS_fsm_state78) & (icmp_ln87_fu_691_p2 == 1'd1))) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp4_exit_iter0_state181) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state71) & (icmp_ln59_fu_521_p2 == 1'd0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state181)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state181);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if (((1'b1 == ap_CS_fsm_state71) & (icmp_ln59_fu_521_p2 == 1'd0))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_data_V_0_ack_out == 1'b1) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
            stream_in_V_data_V_0_sel_rd <= ~stream_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_data_V_0_ack_in == 1'b1) & (stream_in_V_data_V_0_vld_in == 1'b1))) begin
            stream_in_V_data_V_0_sel_wr <= ~stream_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_data_V_0_vld_in == 1'b0) & (stream_in_V_data_V_0_state == 2'd2)) | ((stream_in_V_data_V_0_vld_in == 1'b0) & (stream_in_V_data_V_0_ack_out == 1'b1) & (stream_in_V_data_V_0_state == 2'd3)))) begin
            stream_in_V_data_V_0_state <= 2'd2;
        end else if ((((stream_in_V_data_V_0_ack_out == 1'b0) & (stream_in_V_data_V_0_state == 2'd1)) | ((stream_in_V_data_V_0_ack_out == 1'b0) & (stream_in_V_data_V_0_vld_in == 1'b1) & (stream_in_V_data_V_0_state == 2'd3)))) begin
            stream_in_V_data_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_data_V_0_vld_in == 1'b0) & (stream_in_V_data_V_0_ack_out == 1'b1)) & ~((stream_in_V_data_V_0_ack_out == 1'b0) & (stream_in_V_data_V_0_vld_in == 1'b1)) & (stream_in_V_data_V_0_state == 2'd3)) | ((stream_in_V_data_V_0_ack_out == 1'b1) & (stream_in_V_data_V_0_state == 2'd1)) | ((stream_in_V_data_V_0_vld_in == 1'b1) & (stream_in_V_data_V_0_state == 2'd2)))) begin
            stream_in_V_data_V_0_state <= 2'd3;
        end else begin
            stream_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_dest_V_0_ack_out == 1'b1) & (stream_in_V_dest_V_0_vld_out == 1'b1))) begin
            stream_in_V_dest_V_0_sel_rd <= ~stream_in_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_dest_V_0_ack_in == 1'b1) & (stream_in_V_dest_V_0_vld_in == 1'b1))) begin
            stream_in_V_dest_V_0_sel_wr <= ~stream_in_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_dest_V_0_vld_in == 1'b0) & (stream_in_V_dest_V_0_state == 2'd2)) | ((stream_in_V_dest_V_0_vld_in == 1'b0) & (stream_in_V_dest_V_0_state == 2'd3) & (stream_in_V_dest_V_0_ack_out == 1'b1)))) begin
            stream_in_V_dest_V_0_state <= 2'd2;
        end else if ((((stream_in_V_dest_V_0_ack_out == 1'b0) & (stream_in_V_dest_V_0_state == 2'd1)) | ((stream_in_V_dest_V_0_ack_out == 1'b0) & (stream_in_V_dest_V_0_state == 2'd3) & (stream_in_V_dest_V_0_vld_in == 1'b1)))) begin
            stream_in_V_dest_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_dest_V_0_vld_in == 1'b0) & (stream_in_V_dest_V_0_ack_out == 1'b1)) & ~((stream_in_V_dest_V_0_ack_out == 1'b0) & (stream_in_V_dest_V_0_vld_in == 1'b1)) & (stream_in_V_dest_V_0_state == 2'd3)) | ((stream_in_V_dest_V_0_state == 2'd1) & (stream_in_V_dest_V_0_ack_out == 1'b1)) | ((stream_in_V_dest_V_0_vld_in == 1'b1) & (stream_in_V_dest_V_0_state == 2'd2)))) begin
            stream_in_V_dest_V_0_state <= 2'd3;
        end else begin
            stream_in_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_id_V_0_ack_out == 1'b1) & (stream_in_V_id_V_0_vld_out == 1'b1))) begin
            stream_in_V_id_V_0_sel_rd <= ~stream_in_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_id_V_0_ack_in == 1'b1) & (stream_in_V_id_V_0_vld_in == 1'b1))) begin
            stream_in_V_id_V_0_sel_wr <= ~stream_in_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_id_V_0_vld_in == 1'b0) & (stream_in_V_id_V_0_state == 2'd2)) | ((stream_in_V_id_V_0_vld_in == 1'b0) & (stream_in_V_id_V_0_state == 2'd3) & (stream_in_V_id_V_0_ack_out == 1'b1)))) begin
            stream_in_V_id_V_0_state <= 2'd2;
        end else if ((((stream_in_V_id_V_0_ack_out == 1'b0) & (stream_in_V_id_V_0_state == 2'd1)) | ((stream_in_V_id_V_0_ack_out == 1'b0) & (stream_in_V_id_V_0_state == 2'd3) & (stream_in_V_id_V_0_vld_in == 1'b1)))) begin
            stream_in_V_id_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_id_V_0_vld_in == 1'b0) & (stream_in_V_id_V_0_ack_out == 1'b1)) & ~((stream_in_V_id_V_0_ack_out == 1'b0) & (stream_in_V_id_V_0_vld_in == 1'b1)) & (stream_in_V_id_V_0_state == 2'd3)) | ((stream_in_V_id_V_0_state == 2'd1) & (stream_in_V_id_V_0_ack_out == 1'b1)) | ((stream_in_V_id_V_0_vld_in == 1'b1) & (stream_in_V_id_V_0_state == 2'd2)))) begin
            stream_in_V_id_V_0_state <= 2'd3;
        end else begin
            stream_in_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_keep_V_0_ack_out == 1'b1) & (stream_in_V_keep_V_0_vld_out == 1'b1))) begin
            stream_in_V_keep_V_0_sel_rd <= ~stream_in_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_keep_V_0_ack_in == 1'b1) & (stream_in_V_keep_V_0_vld_in == 1'b1))) begin
            stream_in_V_keep_V_0_sel_wr <= ~stream_in_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_keep_V_0_vld_in == 1'b0) & (stream_in_V_keep_V_0_state == 2'd2)) | ((stream_in_V_keep_V_0_vld_in == 1'b0) & (stream_in_V_keep_V_0_state == 2'd3) & (stream_in_V_keep_V_0_ack_out == 1'b1)))) begin
            stream_in_V_keep_V_0_state <= 2'd2;
        end else if ((((stream_in_V_keep_V_0_ack_out == 1'b0) & (stream_in_V_keep_V_0_state == 2'd1)) | ((stream_in_V_keep_V_0_ack_out == 1'b0) & (stream_in_V_keep_V_0_state == 2'd3) & (stream_in_V_keep_V_0_vld_in == 1'b1)))) begin
            stream_in_V_keep_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_keep_V_0_vld_in == 1'b0) & (stream_in_V_keep_V_0_ack_out == 1'b1)) & ~((stream_in_V_keep_V_0_ack_out == 1'b0) & (stream_in_V_keep_V_0_vld_in == 1'b1)) & (stream_in_V_keep_V_0_state == 2'd3)) | ((stream_in_V_keep_V_0_state == 2'd1) & (stream_in_V_keep_V_0_ack_out == 1'b1)) | ((stream_in_V_keep_V_0_vld_in == 1'b1) & (stream_in_V_keep_V_0_state == 2'd2)))) begin
            stream_in_V_keep_V_0_state <= 2'd3;
        end else begin
            stream_in_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_last_V_0_ack_out == 1'b1) & (stream_in_V_last_V_0_vld_out == 1'b1))) begin
            stream_in_V_last_V_0_sel_rd <= ~stream_in_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_last_V_0_ack_in == 1'b1) & (stream_in_V_last_V_0_vld_in == 1'b1))) begin
            stream_in_V_last_V_0_sel_wr <= ~stream_in_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_last_V_0_vld_in == 1'b0) & (stream_in_V_last_V_0_state == 2'd2)) | ((stream_in_V_last_V_0_vld_in == 1'b0) & (stream_in_V_last_V_0_state == 2'd3) & (stream_in_V_last_V_0_ack_out == 1'b1)))) begin
            stream_in_V_last_V_0_state <= 2'd2;
        end else if ((((stream_in_V_last_V_0_ack_out == 1'b0) & (stream_in_V_last_V_0_state == 2'd1)) | ((stream_in_V_last_V_0_ack_out == 1'b0) & (stream_in_V_last_V_0_state == 2'd3) & (stream_in_V_last_V_0_vld_in == 1'b1)))) begin
            stream_in_V_last_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_last_V_0_vld_in == 1'b0) & (stream_in_V_last_V_0_ack_out == 1'b1)) & ~((stream_in_V_last_V_0_ack_out == 1'b0) & (stream_in_V_last_V_0_vld_in == 1'b1)) & (stream_in_V_last_V_0_state == 2'd3)) | ((stream_in_V_last_V_0_state == 2'd1) & (stream_in_V_last_V_0_ack_out == 1'b1)) | ((stream_in_V_last_V_0_vld_in == 1'b1) & (stream_in_V_last_V_0_state == 2'd2)))) begin
            stream_in_V_last_V_0_state <= 2'd3;
        end else begin
            stream_in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_strb_V_0_ack_out == 1'b1) & (stream_in_V_strb_V_0_vld_out == 1'b1))) begin
            stream_in_V_strb_V_0_sel_rd <= ~stream_in_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_strb_V_0_ack_in == 1'b1) & (stream_in_V_strb_V_0_vld_in == 1'b1))) begin
            stream_in_V_strb_V_0_sel_wr <= ~stream_in_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_strb_V_0_vld_in == 1'b0) & (stream_in_V_strb_V_0_state == 2'd2)) | ((stream_in_V_strb_V_0_vld_in == 1'b0) & (stream_in_V_strb_V_0_state == 2'd3) & (stream_in_V_strb_V_0_ack_out == 1'b1)))) begin
            stream_in_V_strb_V_0_state <= 2'd2;
        end else if ((((stream_in_V_strb_V_0_ack_out == 1'b0) & (stream_in_V_strb_V_0_state == 2'd1)) | ((stream_in_V_strb_V_0_ack_out == 1'b0) & (stream_in_V_strb_V_0_state == 2'd3) & (stream_in_V_strb_V_0_vld_in == 1'b1)))) begin
            stream_in_V_strb_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_strb_V_0_vld_in == 1'b0) & (stream_in_V_strb_V_0_ack_out == 1'b1)) & ~((stream_in_V_strb_V_0_ack_out == 1'b0) & (stream_in_V_strb_V_0_vld_in == 1'b1)) & (stream_in_V_strb_V_0_state == 2'd3)) | ((stream_in_V_strb_V_0_state == 2'd1) & (stream_in_V_strb_V_0_ack_out == 1'b1)) | ((stream_in_V_strb_V_0_vld_in == 1'b1) & (stream_in_V_strb_V_0_state == 2'd2)))) begin
            stream_in_V_strb_V_0_state <= 2'd3;
        end else begin
            stream_in_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_user_V_0_ack_out == 1'b1) & (stream_in_V_user_V_0_vld_out == 1'b1))) begin
            stream_in_V_user_V_0_sel_rd <= ~stream_in_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_user_V_0_ack_in == 1'b1) & (stream_in_V_user_V_0_vld_in == 1'b1))) begin
            stream_in_V_user_V_0_sel_wr <= ~stream_in_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_user_V_0_vld_in == 1'b0) & (stream_in_V_user_V_0_state == 2'd2)) | ((stream_in_V_user_V_0_vld_in == 1'b0) & (stream_in_V_user_V_0_state == 2'd3) & (stream_in_V_user_V_0_ack_out == 1'b1)))) begin
            stream_in_V_user_V_0_state <= 2'd2;
        end else if ((((stream_in_V_user_V_0_ack_out == 1'b0) & (stream_in_V_user_V_0_state == 2'd1)) | ((stream_in_V_user_V_0_ack_out == 1'b0) & (stream_in_V_user_V_0_state == 2'd3) & (stream_in_V_user_V_0_vld_in == 1'b1)))) begin
            stream_in_V_user_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_user_V_0_vld_in == 1'b0) & (stream_in_V_user_V_0_ack_out == 1'b1)) & ~((stream_in_V_user_V_0_ack_out == 1'b0) & (stream_in_V_user_V_0_vld_in == 1'b1)) & (stream_in_V_user_V_0_state == 2'd3)) | ((stream_in_V_user_V_0_state == 2'd1) & (stream_in_V_user_V_0_ack_out == 1'b1)) | ((stream_in_V_user_V_0_vld_in == 1'b1) & (stream_in_V_user_V_0_state == 2'd2)))) begin
            stream_in_V_user_V_0_state <= 2'd3;
        end else begin
            stream_in_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_data_V_1_ack_out == 1'b1) & (stream_out_V_data_V_1_vld_out == 1'b1))) begin
            stream_out_V_data_V_1_sel_rd <= ~stream_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_data_V_1_ack_in == 1'b1) & (stream_out_V_data_V_1_vld_in == 1'b1))) begin
            stream_out_V_data_V_1_sel_wr <= ~stream_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_state == 2'd2)) | ((stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_state == 2'd3) & (stream_out_V_data_V_1_ack_out == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd2;
        end else if ((((stream_out_TREADY == 1'b0) & (stream_out_V_data_V_1_state == 2'd1)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_data_V_1_state == 2'd3) & (stream_out_V_data_V_1_vld_in == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_ack_out == 1'b1)) & ~((stream_out_TREADY == 1'b0) & (stream_out_V_data_V_1_vld_in == 1'b1)) & (stream_out_V_data_V_1_state == 2'd3)) | ((stream_out_V_data_V_1_state == 2'd1) & (stream_out_V_data_V_1_ack_out == 1'b1)) | ((stream_out_V_data_V_1_vld_in == 1'b1) & (stream_out_V_data_V_1_state == 2'd2)))) begin
            stream_out_V_data_V_1_state <= 2'd3;
        end else begin
            stream_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_dest_V_1_ack_out == 1'b1) & (stream_out_V_dest_V_1_vld_out == 1'b1))) begin
            stream_out_V_dest_V_1_sel_rd <= ~stream_out_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_dest_V_1_ack_in == 1'b1) & (stream_out_V_dest_V_1_vld_in == 1'b1))) begin
            stream_out_V_dest_V_1_sel_wr <= ~stream_out_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_dest_V_1_vld_in == 1'b0) & (stream_out_V_dest_V_1_state == 2'd2)) | ((stream_out_V_dest_V_1_vld_in == 1'b0) & (stream_out_V_dest_V_1_state == 2'd3) & (stream_out_V_dest_V_1_ack_out == 1'b1)))) begin
            stream_out_V_dest_V_1_state <= 2'd2;
        end else if ((((stream_out_TREADY == 1'b0) & (stream_out_V_dest_V_1_state == 2'd1)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_dest_V_1_state == 2'd3) & (stream_out_V_dest_V_1_vld_in == 1'b1)))) begin
            stream_out_V_dest_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_dest_V_1_vld_in == 1'b0) & (stream_out_V_dest_V_1_ack_out == 1'b1)) & ~((stream_out_TREADY == 1'b0) & (stream_out_V_dest_V_1_vld_in == 1'b1)) & (stream_out_V_dest_V_1_state == 2'd3)) | ((stream_out_V_dest_V_1_state == 2'd1) & (stream_out_V_dest_V_1_ack_out == 1'b1)) | ((stream_out_V_dest_V_1_vld_in == 1'b1) & (stream_out_V_dest_V_1_state == 2'd2)))) begin
            stream_out_V_dest_V_1_state <= 2'd3;
        end else begin
            stream_out_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_id_V_1_ack_out == 1'b1) & (stream_out_V_id_V_1_vld_out == 1'b1))) begin
            stream_out_V_id_V_1_sel_rd <= ~stream_out_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_id_V_1_ack_in == 1'b1) & (stream_out_V_id_V_1_vld_in == 1'b1))) begin
            stream_out_V_id_V_1_sel_wr <= ~stream_out_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_id_V_1_vld_in == 1'b0) & (stream_out_V_id_V_1_state == 2'd2)) | ((stream_out_V_id_V_1_vld_in == 1'b0) & (stream_out_V_id_V_1_state == 2'd3) & (stream_out_V_id_V_1_ack_out == 1'b1)))) begin
            stream_out_V_id_V_1_state <= 2'd2;
        end else if ((((stream_out_TREADY == 1'b0) & (stream_out_V_id_V_1_state == 2'd1)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_id_V_1_state == 2'd3) & (stream_out_V_id_V_1_vld_in == 1'b1)))) begin
            stream_out_V_id_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_id_V_1_vld_in == 1'b0) & (stream_out_V_id_V_1_ack_out == 1'b1)) & ~((stream_out_TREADY == 1'b0) & (stream_out_V_id_V_1_vld_in == 1'b1)) & (stream_out_V_id_V_1_state == 2'd3)) | ((stream_out_V_id_V_1_state == 2'd1) & (stream_out_V_id_V_1_ack_out == 1'b1)) | ((stream_out_V_id_V_1_vld_in == 1'b1) & (stream_out_V_id_V_1_state == 2'd2)))) begin
            stream_out_V_id_V_1_state <= 2'd3;
        end else begin
            stream_out_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_keep_V_1_ack_out == 1'b1) & (stream_out_V_keep_V_1_vld_out == 1'b1))) begin
            stream_out_V_keep_V_1_sel_rd <= ~stream_out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_keep_V_1_ack_in == 1'b1) & (stream_out_V_keep_V_1_vld_in == 1'b1))) begin
            stream_out_V_keep_V_1_sel_wr <= ~stream_out_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_keep_V_1_vld_in == 1'b0) & (stream_out_V_keep_V_1_state == 2'd2)) | ((stream_out_V_keep_V_1_vld_in == 1'b0) & (stream_out_V_keep_V_1_state == 2'd3) & (stream_out_V_keep_V_1_ack_out == 1'b1)))) begin
            stream_out_V_keep_V_1_state <= 2'd2;
        end else if ((((stream_out_TREADY == 1'b0) & (stream_out_V_keep_V_1_state == 2'd1)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_keep_V_1_state == 2'd3) & (stream_out_V_keep_V_1_vld_in == 1'b1)))) begin
            stream_out_V_keep_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_keep_V_1_vld_in == 1'b0) & (stream_out_V_keep_V_1_ack_out == 1'b1)) & ~((stream_out_TREADY == 1'b0) & (stream_out_V_keep_V_1_vld_in == 1'b1)) & (stream_out_V_keep_V_1_state == 2'd3)) | ((stream_out_V_keep_V_1_state == 2'd1) & (stream_out_V_keep_V_1_ack_out == 1'b1)) | ((stream_out_V_keep_V_1_vld_in == 1'b1) & (stream_out_V_keep_V_1_state == 2'd2)))) begin
            stream_out_V_keep_V_1_state <= 2'd3;
        end else begin
            stream_out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_last_V_1_ack_out == 1'b1) & (stream_out_V_last_V_1_vld_out == 1'b1))) begin
            stream_out_V_last_V_1_sel_rd <= ~stream_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_last_V_1_ack_in == 1'b1) & (stream_out_V_last_V_1_vld_in == 1'b1))) begin
            stream_out_V_last_V_1_sel_wr <= ~stream_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_last_V_1_vld_in == 1'b0) & (stream_out_V_last_V_1_state == 2'd2)) | ((stream_out_V_last_V_1_vld_in == 1'b0) & (stream_out_V_last_V_1_state == 2'd3) & (stream_out_V_last_V_1_ack_out == 1'b1)))) begin
            stream_out_V_last_V_1_state <= 2'd2;
        end else if ((((stream_out_TREADY == 1'b0) & (stream_out_V_last_V_1_state == 2'd1)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_last_V_1_state == 2'd3) & (stream_out_V_last_V_1_vld_in == 1'b1)))) begin
            stream_out_V_last_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_last_V_1_vld_in == 1'b0) & (stream_out_V_last_V_1_ack_out == 1'b1)) & ~((stream_out_TREADY == 1'b0) & (stream_out_V_last_V_1_vld_in == 1'b1)) & (stream_out_V_last_V_1_state == 2'd3)) | ((stream_out_V_last_V_1_state == 2'd1) & (stream_out_V_last_V_1_ack_out == 1'b1)) | ((stream_out_V_last_V_1_vld_in == 1'b1) & (stream_out_V_last_V_1_state == 2'd2)))) begin
            stream_out_V_last_V_1_state <= 2'd3;
        end else begin
            stream_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_strb_V_1_ack_out == 1'b1) & (stream_out_V_strb_V_1_vld_out == 1'b1))) begin
            stream_out_V_strb_V_1_sel_rd <= ~stream_out_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_strb_V_1_ack_in == 1'b1) & (stream_out_V_strb_V_1_vld_in == 1'b1))) begin
            stream_out_V_strb_V_1_sel_wr <= ~stream_out_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_strb_V_1_vld_in == 1'b0) & (stream_out_V_strb_V_1_state == 2'd2)) | ((stream_out_V_strb_V_1_vld_in == 1'b0) & (stream_out_V_strb_V_1_state == 2'd3) & (stream_out_V_strb_V_1_ack_out == 1'b1)))) begin
            stream_out_V_strb_V_1_state <= 2'd2;
        end else if ((((stream_out_TREADY == 1'b0) & (stream_out_V_strb_V_1_state == 2'd1)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_strb_V_1_state == 2'd3) & (stream_out_V_strb_V_1_vld_in == 1'b1)))) begin
            stream_out_V_strb_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_strb_V_1_vld_in == 1'b0) & (stream_out_V_strb_V_1_ack_out == 1'b1)) & ~((stream_out_TREADY == 1'b0) & (stream_out_V_strb_V_1_vld_in == 1'b1)) & (stream_out_V_strb_V_1_state == 2'd3)) | ((stream_out_V_strb_V_1_state == 2'd1) & (stream_out_V_strb_V_1_ack_out == 1'b1)) | ((stream_out_V_strb_V_1_vld_in == 1'b1) & (stream_out_V_strb_V_1_state == 2'd2)))) begin
            stream_out_V_strb_V_1_state <= 2'd3;
        end else begin
            stream_out_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_user_V_1_ack_out == 1'b1) & (stream_out_V_user_V_1_vld_out == 1'b1))) begin
            stream_out_V_user_V_1_sel_rd <= ~stream_out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_user_V_1_ack_in == 1'b1) & (stream_out_V_user_V_1_vld_in == 1'b1))) begin
            stream_out_V_user_V_1_sel_wr <= ~stream_out_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_user_V_1_vld_in == 1'b0) & (stream_out_V_user_V_1_state == 2'd2)) | ((stream_out_V_user_V_1_vld_in == 1'b0) & (stream_out_V_user_V_1_state == 2'd3) & (stream_out_V_user_V_1_ack_out == 1'b1)))) begin
            stream_out_V_user_V_1_state <= 2'd2;
        end else if ((((stream_out_TREADY == 1'b0) & (stream_out_V_user_V_1_state == 2'd1)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_user_V_1_state == 2'd3) & (stream_out_V_user_V_1_vld_in == 1'b1)))) begin
            stream_out_V_user_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_user_V_1_vld_in == 1'b0) & (stream_out_V_user_V_1_ack_out == 1'b1)) & ~((stream_out_TREADY == 1'b0) & (stream_out_V_user_V_1_vld_in == 1'b1)) & (stream_out_V_user_V_1_state == 2'd3)) | ((stream_out_V_user_V_1_state == 2'd1) & (stream_out_V_user_V_1_ack_out == 1'b1)) | ((stream_out_V_user_V_1_vld_in == 1'b1) & (stream_out_V_user_V_1_state == 2'd2)))) begin
            stream_out_V_user_V_1_state <= 2'd3;
        end else begin
            stream_out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        batch_load_reg_353 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state176)) begin
        batch_load_reg_353 <= add_ln87_reg_1073;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln137_reg_1266 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        channel_last_V <= tmp_last_V_1_reg_1280;
    end else if (((1'b1 == ap_CS_fsm_state72) & (icmp_ln62_reg_1028 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
        channel_last_V <= stream_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln115_fu_812_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        empty_11_reg_364 <= add_ln115_fu_817_p2;
    end else if ((1'b1 == ap_CS_fsm_state157)) begin
        empty_11_reg_364 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state180)) begin
        empty_reg_320 <= add_ln59_fu_923_p2;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        empty_reg_320 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        i <= i_load_reg_386;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i <= i_load_5_reg_375;
    end else if (((1'b1 == ap_CS_fsm_state176) & (icmp_ln887_1_reg_1178 == 1'd0))) begin
        i <= vectorSize_read_reg_972;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln92_reg_1078 == 1'd1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        i <= add_ln105_reg_1097;
    end else if (((1'b1 == ap_CS_fsm_state78) & (icmp_ln87_fu_691_p2 == 1'd0))) begin
        i <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i <= ap_phi_mux_i_load_2_phi_fu_345_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln73_reg_1037 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_load_2_reg_340 <= add_ln73_reg_1041;
    end else if (((1'b1 == ap_CS_fsm_state72) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
        i_load_2_reg_340 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state78) & (icmp_ln87_fu_691_p2 == 1'd1))) begin
        i_load_5_reg_375 <= 32'd0;
    end else if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln129_fu_897_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        i_load_5_reg_375 <= add_ln129_fu_902_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) & (icmp_ln59_fu_521_p2 == 1'd0))) begin
        i_load_reg_386 <= 32'd0;
    end else if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln137_fu_935_p2 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        i_load_reg_386 <= add_ln137_fu_940_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        sum_V <= add_ln700_2_reg_1168;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln887_reg_1051 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_V <= add_ln700_reg_1055;
    end else if ((((1'b1 == ap_CS_fsm_state78) & (icmp_ln87_fu_691_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state72) & (stream_in_V_data_V_0_vld_out == 1'b1)))) begin
        sum_V <= 42'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln92_fu_712_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln100_reg_1092 <= add_ln100_fu_722_p2;
        add_ln105_reg_1097 <= add_ln105_fu_728_p2;
        zext_ln97_reg_1082[31 : 0] <= zext_ln97_fu_717_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) & (icmp_ln59_fu_521_p2 == 1'd0))) begin
        add_ln141_reg_1032 <= add_ln141_fu_532_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln700_1_reg_1163 <= add_ln700_1_fu_792_p2;
        icmp_ln92_reg_1078 <= icmp_ln92_fu_712_p2;
        mul_ln699_1_reg_1147 <= grp_fu_961_p2;
        zext_ln97_reg_1082_pp1_iter1_reg[31 : 0] <= zext_ln97_reg_1082[31 : 0];
        zext_ln97_reg_1082_pp1_iter2_reg[31 : 0] <= zext_ln97_reg_1082_pp1_iter1_reg[31 : 0];
        zext_ln97_reg_1082_pp1_iter3_reg[31 : 0] <= zext_ln97_reg_1082_pp1_iter2_reg[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        add_ln700_2_reg_1168 <= add_ln700_2_fu_796_p2;
        mul_ln699_reg_1152 <= grp_fu_772_p2;
        r_V_1_reg_1112_pp1_iter1_reg <= r_V_1_reg_1112;
        shl_ln_reg_1158[41 : 5] <= shl_ln_fu_784_p3[41 : 5];
        zext_ln102_reg_1107_pp1_iter1_reg[31 : 0] <= zext_ln102_reg_1107[31 : 0];
        zext_ln102_reg_1107_pp1_iter2_reg[31 : 0] <= zext_ln102_reg_1107_pp1_iter1_reg[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_reg_1187_pp2_iter8_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        add_ln700_3_reg_1222 <= add_ln700_3_fu_862_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln887_fu_651_p2 == 1'd1) & (icmp_ln73_reg_1037 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln700_reg_1055 <= add_ln700_fu_661_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln73_reg_1041 <= add_ln73_fu_627_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        add_ln80_reg_1009 <= add_ln80_fu_499_p2;
        r_V_2_reg_1014[62 : 42] <= r_V_2_fu_504_p3[62 : 42];
        zext_ln699_2_reg_1019[20 : 0] <= zext_ln699_2_fu_511_p1[20 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        add_ln87_reg_1073 <= add_ln87_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state72) & (icmp_ln62_reg_1028 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
        channel_dest_V <= stream_in_V_dest_V_0_data_out;
        channel_id_V <= stream_in_V_id_V_0_data_out;
        channel_keep_V <= stream_in_V_keep_V_0_data_out;
        channel_strb_V <= stream_in_V_strb_V_0_data_out;
        channel_user_V <= stream_in_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        epsilon_read_reg_967 <= epsilon;
        kernelSize_read_reg_982 <= kernelSize;
        layerSize_read_reg_987 <= layerSize;
        trunc_ln1503_reg_994 <= trunc_ln1503_fu_478_p1;
        vectorSize_read_reg_972 <= vectorSize;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_load_2_reg_340_pp0_iter1_reg <= i_load_2_reg_340;
        icmp_ln73_reg_1037 <= icmp_ln73_fu_622_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln115_reg_1187 <= icmp_ln115_fu_812_p2;
        icmp_ln115_reg_1187_pp2_iter1_reg <= icmp_ln115_reg_1187;
        state_vector_V_addr_4_reg_1201_pp2_iter1_reg <= state_vector_V_addr_4_reg_1201;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln115_reg_1187_pp2_iter10_reg <= icmp_ln115_reg_1187_pp2_iter9_reg;
        icmp_ln115_reg_1187_pp2_iter11_reg <= icmp_ln115_reg_1187_pp2_iter10_reg;
        icmp_ln115_reg_1187_pp2_iter12_reg <= icmp_ln115_reg_1187_pp2_iter11_reg;
        icmp_ln115_reg_1187_pp2_iter13_reg <= icmp_ln115_reg_1187_pp2_iter12_reg;
        icmp_ln115_reg_1187_pp2_iter14_reg <= icmp_ln115_reg_1187_pp2_iter13_reg;
        icmp_ln115_reg_1187_pp2_iter15_reg <= icmp_ln115_reg_1187_pp2_iter14_reg;
        icmp_ln115_reg_1187_pp2_iter16_reg <= icmp_ln115_reg_1187_pp2_iter15_reg;
        icmp_ln115_reg_1187_pp2_iter2_reg <= icmp_ln115_reg_1187_pp2_iter1_reg;
        icmp_ln115_reg_1187_pp2_iter3_reg <= icmp_ln115_reg_1187_pp2_iter2_reg;
        icmp_ln115_reg_1187_pp2_iter4_reg <= icmp_ln115_reg_1187_pp2_iter3_reg;
        icmp_ln115_reg_1187_pp2_iter5_reg <= icmp_ln115_reg_1187_pp2_iter4_reg;
        icmp_ln115_reg_1187_pp2_iter6_reg <= icmp_ln115_reg_1187_pp2_iter5_reg;
        icmp_ln115_reg_1187_pp2_iter7_reg <= icmp_ln115_reg_1187_pp2_iter6_reg;
        icmp_ln115_reg_1187_pp2_iter8_reg <= icmp_ln115_reg_1187_pp2_iter7_reg;
        icmp_ln115_reg_1187_pp2_iter9_reg <= icmp_ln115_reg_1187_pp2_iter8_reg;
        state_vector_V_addr_4_reg_1201_pp2_iter10_reg <= state_vector_V_addr_4_reg_1201_pp2_iter9_reg;
        state_vector_V_addr_4_reg_1201_pp2_iter11_reg <= state_vector_V_addr_4_reg_1201_pp2_iter10_reg;
        state_vector_V_addr_4_reg_1201_pp2_iter12_reg <= state_vector_V_addr_4_reg_1201_pp2_iter11_reg;
        state_vector_V_addr_4_reg_1201_pp2_iter13_reg <= state_vector_V_addr_4_reg_1201_pp2_iter12_reg;
        state_vector_V_addr_4_reg_1201_pp2_iter14_reg <= state_vector_V_addr_4_reg_1201_pp2_iter13_reg;
        state_vector_V_addr_4_reg_1201_pp2_iter15_reg <= state_vector_V_addr_4_reg_1201_pp2_iter14_reg;
        state_vector_V_addr_4_reg_1201_pp2_iter16_reg <= state_vector_V_addr_4_reg_1201_pp2_iter15_reg;
        state_vector_V_addr_4_reg_1201_pp2_iter2_reg <= state_vector_V_addr_4_reg_1201_pp2_iter1_reg;
        state_vector_V_addr_4_reg_1201_pp2_iter3_reg <= state_vector_V_addr_4_reg_1201_pp2_iter2_reg;
        state_vector_V_addr_4_reg_1201_pp2_iter4_reg <= state_vector_V_addr_4_reg_1201_pp2_iter3_reg;
        state_vector_V_addr_4_reg_1201_pp2_iter5_reg <= state_vector_V_addr_4_reg_1201_pp2_iter4_reg;
        state_vector_V_addr_4_reg_1201_pp2_iter6_reg <= state_vector_V_addr_4_reg_1201_pp2_iter5_reg;
        state_vector_V_addr_4_reg_1201_pp2_iter7_reg <= state_vector_V_addr_4_reg_1201_pp2_iter6_reg;
        state_vector_V_addr_4_reg_1201_pp2_iter8_reg <= state_vector_V_addr_4_reg_1201_pp2_iter7_reg;
        state_vector_V_addr_4_reg_1201_pp2_iter9_reg <= state_vector_V_addr_4_reg_1201_pp2_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln129_reg_1237 <= icmp_ln129_fu_897_p2;
        icmp_ln129_reg_1237_pp3_iter1_reg <= icmp_ln129_reg_1237;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        icmp_ln137_reg_1266 <= icmp_ln137_fu_935_p2;
        icmp_ln137_reg_1266_pp4_iter1_reg <= icmp_ln137_reg_1266;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state71) & (icmp_ln59_fu_521_p2 == 1'd1))) begin
        icmp_ln62_reg_1028 <= icmp_ln62_fu_526_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln887_reg_1051 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln80_reg_1061 <= icmp_ln80_fu_672_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        icmp_ln887_1_reg_1178 <= icmp_ln887_1_fu_806_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln73_reg_1037 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        icmp_ln887_reg_1051 <= icmp_ln887_fu_651_p2;
        zext_ln887_reg_1046[20 : 0] <= zext_ln887_fu_647_p1[20 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        ip_index <= empty_reg_320;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state157)) begin
        op2_V_assign_reg_1182 <= grp_wide_div_fu_397_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln92_reg_1078 == 1'd1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        r_V_1_reg_1112 <= {{stream_in_V_data_V_0_data_out[31:16]}};
        trunc_ln1503_1_reg_1102 <= trunc_ln1503_1_fu_734_p1;
        zext_ln102_reg_1107[31 : 0] <= zext_ln102_fu_738_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state72) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
        random_value_V <= trunc_ln321_fu_606_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp2_iter8 == 1'b1) & (icmp_ln115_reg_1187_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln92_reg_1078 == 1'd1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        reg_449 <= state_vector_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ret_V_reg_999 <= ret_V_fu_485_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln115_fu_812_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        state_vector_V_addr_4_reg_1201 <= zext_ln118_fu_823_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        state_vector_V_load_2_reg_1132 <= state_vector_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_data_V_0_load_A == 1'b1)) begin
        stream_in_V_data_V_0_payload_A <= stream_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_data_V_0_load_B == 1'b1)) begin
        stream_in_V_data_V_0_payload_B <= stream_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_dest_V_0_load_A == 1'b1)) begin
        stream_in_V_dest_V_0_payload_A <= stream_in_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_dest_V_0_load_B == 1'b1)) begin
        stream_in_V_dest_V_0_payload_B <= stream_in_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_id_V_0_load_A == 1'b1)) begin
        stream_in_V_id_V_0_payload_A <= stream_in_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_id_V_0_load_B == 1'b1)) begin
        stream_in_V_id_V_0_payload_B <= stream_in_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_keep_V_0_load_A == 1'b1)) begin
        stream_in_V_keep_V_0_payload_A <= stream_in_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_keep_V_0_load_B == 1'b1)) begin
        stream_in_V_keep_V_0_payload_B <= stream_in_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_last_V_0_load_A == 1'b1)) begin
        stream_in_V_last_V_0_payload_A <= stream_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_last_V_0_load_B == 1'b1)) begin
        stream_in_V_last_V_0_payload_B <= stream_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_strb_V_0_load_A == 1'b1)) begin
        stream_in_V_strb_V_0_payload_A <= stream_in_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_strb_V_0_load_B == 1'b1)) begin
        stream_in_V_strb_V_0_payload_B <= stream_in_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_user_V_0_load_A == 1'b1)) begin
        stream_in_V_user_V_0_payload_A <= stream_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_user_V_0_load_B == 1'b1)) begin
        stream_in_V_user_V_0_payload_B <= stream_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_data_V_1_load_A == 1'b1)) begin
        stream_out_V_data_V_1_payload_A <= stream_out_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_data_V_1_load_B == 1'b1)) begin
        stream_out_V_data_V_1_payload_B <= stream_out_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_dest_V_1_load_A == 1'b1)) begin
        stream_out_V_dest_V_1_payload_A <= channel_dest_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_dest_V_1_load_B == 1'b1)) begin
        stream_out_V_dest_V_1_payload_B <= channel_dest_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_id_V_1_load_A == 1'b1)) begin
        stream_out_V_id_V_1_payload_A <= channel_id_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_id_V_1_load_B == 1'b1)) begin
        stream_out_V_id_V_1_payload_B <= channel_id_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_keep_V_1_load_A == 1'b1)) begin
        stream_out_V_keep_V_1_payload_A <= channel_keep_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_keep_V_1_load_B == 1'b1)) begin
        stream_out_V_keep_V_1_payload_B <= channel_keep_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_last_V_1_load_A == 1'b1)) begin
        stream_out_V_last_V_1_payload_A <= stream_out_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_last_V_1_load_B == 1'b1)) begin
        stream_out_V_last_V_1_payload_B <= stream_out_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_strb_V_1_load_A == 1'b1)) begin
        stream_out_V_strb_V_1_payload_A <= channel_strb_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_strb_V_1_load_B == 1'b1)) begin
        stream_out_V_strb_V_1_payload_B <= channel_strb_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_user_V_1_load_A == 1'b1)) begin
        stream_out_V_user_V_1_payload_A <= channel_user_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_user_V_1_load_B == 1'b1)) begin
        stream_out_V_user_V_1_payload_B <= channel_user_V;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln115_reg_1187 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        temp_data_V_load_reg_1207 <= temp_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln137_fu_935_p2 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        tmp_last_V_1_reg_1280 <= tmp_last_V_1_fu_951_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_reg_1187_pp2_iter7_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        tmp_s_reg_1217 <= {{grp_fu_832_p2[62:21]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln115_reg_1187_pp2_iter15_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        trunc_ln209_1_reg_1232 <= {{grp_fu_871_p2[62:42]}};
    end
end

always @ (*) begin
    if ((icmp_ln73_fu_622_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state73 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state73 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln92_fu_712_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state79 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state79 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln115_fu_812_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state158 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state158 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln129_fu_897_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state177 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state177 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln137_fu_935_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state181 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state181 = 1'b0;
    end
end

always @ (*) begin
    if ((~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((stream_out_TREADY == 1'b0) & (stream_out_V_dest_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_id_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_last_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_user_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_strb_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_keep_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_data_V_1_state == 2'd3))) & (1'b1 == ap_CS_fsm_state184))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter17 == 1'b0) & (ap_enable_reg_pp2_iter16 == 1'b0) & (ap_enable_reg_pp2_iter15 == 1'b0) & (ap_enable_reg_pp2_iter14 == 1'b0) & (ap_enable_reg_pp2_iter13 == 1'b0) & (ap_enable_reg_pp2_iter12 == 1'b0) & (ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln73_reg_1037 == 1'd0))) begin
        ap_phi_mux_i_load_2_phi_fu_345_p4 = add_ln73_reg_1041;
    end else begin
        ap_phi_mux_i_load_2_phi_fu_345_p4 = i_load_2_reg_340;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        if ((icmp_ln62_reg_1028 == 1'd0)) begin
            ap_phi_mux_storemerge634_in_phi_fu_334_p4 = stream_in_V_data_V_0_data_out;
        end else if ((icmp_ln62_reg_1028 == 1'd1)) begin
            ap_phi_mux_storemerge634_in_phi_fu_334_p4 = zext_ln321_fu_601_p1;
        end else begin
            ap_phi_mux_storemerge634_in_phi_fu_334_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_storemerge634_in_phi_fu_334_p4 = 'bx;
    end
end

always @ (*) begin
    if ((~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((stream_out_TREADY == 1'b0) & (stream_out_V_dest_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_id_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_last_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_user_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_strb_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_keep_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_data_V_1_state == 2'd3))) & (1'b1 == ap_CS_fsm_state184))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        grp_fu_772_ce = 1'b1;
    end else begin
        grp_fu_772_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        grp_fu_961_ce = 1'b1;
    end else begin
        grp_fu_961_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state184) | (1'b1 == ap_CS_fsm_state176) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state180) | (1'b1 == ap_CS_fsm_pp2_stage0) | (1'b1 == ap_CS_fsm_pp1_stage0) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_pp0_stage0) | (1'b1 == ap_CS_fsm_pp4_stage0) | (1'b1 == ap_CS_fsm_pp3_stage0) | (1'b1 == ap_CS_fsm_pp1_stage1) | (1'b1 == ap_CS_fsm_pp0_stage1) | (1'b1 == ap_CS_fsm_state72))) begin
        grp_wide_div_fu_397_ap_ce = 1'b0;
    end else begin
        grp_wide_div_fu_397_ap_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state90) & (icmp_ln887_1_fu_806_p2 == 1'd0))) begin
        grp_wide_div_fu_397_dividend_V = r_V_2_reg_1014;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_wide_div_fu_397_dividend_V = 63'd4398044413952;
    end else begin
        grp_wide_div_fu_397_dividend_V = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state90) & (icmp_ln887_1_fu_806_p2 == 1'd0))) begin
        grp_wide_div_fu_397_divisor_V = sum_V;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_wide_div_fu_397_divisor_V = zext_ln57_fu_491_p1;
    end else begin
        grp_wide_div_fu_397_divisor_V = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        spike_matrix_address0 = zext_ln140_fu_946_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        spike_matrix_address0 = zext_ln82_fu_686_p1;
    end else begin
        spike_matrix_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        spike_matrix_ce0 = 1'b1;
    end else begin
        spike_matrix_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln887_reg_1051 == 1'd1) & (1'd0 == and_ln80_fu_681_p2) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        spike_matrix_we0 = 1'b1;
    end else begin
        spike_matrix_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter7 == 1'b1))) begin
        state_vector_V_address0 = state_vector_V_addr_4_reg_1201_pp2_iter6_reg;
    end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
        state_vector_V_address0 = zext_ln102_fu_738_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        state_vector_V_address0 = zext_ln97_fu_717_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        state_vector_V_address0 = zext_ln76_fu_633_p1;
    end else begin
        state_vector_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        state_vector_V_address1 = zext_ln132_fu_908_p1;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter17 == 1'b1))) begin
        state_vector_V_address1 = state_vector_V_addr_4_reg_1201_pp2_iter16_reg;
    end else begin
        state_vector_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter7 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        state_vector_V_ce0 = 1'b1;
    end else begin
        state_vector_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter17 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        state_vector_V_ce1 = 1'b1;
    end else begin
        state_vector_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln73_reg_1037 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        state_vector_V_we0 = 1'b1;
    end else begin
        state_vector_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter17 == 1'b1) & (icmp_ln115_reg_1187_pp2_iter16_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        state_vector_V_we1 = 1'b1;
    end else begin
        state_vector_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln92_reg_1078 == 1'd1) & (1'b0 == ap_block_pp1_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln73_reg_1037 == 1'd0) & (1'b0 == ap_block_pp0_stage1)))) begin
        stream_in_TDATA_blk_n = stream_in_V_data_V_0_state[1'd0];
    end else begin
        stream_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln92_reg_1078 == 1'd1) & (1'b0 == ap_block_pp1_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln73_reg_1037 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_state72) & (stream_in_V_data_V_0_vld_out == 1'b1)))) begin
        stream_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_data_V_0_sel == 1'b1)) begin
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_B;
    end else begin
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln92_reg_1078 == 1'd1) & (1'b0 == ap_block_pp1_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln73_reg_1037 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_state72) & (stream_in_V_data_V_0_vld_out == 1'b1)))) begin
        stream_in_V_dest_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_dest_V_0_sel == 1'b1)) begin
        stream_in_V_dest_V_0_data_out = stream_in_V_dest_V_0_payload_B;
    end else begin
        stream_in_V_dest_V_0_data_out = stream_in_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln92_reg_1078 == 1'd1) & (1'b0 == ap_block_pp1_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln73_reg_1037 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_state72) & (stream_in_V_data_V_0_vld_out == 1'b1)))) begin
        stream_in_V_id_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_id_V_0_sel == 1'b1)) begin
        stream_in_V_id_V_0_data_out = stream_in_V_id_V_0_payload_B;
    end else begin
        stream_in_V_id_V_0_data_out = stream_in_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln92_reg_1078 == 1'd1) & (1'b0 == ap_block_pp1_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln73_reg_1037 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_state72) & (stream_in_V_data_V_0_vld_out == 1'b1)))) begin
        stream_in_V_keep_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_keep_V_0_sel == 1'b1)) begin
        stream_in_V_keep_V_0_data_out = stream_in_V_keep_V_0_payload_B;
    end else begin
        stream_in_V_keep_V_0_data_out = stream_in_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln92_reg_1078 == 1'd1) & (1'b0 == ap_block_pp1_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln73_reg_1037 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_state72) & (stream_in_V_data_V_0_vld_out == 1'b1)))) begin
        stream_in_V_last_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_last_V_0_sel == 1'b1)) begin
        stream_in_V_last_V_0_data_out = stream_in_V_last_V_0_payload_B;
    end else begin
        stream_in_V_last_V_0_data_out = stream_in_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln92_reg_1078 == 1'd1) & (1'b0 == ap_block_pp1_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln73_reg_1037 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_state72) & (stream_in_V_data_V_0_vld_out == 1'b1)))) begin
        stream_in_V_strb_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_strb_V_0_sel == 1'b1)) begin
        stream_in_V_strb_V_0_data_out = stream_in_V_strb_V_0_payload_B;
    end else begin
        stream_in_V_strb_V_0_data_out = stream_in_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln92_reg_1078 == 1'd1) & (1'b0 == ap_block_pp1_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln73_reg_1037 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_state72) & (stream_in_V_data_V_0_vld_out == 1'b1)))) begin
        stream_in_V_user_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_user_V_0_sel == 1'b1)) begin
        stream_in_V_user_V_0_data_out = stream_in_V_user_V_0_payload_B;
    end else begin
        stream_in_V_user_V_0_data_out = stream_in_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter2 == 1'b1) & (icmp_ln137_reg_1266_pp4_iter1_reg == 1'd0) & (1'b0 == ap_block_pp4_stage0)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln137_reg_1266 == 1'd0) & (1'b0 == ap_block_pp4_stage0)) | ((ap_enable_reg_pp3_iter2 == 1'b1) & (icmp_ln129_reg_1237_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln129_reg_1237 == 1'd0) & (1'b0 == ap_block_pp3_stage0)))) begin
        stream_out_TDATA_blk_n = stream_out_V_data_V_1_state[1'd1];
    end else begin
        stream_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_01001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln137_reg_1266 == 1'd0))) begin
        stream_out_V_data_V_1_data_in = spike_matrix_q0;
    end else if (((1'b0 == ap_block_pp3_stage0_01001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln129_reg_1237 == 1'd0))) begin
        stream_out_V_data_V_1_data_in = tmp_data_V_3_fu_913_p1;
    end else begin
        stream_out_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_V_data_V_1_sel == 1'b1)) begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_B;
    end else begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln137_reg_1266 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln129_reg_1237 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        stream_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_dest_V_1_sel == 1'b1)) begin
        stream_out_V_dest_V_1_data_out = stream_out_V_dest_V_1_payload_B;
    end else begin
        stream_out_V_dest_V_1_data_out = stream_out_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln137_reg_1266 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln129_reg_1237 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        stream_out_V_dest_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_id_V_1_sel == 1'b1)) begin
        stream_out_V_id_V_1_data_out = stream_out_V_id_V_1_payload_B;
    end else begin
        stream_out_V_id_V_1_data_out = stream_out_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln137_reg_1266 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln129_reg_1237 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        stream_out_V_id_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_keep_V_1_sel == 1'b1)) begin
        stream_out_V_keep_V_1_data_out = stream_out_V_keep_V_1_payload_B;
    end else begin
        stream_out_V_keep_V_1_data_out = stream_out_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln137_reg_1266 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln129_reg_1237 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        stream_out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_01001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln137_reg_1266 == 1'd0))) begin
        stream_out_V_last_V_1_data_in = tmp_last_V_1_reg_1280;
    end else if (((1'b0 == ap_block_pp3_stage0_01001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln129_reg_1237 == 1'd0))) begin
        stream_out_V_last_V_1_data_in = channel_last_V;
    end else begin
        stream_out_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((stream_out_V_last_V_1_sel == 1'b1)) begin
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_B;
    end else begin
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln137_reg_1266 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln129_reg_1237 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        stream_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_strb_V_1_sel == 1'b1)) begin
        stream_out_V_strb_V_1_data_out = stream_out_V_strb_V_1_payload_B;
    end else begin
        stream_out_V_strb_V_1_data_out = stream_out_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln137_reg_1266 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln129_reg_1237 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        stream_out_V_strb_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_user_V_1_sel == 1'b1)) begin
        stream_out_V_user_V_1_data_out = stream_out_V_user_V_1_payload_B;
    end else begin
        stream_out_V_user_V_1_data_out = stream_out_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (icmp_ln137_reg_1266 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln129_reg_1237 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001)))) begin
        stream_out_V_user_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        temp_data_V_address0 = zext_ln118_fu_823_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        temp_data_V_address0 = zext_ln97_reg_1082_pp1_iter3_reg;
    end else if (((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
        temp_data_V_address0 = zext_ln102_reg_1107_pp1_iter2_reg;
    end else begin
        temp_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        temp_data_V_ce0 = 1'b1;
    end else begin
        temp_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        temp_data_V_d0 = mul_ln699_reg_1152;
    end else if (((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1))) begin
        temp_data_V_d0 = shl_ln_fu_784_p3;
    end else begin
        temp_data_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        temp_data_V_we0 = 1'b1;
    end else begin
        temp_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            if (((1'b1 == ap_CS_fsm_state71) & (icmp_ln59_fu_521_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_state72 : begin
            if (((1'b1 == ap_CS_fsm_state72) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state72;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln73_fu_622_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln73_fu_622_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            if (((1'b1 == ap_CS_fsm_state78) & (icmp_ln87_fu_691_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln92_fu_712_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((ap_enable_reg_pp1_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if ((((ap_enable_reg_pp1_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln92_fu_712_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state90 : begin
            if (((1'b1 == ap_CS_fsm_state90) & (icmp_ln887_1_fu_806_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state176;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln115_fu_812_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((ap_enable_reg_pp2_iter17 == 1'b1) & (ap_enable_reg_pp2_iter16 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter17 == 1'b1) & (ap_enable_reg_pp2_iter16 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln115_fu_812_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state176;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln129_fu_897_p2 == 1'd1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0)) & ~((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln129_fu_897_p2 == 1'd1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0)) | ((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state180;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((ap_enable_reg_pp4_iter0 == 1'b1) & (icmp_ln137_fu_935_p2 == 1'd1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0)) & ~((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((ap_enable_reg_pp4_iter0 == 1'b1) & (icmp_ln137_fu_935_p2 == 1'd1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0)) | ((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state184;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state184 : begin
            if ((~((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((stream_out_TREADY == 1'b0) & (stream_out_V_dest_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_id_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_last_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_user_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_strb_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_keep_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_data_V_1_state == 2'd3))) & (1'b1 == ap_CS_fsm_state184))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state184;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_fu_722_p2 = (32'd1 + i);

assign add_ln105_fu_728_p2 = (32'd2 + i);

assign add_ln115_fu_817_p2 = (empty_11_reg_364 + 32'd1);

assign add_ln129_fu_902_p2 = (i_load_5_reg_375 + 32'd1);

assign add_ln137_fu_940_p2 = (i_load_reg_386 + 32'd1);

assign add_ln141_fu_532_p2 = ($signed(layerSize_read_reg_987) + $signed(32'd4294967295));

assign add_ln59_fu_923_p2 = (ip_index + 32'd1);

assign add_ln700_1_fu_792_p2 = (mul_ln699_reg_1152 + shl_ln_reg_1158);

assign add_ln700_2_fu_796_p2 = (add_ln700_1_reg_1163 + sum_V);

assign add_ln700_3_fu_862_p2 = (zext_ln209_1_fu_847_p1 + zext_ln700_1_fu_858_p1);

assign add_ln700_fu_661_p2 = (sum_V + zext_ln700_fu_657_p1);

assign add_ln73_fu_627_p2 = (ap_phi_mux_i_load_2_phi_fu_345_p4 + 32'd1);

assign add_ln80_fu_499_p2 = ($signed(32'd4294967295) + $signed(vectorSize_read_reg_972));

assign add_ln87_fu_696_p2 = (batch_load_reg_353 + 32'd1);

assign and_ln80_fu_681_p2 = (icmp_ln80_reg_1061 & icmp_ln80_1_fu_676_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd146];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd150];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state157 = ap_CS_fsm[32'd145];

assign ap_CS_fsm_state176 = ap_CS_fsm[32'd147];

assign ap_CS_fsm_state180 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_state184 = ap_CS_fsm[32'd151];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd78];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((stream_in_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln73_reg_1037 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((stream_in_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln73_reg_1037 == 1'd0));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage1_11001 = ((stream_in_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln92_reg_1078 == 1'd1));
end

always @ (*) begin
    ap_block_pp1_stage1_subdone = ((stream_in_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln92_reg_1078 == 1'd1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_block_state179_io)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_block_state178_io)));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b1 == ap_block_state179_io)) | ((ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_block_state178_io)));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = (((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_block_state183_io)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_block_state182_io)));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = (((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_block_state183_io)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_block_state182_io)));
end

assign ap_block_state158_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state159_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state160_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state161_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state162_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state163_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state164_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state165_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state166_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state167_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state168_pp2_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state169_pp2_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state170_pp2_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state171_pp2_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state172_pp2_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state173_pp2_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state174_pp2_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state175_pp2_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state177_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state178_io = ((stream_out_V_data_V_1_ack_in == 1'b0) & (icmp_ln129_reg_1237 == 1'd0));
end

assign ap_block_state178_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state179_io = ((stream_out_V_data_V_1_ack_in == 1'b0) & (icmp_ln129_reg_1237_pp3_iter1_reg == 1'd0));
end

assign ap_block_state179_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state181_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state182_io = ((stream_out_V_data_V_1_ack_in == 1'b0) & (icmp_ln137_reg_1266 == 1'd0));
end

assign ap_block_state182_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state183_io = ((stream_out_V_data_V_1_ack_in == 1'b0) & (icmp_ln137_reg_1266_pp4_iter1_reg == 1'd0));
end

assign ap_block_state183_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state184 = ((stream_out_V_dest_V_1_state == 2'd1) | (stream_out_V_id_V_1_state == 2'd1) | (stream_out_V_last_V_1_state == 2'd1) | (stream_out_V_user_V_1_state == 2'd1) | (stream_out_V_strb_V_1_state == 2'd1) | (stream_out_V_keep_V_1_state == 2'd1) | (stream_out_V_data_V_1_state == 2'd1) | ((stream_out_TREADY == 1'b0) & (stream_out_V_dest_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_id_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_last_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_user_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_strb_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_keep_V_1_state == 2'd3)) | ((stream_out_TREADY == 1'b0) & (stream_out_V_data_V_1_state == 2'd3)));
end

assign ap_block_state73_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state74_pp0_stage1_iter0 = ((stream_in_V_data_V_0_vld_out == 1'b0) & (icmp_ln73_reg_1037 == 1'd0));
end

assign ap_block_state75_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state80_pp1_stage1_iter0 = ((stream_in_V_data_V_0_vld_out == 1'b0) & (icmp_ln92_reg_1078 == 1'd1));
end

assign ap_block_state81_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp1_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state87_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state88_pp1_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state89_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_772_p0 = grp_fu_772_p00;

assign grp_fu_772_p00 = shl_ln1503_1_fu_757_p3;

assign grp_fu_772_p1 = grp_fu_772_p10;

assign grp_fu_772_p10 = reg_449;

assign grp_fu_832_p1 = grp_fu_832_p10;

assign grp_fu_832_p10 = temp_data_V_load_reg_1207;

assign grp_fu_871_p0 = grp_fu_871_p00;

assign grp_fu_871_p00 = add_ln700_3_reg_1222;

assign grp_fu_871_p1 = zext_ln699_2_reg_1019;

assign grp_fu_961_p0 = grp_fu_961_p00;

assign grp_fu_961_p00 = r_V_1_reg_1112_pp1_iter1_reg;

assign grp_fu_961_p1 = grp_fu_961_p10;

assign grp_fu_961_p10 = state_vector_V_load_2_reg_1132;

assign icmp_ln115_fu_812_p2 = ((empty_11_reg_364 == vectorSize_read_reg_972) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_897_p2 = ((i_load_5_reg_375 == vectorSize_read_reg_972) ? 1'b1 : 1'b0);

assign icmp_ln137_fu_935_p2 = ((i_load_reg_386 == layerSize_read_reg_987) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_521_p2 = ((empty_reg_320 < layerSize_read_reg_987) ? 1'b1 : 1'b0);

assign icmp_ln62_fu_526_p2 = ((empty_reg_320 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_622_p2 = ((ap_phi_mux_i_load_2_phi_fu_345_p4 == vectorSize_read_reg_972) ? 1'b1 : 1'b0);

assign icmp_ln80_1_fu_676_p2 = ((i_load_2_reg_340_pp0_iter1_reg != add_ln80_reg_1009) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_672_p2 = ((add_ln700_reg_1055 < zext_ln887_reg_1046) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_691_p2 = ((batch_load_reg_353 == kernelSize_read_reg_982) ? 1'b1 : 1'b0);

assign icmp_ln887_1_fu_806_p2 = ((sum_V == 42'd0) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_651_p2 = ((sum_V < zext_ln887_fu_647_p1) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_712_p2 = ((i < vectorSize_read_reg_972) ? 1'b1 : 1'b0);

assign r_V_2_fu_504_p3 = {{trunc_ln1503_reg_994}, {42'd0}};

assign r_V_3_fu_850_p3 = {{reg_449}, {21'd0}};

assign ret_V_fu_485_p2 = (33'd2097151 + zext_ln215_fu_482_p1);

assign shl_ln1503_1_fu_757_p3 = {{trunc_ln1503_1_reg_1102}, {5'd0}};

assign shl_ln_fu_784_p3 = {{mul_ln699_1_reg_1147}, {5'd0}};

assign stream_in_TREADY = stream_in_V_dest_V_0_state[1'd1];

assign stream_in_V_data_V_0_ack_in = stream_in_V_data_V_0_state[1'd1];

assign stream_in_V_data_V_0_load_A = (stream_in_V_data_V_0_state_cmp_full & ~stream_in_V_data_V_0_sel_wr);

assign stream_in_V_data_V_0_load_B = (stream_in_V_data_V_0_state_cmp_full & stream_in_V_data_V_0_sel_wr);

assign stream_in_V_data_V_0_sel = stream_in_V_data_V_0_sel_rd;

assign stream_in_V_data_V_0_state_cmp_full = ((stream_in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_data_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_data_V_0_vld_out = stream_in_V_data_V_0_state[1'd0];

assign stream_in_V_dest_V_0_ack_in = stream_in_V_dest_V_0_state[1'd1];

assign stream_in_V_dest_V_0_load_A = (stream_in_V_dest_V_0_state_cmp_full & ~stream_in_V_dest_V_0_sel_wr);

assign stream_in_V_dest_V_0_load_B = (stream_in_V_dest_V_0_state_cmp_full & stream_in_V_dest_V_0_sel_wr);

assign stream_in_V_dest_V_0_sel = stream_in_V_dest_V_0_sel_rd;

assign stream_in_V_dest_V_0_state_cmp_full = ((stream_in_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_dest_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_dest_V_0_vld_out = stream_in_V_dest_V_0_state[1'd0];

assign stream_in_V_id_V_0_ack_in = stream_in_V_id_V_0_state[1'd1];

assign stream_in_V_id_V_0_load_A = (stream_in_V_id_V_0_state_cmp_full & ~stream_in_V_id_V_0_sel_wr);

assign stream_in_V_id_V_0_load_B = (stream_in_V_id_V_0_state_cmp_full & stream_in_V_id_V_0_sel_wr);

assign stream_in_V_id_V_0_sel = stream_in_V_id_V_0_sel_rd;

assign stream_in_V_id_V_0_state_cmp_full = ((stream_in_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_id_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_id_V_0_vld_out = stream_in_V_id_V_0_state[1'd0];

assign stream_in_V_keep_V_0_ack_in = stream_in_V_keep_V_0_state[1'd1];

assign stream_in_V_keep_V_0_load_A = (stream_in_V_keep_V_0_state_cmp_full & ~stream_in_V_keep_V_0_sel_wr);

assign stream_in_V_keep_V_0_load_B = (stream_in_V_keep_V_0_state_cmp_full & stream_in_V_keep_V_0_sel_wr);

assign stream_in_V_keep_V_0_sel = stream_in_V_keep_V_0_sel_rd;

assign stream_in_V_keep_V_0_state_cmp_full = ((stream_in_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_keep_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_keep_V_0_vld_out = stream_in_V_keep_V_0_state[1'd0];

assign stream_in_V_last_V_0_ack_in = stream_in_V_last_V_0_state[1'd1];

assign stream_in_V_last_V_0_load_A = (stream_in_V_last_V_0_state_cmp_full & ~stream_in_V_last_V_0_sel_wr);

assign stream_in_V_last_V_0_load_B = (stream_in_V_last_V_0_state_cmp_full & stream_in_V_last_V_0_sel_wr);

assign stream_in_V_last_V_0_sel = stream_in_V_last_V_0_sel_rd;

assign stream_in_V_last_V_0_state_cmp_full = ((stream_in_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_last_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_last_V_0_vld_out = stream_in_V_last_V_0_state[1'd0];

assign stream_in_V_strb_V_0_ack_in = stream_in_V_strb_V_0_state[1'd1];

assign stream_in_V_strb_V_0_load_A = (stream_in_V_strb_V_0_state_cmp_full & ~stream_in_V_strb_V_0_sel_wr);

assign stream_in_V_strb_V_0_load_B = (stream_in_V_strb_V_0_state_cmp_full & stream_in_V_strb_V_0_sel_wr);

assign stream_in_V_strb_V_0_sel = stream_in_V_strb_V_0_sel_rd;

assign stream_in_V_strb_V_0_state_cmp_full = ((stream_in_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_strb_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_strb_V_0_vld_out = stream_in_V_strb_V_0_state[1'd0];

assign stream_in_V_user_V_0_ack_in = stream_in_V_user_V_0_state[1'd1];

assign stream_in_V_user_V_0_load_A = (stream_in_V_user_V_0_state_cmp_full & ~stream_in_V_user_V_0_sel_wr);

assign stream_in_V_user_V_0_load_B = (stream_in_V_user_V_0_state_cmp_full & stream_in_V_user_V_0_sel_wr);

assign stream_in_V_user_V_0_sel = stream_in_V_user_V_0_sel_rd;

assign stream_in_V_user_V_0_state_cmp_full = ((stream_in_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_user_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_user_V_0_vld_out = stream_in_V_user_V_0_state[1'd0];

assign stream_out_TDATA = stream_out_V_data_V_1_data_out;

assign stream_out_TDEST = stream_out_V_dest_V_1_data_out;

assign stream_out_TID = stream_out_V_id_V_1_data_out;

assign stream_out_TKEEP = stream_out_V_keep_V_1_data_out;

assign stream_out_TLAST = stream_out_V_last_V_1_data_out;

assign stream_out_TSTRB = stream_out_V_strb_V_1_data_out;

assign stream_out_TUSER = stream_out_V_user_V_1_data_out;

assign stream_out_TVALID = stream_out_V_dest_V_1_state[1'd0];

assign stream_out_V_data_V_1_ack_in = stream_out_V_data_V_1_state[1'd1];

assign stream_out_V_data_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_data_V_1_load_A = (stream_out_V_data_V_1_state_cmp_full & ~stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_load_B = (stream_out_V_data_V_1_state_cmp_full & stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_sel = stream_out_V_data_V_1_sel_rd;

assign stream_out_V_data_V_1_state_cmp_full = ((stream_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_data_V_1_vld_out = stream_out_V_data_V_1_state[1'd0];

assign stream_out_V_dest_V_1_ack_in = stream_out_V_dest_V_1_state[1'd1];

assign stream_out_V_dest_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_dest_V_1_load_A = (stream_out_V_dest_V_1_state_cmp_full & ~stream_out_V_dest_V_1_sel_wr);

assign stream_out_V_dest_V_1_load_B = (stream_out_V_dest_V_1_state_cmp_full & stream_out_V_dest_V_1_sel_wr);

assign stream_out_V_dest_V_1_sel = stream_out_V_dest_V_1_sel_rd;

assign stream_out_V_dest_V_1_state_cmp_full = ((stream_out_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_dest_V_1_vld_out = stream_out_V_dest_V_1_state[1'd0];

assign stream_out_V_id_V_1_ack_in = stream_out_V_id_V_1_state[1'd1];

assign stream_out_V_id_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_id_V_1_load_A = (stream_out_V_id_V_1_state_cmp_full & ~stream_out_V_id_V_1_sel_wr);

assign stream_out_V_id_V_1_load_B = (stream_out_V_id_V_1_state_cmp_full & stream_out_V_id_V_1_sel_wr);

assign stream_out_V_id_V_1_sel = stream_out_V_id_V_1_sel_rd;

assign stream_out_V_id_V_1_state_cmp_full = ((stream_out_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_id_V_1_vld_out = stream_out_V_id_V_1_state[1'd0];

assign stream_out_V_keep_V_1_ack_in = stream_out_V_keep_V_1_state[1'd1];

assign stream_out_V_keep_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_keep_V_1_load_A = (stream_out_V_keep_V_1_state_cmp_full & ~stream_out_V_keep_V_1_sel_wr);

assign stream_out_V_keep_V_1_load_B = (stream_out_V_keep_V_1_state_cmp_full & stream_out_V_keep_V_1_sel_wr);

assign stream_out_V_keep_V_1_sel = stream_out_V_keep_V_1_sel_rd;

assign stream_out_V_keep_V_1_state_cmp_full = ((stream_out_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_keep_V_1_vld_out = stream_out_V_keep_V_1_state[1'd0];

assign stream_out_V_last_V_1_ack_in = stream_out_V_last_V_1_state[1'd1];

assign stream_out_V_last_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_last_V_1_load_A = (stream_out_V_last_V_1_state_cmp_full & ~stream_out_V_last_V_1_sel_wr);

assign stream_out_V_last_V_1_load_B = (stream_out_V_last_V_1_state_cmp_full & stream_out_V_last_V_1_sel_wr);

assign stream_out_V_last_V_1_sel = stream_out_V_last_V_1_sel_rd;

assign stream_out_V_last_V_1_state_cmp_full = ((stream_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_last_V_1_vld_out = stream_out_V_last_V_1_state[1'd0];

assign stream_out_V_strb_V_1_ack_in = stream_out_V_strb_V_1_state[1'd1];

assign stream_out_V_strb_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_strb_V_1_load_A = (stream_out_V_strb_V_1_state_cmp_full & ~stream_out_V_strb_V_1_sel_wr);

assign stream_out_V_strb_V_1_load_B = (stream_out_V_strb_V_1_state_cmp_full & stream_out_V_strb_V_1_sel_wr);

assign stream_out_V_strb_V_1_sel = stream_out_V_strb_V_1_sel_rd;

assign stream_out_V_strb_V_1_state_cmp_full = ((stream_out_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_strb_V_1_vld_out = stream_out_V_strb_V_1_state[1'd0];

assign stream_out_V_user_V_1_ack_in = stream_out_V_user_V_1_state[1'd1];

assign stream_out_V_user_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_user_V_1_load_A = (stream_out_V_user_V_1_state_cmp_full & ~stream_out_V_user_V_1_sel_wr);

assign stream_out_V_user_V_1_load_B = (stream_out_V_user_V_1_state_cmp_full & stream_out_V_user_V_1_sel_wr);

assign stream_out_V_user_V_1_sel = stream_out_V_user_V_1_sel_rd;

assign stream_out_V_user_V_1_state_cmp_full = ((stream_out_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_user_V_1_vld_out = stream_out_V_user_V_1_state[1'd0];

assign tmp_data_V_3_fu_913_p1 = state_vector_V_q1;

assign tmp_last_V_1_fu_951_p2 = ((i_load_reg_386 == add_ln141_reg_1032) ? 1'b1 : 1'b0);

assign trunc_ln1503_1_fu_734_p1 = stream_in_V_data_V_0_data_out[15:0];

assign trunc_ln1503_fu_478_p1 = epsilon[20:0];

assign trunc_ln209_fu_495_p1 = grp_wide_div_fu_397_ap_return[20:0];

assign trunc_ln214_1_fu_638_p1 = stream_in_V_data_V_0_data_out[20:0];

assign trunc_ln214_fu_597_p1 = stream_in_V_data_V_0_data_out[20:0];

assign trunc_ln321_fu_606_p1 = ap_phi_mux_storemerge634_in_phi_fu_334_p4[20:0];

assign zext_ln102_fu_738_p1 = add_ln100_reg_1092;

assign zext_ln118_fu_823_p1 = empty_11_reg_364;

assign zext_ln132_fu_908_p1 = i_load_5_reg_375;

assign zext_ln140_fu_946_p1 = i_load_reg_386;

assign zext_ln209_1_fu_847_p1 = tmp_s_reg_1217;

assign zext_ln215_fu_482_p1 = epsilon_read_reg_967;

assign zext_ln321_fu_601_p1 = trunc_ln214_fu_597_p1;

assign zext_ln57_fu_491_p1 = ret_V_reg_999;

assign zext_ln699_2_fu_511_p1 = trunc_ln209_fu_495_p1;

assign zext_ln700_1_fu_858_p1 = r_V_3_fu_850_p3;

assign zext_ln700_fu_657_p1 = trunc_ln214_1_fu_638_p1;

assign zext_ln76_fu_633_p1 = i_load_2_reg_340;

assign zext_ln82_fu_686_p1 = ip_index;

assign zext_ln887_fu_647_p1 = random_value_V;

assign zext_ln97_fu_717_p1 = i;

always @ (posedge ap_clk) begin
    r_V_2_reg_1014[41:0] <= 42'b000000000000000000000000000000000000000000;
    zext_ln699_2_reg_1019[62:21] <= 42'b000000000000000000000000000000000000000000;
    zext_ln887_reg_1046[41:21] <= 21'b000000000000000000000;
    zext_ln97_reg_1082[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln97_reg_1082_pp1_iter1_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln97_reg_1082_pp1_iter2_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln97_reg_1082_pp1_iter3_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln102_reg_1107[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln102_reg_1107_pp1_iter1_reg[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln102_reg_1107_pp1_iter2_reg[63:32] <= 32'b00000000000000000000000000000000;
    shl_ln_reg_1158[4:0] <= 5'b00000;
end

endmodule //sbs_fixedpoint
