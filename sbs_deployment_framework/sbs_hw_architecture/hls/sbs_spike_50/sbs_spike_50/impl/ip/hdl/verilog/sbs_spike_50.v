// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sbs_spike_50,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.086000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=1713,HLS_SYN_LUT=2589}" *)

module sbs_spike_50 (
        ap_clk,
        ap_rst_n,
        stream_in_TDATA,
        stream_in_TVALID,
        stream_in_TREADY,
        stream_in_TKEEP,
        stream_in_TSTRB,
        stream_in_TUSER,
        stream_in_TLAST,
        stream_in_TID,
        stream_in_TDEST,
        stream_out_TDATA,
        stream_out_TVALID,
        stream_out_TREADY,
        stream_out_TKEEP,
        stream_out_TSTRB,
        stream_out_TUSER,
        stream_out_TLAST,
        stream_out_TID,
        stream_out_TDEST,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 22'd1;
parameter    ap_ST_fsm_state2 = 22'd2;
parameter    ap_ST_fsm_state3 = 22'd4;
parameter    ap_ST_fsm_state4 = 22'd8;
parameter    ap_ST_fsm_state5 = 22'd16;
parameter    ap_ST_fsm_state6 = 22'd32;
parameter    ap_ST_fsm_pp0_stage0 = 22'd64;
parameter    ap_ST_fsm_pp0_stage1 = 22'd128;
parameter    ap_ST_fsm_pp0_stage2 = 22'd256;
parameter    ap_ST_fsm_pp0_stage3 = 22'd512;
parameter    ap_ST_fsm_pp0_stage4 = 22'd1024;
parameter    ap_ST_fsm_pp0_stage5 = 22'd2048;
parameter    ap_ST_fsm_pp0_stage6 = 22'd4096;
parameter    ap_ST_fsm_pp0_stage7 = 22'd8192;
parameter    ap_ST_fsm_pp0_stage8 = 22'd16384;
parameter    ap_ST_fsm_pp0_stage9 = 22'd32768;
parameter    ap_ST_fsm_pp0_stage10 = 22'd65536;
parameter    ap_ST_fsm_pp0_stage11 = 22'd131072;
parameter    ap_ST_fsm_pp0_stage12 = 22'd262144;
parameter    ap_ST_fsm_pp0_stage13 = 22'd524288;
parameter    ap_ST_fsm_pp0_stage14 = 22'd1048576;
parameter    ap_ST_fsm_state25 = 22'd2097152;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] stream_in_TDATA;
input   stream_in_TVALID;
output   stream_in_TREADY;
input  [3:0] stream_in_TKEEP;
input  [3:0] stream_in_TSTRB;
input  [1:0] stream_in_TUSER;
input  [0:0] stream_in_TLAST;
input  [4:0] stream_in_TID;
input  [5:0] stream_in_TDEST;
output  [31:0] stream_out_TDATA;
output   stream_out_TVALID;
input   stream_out_TREADY;
output  [3:0] stream_out_TKEEP;
output  [3:0] stream_out_TSTRB;
output  [1:0] stream_out_TUSER;
output  [0:0] stream_out_TLAST;
output  [4:0] stream_out_TID;
output  [5:0] stream_out_TDEST;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] stream_in_V_data_V_0_data_out;
wire    stream_in_V_data_V_0_vld_in;
wire    stream_in_V_data_V_0_vld_out;
wire    stream_in_V_data_V_0_ack_in;
reg    stream_in_V_data_V_0_ack_out;
reg   [31:0] stream_in_V_data_V_0_payload_A;
reg   [31:0] stream_in_V_data_V_0_payload_B;
reg    stream_in_V_data_V_0_sel_rd;
reg    stream_in_V_data_V_0_sel_wr;
wire    stream_in_V_data_V_0_sel;
wire    stream_in_V_data_V_0_load_A;
wire    stream_in_V_data_V_0_load_B;
reg   [1:0] stream_in_V_data_V_0_state;
wire    stream_in_V_data_V_0_state_cmp_full;
reg   [3:0] stream_in_V_keep_V_0_data_out;
wire    stream_in_V_keep_V_0_vld_in;
wire    stream_in_V_keep_V_0_vld_out;
wire    stream_in_V_keep_V_0_ack_in;
reg    stream_in_V_keep_V_0_ack_out;
reg   [3:0] stream_in_V_keep_V_0_payload_A;
reg   [3:0] stream_in_V_keep_V_0_payload_B;
reg    stream_in_V_keep_V_0_sel_rd;
reg    stream_in_V_keep_V_0_sel_wr;
wire    stream_in_V_keep_V_0_sel;
wire    stream_in_V_keep_V_0_load_A;
wire    stream_in_V_keep_V_0_load_B;
reg   [1:0] stream_in_V_keep_V_0_state;
wire    stream_in_V_keep_V_0_state_cmp_full;
reg   [3:0] stream_in_V_strb_V_0_data_out;
wire    stream_in_V_strb_V_0_vld_in;
wire    stream_in_V_strb_V_0_vld_out;
wire    stream_in_V_strb_V_0_ack_in;
reg    stream_in_V_strb_V_0_ack_out;
reg   [3:0] stream_in_V_strb_V_0_payload_A;
reg   [3:0] stream_in_V_strb_V_0_payload_B;
reg    stream_in_V_strb_V_0_sel_rd;
reg    stream_in_V_strb_V_0_sel_wr;
wire    stream_in_V_strb_V_0_sel;
wire    stream_in_V_strb_V_0_load_A;
wire    stream_in_V_strb_V_0_load_B;
reg   [1:0] stream_in_V_strb_V_0_state;
wire    stream_in_V_strb_V_0_state_cmp_full;
reg   [1:0] stream_in_V_user_V_0_data_out;
wire    stream_in_V_user_V_0_vld_in;
wire    stream_in_V_user_V_0_vld_out;
wire    stream_in_V_user_V_0_ack_in;
reg    stream_in_V_user_V_0_ack_out;
reg   [1:0] stream_in_V_user_V_0_payload_A;
reg   [1:0] stream_in_V_user_V_0_payload_B;
reg    stream_in_V_user_V_0_sel_rd;
reg    stream_in_V_user_V_0_sel_wr;
wire    stream_in_V_user_V_0_sel;
wire    stream_in_V_user_V_0_load_A;
wire    stream_in_V_user_V_0_load_B;
reg   [1:0] stream_in_V_user_V_0_state;
wire    stream_in_V_user_V_0_state_cmp_full;
reg   [4:0] stream_in_V_id_V_0_data_out;
wire    stream_in_V_id_V_0_vld_in;
wire    stream_in_V_id_V_0_vld_out;
wire    stream_in_V_id_V_0_ack_in;
reg    stream_in_V_id_V_0_ack_out;
reg   [4:0] stream_in_V_id_V_0_payload_A;
reg   [4:0] stream_in_V_id_V_0_payload_B;
reg    stream_in_V_id_V_0_sel_rd;
reg    stream_in_V_id_V_0_sel_wr;
wire    stream_in_V_id_V_0_sel;
wire    stream_in_V_id_V_0_load_A;
wire    stream_in_V_id_V_0_load_B;
reg   [1:0] stream_in_V_id_V_0_state;
wire    stream_in_V_id_V_0_state_cmp_full;
reg   [5:0] stream_in_V_dest_V_0_data_out;
wire    stream_in_V_dest_V_0_vld_in;
wire    stream_in_V_dest_V_0_vld_out;
wire    stream_in_V_dest_V_0_ack_in;
reg    stream_in_V_dest_V_0_ack_out;
reg   [5:0] stream_in_V_dest_V_0_payload_A;
reg   [5:0] stream_in_V_dest_V_0_payload_B;
reg    stream_in_V_dest_V_0_sel_rd;
reg    stream_in_V_dest_V_0_sel_wr;
wire    stream_in_V_dest_V_0_sel;
wire    stream_in_V_dest_V_0_load_A;
wire    stream_in_V_dest_V_0_load_B;
reg   [1:0] stream_in_V_dest_V_0_state;
wire    stream_in_V_dest_V_0_state_cmp_full;
reg   [31:0] stream_out_V_data_V_1_data_out;
reg    stream_out_V_data_V_1_vld_in;
wire    stream_out_V_data_V_1_vld_out;
wire    stream_out_V_data_V_1_ack_in;
wire    stream_out_V_data_V_1_ack_out;
reg   [31:0] stream_out_V_data_V_1_payload_A;
reg   [31:0] stream_out_V_data_V_1_payload_B;
reg    stream_out_V_data_V_1_sel_rd;
reg    stream_out_V_data_V_1_sel_wr;
wire    stream_out_V_data_V_1_sel;
wire    stream_out_V_data_V_1_load_A;
wire    stream_out_V_data_V_1_load_B;
reg   [1:0] stream_out_V_data_V_1_state;
wire    stream_out_V_data_V_1_state_cmp_full;
reg   [3:0] stream_out_V_keep_V_1_data_out;
reg    stream_out_V_keep_V_1_vld_in;
wire    stream_out_V_keep_V_1_vld_out;
wire    stream_out_V_keep_V_1_ack_in;
wire    stream_out_V_keep_V_1_ack_out;
reg   [3:0] stream_out_V_keep_V_1_payload_A;
reg   [3:0] stream_out_V_keep_V_1_payload_B;
reg    stream_out_V_keep_V_1_sel_rd;
reg    stream_out_V_keep_V_1_sel_wr;
wire    stream_out_V_keep_V_1_sel;
wire    stream_out_V_keep_V_1_load_A;
wire    stream_out_V_keep_V_1_load_B;
reg   [1:0] stream_out_V_keep_V_1_state;
wire    stream_out_V_keep_V_1_state_cmp_full;
reg   [3:0] stream_out_V_strb_V_1_data_out;
reg    stream_out_V_strb_V_1_vld_in;
wire    stream_out_V_strb_V_1_vld_out;
wire    stream_out_V_strb_V_1_ack_in;
wire    stream_out_V_strb_V_1_ack_out;
reg   [3:0] stream_out_V_strb_V_1_payload_A;
reg   [3:0] stream_out_V_strb_V_1_payload_B;
reg    stream_out_V_strb_V_1_sel_rd;
reg    stream_out_V_strb_V_1_sel_wr;
wire    stream_out_V_strb_V_1_sel;
wire    stream_out_V_strb_V_1_load_A;
wire    stream_out_V_strb_V_1_load_B;
reg   [1:0] stream_out_V_strb_V_1_state;
wire    stream_out_V_strb_V_1_state_cmp_full;
reg   [1:0] stream_out_V_user_V_1_data_out;
reg    stream_out_V_user_V_1_vld_in;
wire    stream_out_V_user_V_1_vld_out;
wire    stream_out_V_user_V_1_ack_in;
wire    stream_out_V_user_V_1_ack_out;
reg   [1:0] stream_out_V_user_V_1_payload_A;
reg   [1:0] stream_out_V_user_V_1_payload_B;
reg    stream_out_V_user_V_1_sel_rd;
reg    stream_out_V_user_V_1_sel_wr;
wire    stream_out_V_user_V_1_sel;
wire    stream_out_V_user_V_1_load_A;
wire    stream_out_V_user_V_1_load_B;
reg   [1:0] stream_out_V_user_V_1_state;
wire    stream_out_V_user_V_1_state_cmp_full;
reg   [0:0] stream_out_V_last_V_1_data_out;
reg    stream_out_V_last_V_1_vld_in;
wire    stream_out_V_last_V_1_vld_out;
wire    stream_out_V_last_V_1_ack_in;
wire    stream_out_V_last_V_1_ack_out;
reg   [0:0] stream_out_V_last_V_1_payload_A;
reg   [0:0] stream_out_V_last_V_1_payload_B;
reg    stream_out_V_last_V_1_sel_rd;
reg    stream_out_V_last_V_1_sel_wr;
wire    stream_out_V_last_V_1_sel;
wire    stream_out_V_last_V_1_load_A;
wire    stream_out_V_last_V_1_load_B;
reg   [1:0] stream_out_V_last_V_1_state;
wire    stream_out_V_last_V_1_state_cmp_full;
reg   [4:0] stream_out_V_id_V_1_data_out;
reg    stream_out_V_id_V_1_vld_in;
wire    stream_out_V_id_V_1_vld_out;
wire    stream_out_V_id_V_1_ack_in;
wire    stream_out_V_id_V_1_ack_out;
reg   [4:0] stream_out_V_id_V_1_payload_A;
reg   [4:0] stream_out_V_id_V_1_payload_B;
reg    stream_out_V_id_V_1_sel_rd;
reg    stream_out_V_id_V_1_sel_wr;
wire    stream_out_V_id_V_1_sel;
wire    stream_out_V_id_V_1_load_A;
wire    stream_out_V_id_V_1_load_B;
reg   [1:0] stream_out_V_id_V_1_state;
wire    stream_out_V_id_V_1_state_cmp_full;
reg   [5:0] stream_out_V_dest_V_1_data_out;
reg    stream_out_V_dest_V_1_vld_in;
wire    stream_out_V_dest_V_1_vld_out;
wire    stream_out_V_dest_V_1_ack_in;
wire    stream_out_V_dest_V_1_ack_out;
reg   [5:0] stream_out_V_dest_V_1_payload_A;
reg   [5:0] stream_out_V_dest_V_1_payload_B;
reg    stream_out_V_dest_V_1_sel_rd;
reg    stream_out_V_dest_V_1_sel_wr;
wire    stream_out_V_dest_V_1_sel;
wire    stream_out_V_dest_V_1_load_A;
wire    stream_out_V_dest_V_1_load_B;
reg   [1:0] stream_out_V_dest_V_1_state;
wire    stream_out_V_dest_V_1_state_cmp_full;
reg   [31:0] debug;
reg    debug_ap_vld;
wire   [31:0] layerSize;
wire   [31:0] vectorSize;
reg   [31:0] ip_index;
reg   [3:0] channel_keep_V;
reg   [3:0] channel_strb_V;
reg   [1:0] channel_user_V;
reg   [4:0] channel_id_V;
reg   [5:0] channel_dest_V;
reg    stream_in_TDATA_blk_n;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage3;
reg   [0:0] tmp_10_reg_707;
reg    stream_out_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1;
reg   [0:0] ap_reg_pp0_iter1_tmp_10_reg_707;
reg   [0:0] tmp_29_reg_721;
reg   [0:0] or_cond_reg_765;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg   [31:0] sum_load_reg_221;
reg   [31:0] debug_load_2_reg_233;
reg   [30:0] tmp_data_V_3_reg_245;
reg   [31:0] debug_load3_reg_272;
reg   [31:0] vectorSize_read_reg_627;
reg   [31:0] layerSize_read_reg_633;
wire   [7:0] tmp_fu_306_p1;
reg   [7:0] tmp_reg_639;
wire   [7:0] tmp_18_fu_310_p1;
reg   [7:0] tmp_18_reg_644;
wire   [31:0] tmp_3_cast_fu_320_p1;
wire    ap_CS_fsm_state2;
wire   [31:0] tmp_4_fu_325_p2;
reg   [31:0] tmp_4_reg_654;
wire   [31:0] tmp_5_fu_330_p2;
reg   [31:0] tmp_5_reg_659;
wire   [31:0] tmp_s_fu_352_p2;
wire   [31:0] tmp_9_fu_359_p2;
wire   [31:0] tmp_2_fu_416_p1;
reg   [31:0] tmp_2_reg_690;
wire    ap_CS_fsm_state6;
wire   [0:0] notrhs3_fu_424_p2;
reg   [0:0] notrhs3_reg_696;
wire   [31:0] tmp_data_V_4_fu_430_p1;
reg   [31:0] tmp_data_V_4_reg_701;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state7_pp0_stage0_iter0;
wire    ap_block_state22_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] ap_reg_pp0_iter1_tmp_data_V_4_reg_701;
wire   [0:0] tmp_10_fu_434_p2;
wire   [30:0] tmp_22_fu_439_p2;
reg   [30:0] tmp_22_reg_711;
wire   [0:0] notlhs2_fu_455_p2;
reg   [0:0] notlhs2_reg_716;
wire   [0:0] tmp_29_fu_507_p2;
reg    ap_block_state10_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
wire   [0:0] tmp_19_fu_518_p2;
reg   [0:0] tmp_19_reg_730;
wire   [31:0] tmp_12_fu_522_p2;
reg   [31:0] tmp_12_reg_735;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state11_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire   [31:0] grp_fu_287_p2;
reg   [31:0] tmp_16_reg_741;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_state19_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_11001;
wire   [0:0] notlhs6_fu_545_p2;
reg   [0:0] notlhs6_reg_750;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state21_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_11001;
wire   [0:0] notrhs7_fu_551_p2;
reg   [0:0] notrhs7_reg_755;
wire   [31:0] tmp_17_fu_557_p2;
wire   [0:0] or_cond_fu_574_p2;
wire   [31:0] tmp_20_fu_579_p2;
reg   [31:0] tmp_20_reg_769;
wire   [0:0] tmp_last_V_fu_585_p2;
reg   [0:0] tmp_last_V_reg_775;
wire   [31:0] tmp_21_fu_590_p2;
reg   [31:0] tmp_21_reg_780;
wire    ap_block_state8_pp0_stage1_iter0;
wire    ap_block_state23_pp0_stage1_iter1;
reg    ap_predicate_op166_write_state23;
reg    ap_block_state23_io;
reg    ap_block_pp0_stage1_11001;
wire   [31:0] tmp_15_fu_621_p2;
wire    ap_CS_fsm_state25;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state7;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_state9_pp0_stage2_iter0;
wire    ap_block_state24_pp0_stage2_iter1;
reg    ap_predicate_op170_write_state24;
reg    ap_block_state24_io;
reg    ap_block_pp0_stage2_subdone;
reg   [31:0] debug_load_1_reg_180;
reg   [31:0] tmp_6_reg_190;
reg   [31:0] debug_load6_reg_201;
reg   [31:0] storemerge_reg_211;
reg   [31:0] ap_phi_mux_sum_load_phi_fu_225_p4;
reg   [31:0] ap_phi_mux_sum_load8_phi_fu_260_p8;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage2_11001;
reg   [30:0] ap_phi_mux_tmp_data_V_3_phi_fu_249_p4;
reg   [31:0] ap_phi_reg_pp0_iter0_sum_load8_reg_256;
reg   [31:0] ap_phi_reg_pp0_iter1_sum_load8_reg_256;
reg   [31:0] ap_phi_reg_pp0_iter0_debug_load3_reg_272;
reg   [31:0] ap_phi_reg_pp0_iter1_debug_load3_reg_272;
wire    ap_CS_fsm_state3;
reg    ap_block_state3;
wire    ap_block_pp0_stage14_01001;
wire    ap_block_pp0_stage0_01001;
wire    ap_block_pp0_stage1_01001;
wire    ap_block_pp0_stage2_01001;
reg    ap_reg_ioackin_debug_dummy_ack;
wire   [31:0] grp_fu_287_p1;
reg   [31:0] grp_fu_292_p0;
reg   [31:0] grp_fu_292_p1;
wire    ap_block_pp0_stage12;
wire   [15:0] tmp_3_fu_314_p3;
wire   [22:0] tmp_24_fu_420_p1;
wire   [7:0] tmp_23_fu_445_p4;
wire   [31:0] sum_load_to_int_fu_461_p1;
wire   [7:0] tmp_13_fu_465_p4;
wire   [22:0] tmp_31_fu_475_p1;
wire   [0:0] notrhs_fu_485_p2;
wire   [0:0] notlhs_fu_479_p2;
wire   [0:0] tmp_25_fu_491_p2;
wire   [0:0] tmp_26_fu_497_p2;
wire   [0:0] tmp_27_fu_501_p2;
wire   [0:0] grp_fu_292_p2;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage14;
wire   [31:0] tmp_16_to_int_fu_528_p1;
wire   [7:0] tmp_30_fu_531_p4;
wire   [22:0] tmp_35_fu_541_p1;
wire   [0:0] tmp_32_fu_564_p2;
wire   [0:0] tmp_34_fu_568_p2;
reg    grp_fu_287_ce;
reg    ap_predicate_op124_fadd_state10;
reg    ap_predicate_op136_fadd_state19;
wire    ap_block_state12_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state13_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state14_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state15_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state16_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_11001;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state17_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state18_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
wire    ap_CS_fsm_pp0_stage11;
reg    grp_fu_292_ce;
reg    ap_predicate_op145_fcmp_state21;
wire    ap_block_state20_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_11001;
wire    ap_CS_fsm_pp0_stage13;
reg   [4:0] grp_fu_292_opcode;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage12_00001;
wire   [0:0] tmp_7_fu_341_p2;
wire   [0:0] tmp_8_fu_346_p2;
reg   [21:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_1789;
reg    ap_condition_1793;

// power-on initialization
initial begin
#0 ap_CS_fsm = 22'd1;
#0 stream_in_V_data_V_0_sel_rd = 1'b0;
#0 stream_in_V_data_V_0_sel_wr = 1'b0;
#0 stream_in_V_data_V_0_state = 2'd0;
#0 stream_in_V_keep_V_0_sel_rd = 1'b0;
#0 stream_in_V_keep_V_0_sel_wr = 1'b0;
#0 stream_in_V_keep_V_0_state = 2'd0;
#0 stream_in_V_strb_V_0_sel_rd = 1'b0;
#0 stream_in_V_strb_V_0_sel_wr = 1'b0;
#0 stream_in_V_strb_V_0_state = 2'd0;
#0 stream_in_V_user_V_0_sel_rd = 1'b0;
#0 stream_in_V_user_V_0_sel_wr = 1'b0;
#0 stream_in_V_user_V_0_state = 2'd0;
#0 stream_in_V_id_V_0_sel_rd = 1'b0;
#0 stream_in_V_id_V_0_sel_wr = 1'b0;
#0 stream_in_V_id_V_0_state = 2'd0;
#0 stream_in_V_dest_V_0_sel_rd = 1'b0;
#0 stream_in_V_dest_V_0_sel_wr = 1'b0;
#0 stream_in_V_dest_V_0_state = 2'd0;
#0 stream_out_V_data_V_1_sel_rd = 1'b0;
#0 stream_out_V_data_V_1_sel_wr = 1'b0;
#0 stream_out_V_data_V_1_state = 2'd0;
#0 stream_out_V_keep_V_1_sel_rd = 1'b0;
#0 stream_out_V_keep_V_1_sel_wr = 1'b0;
#0 stream_out_V_keep_V_1_state = 2'd0;
#0 stream_out_V_strb_V_1_sel_rd = 1'b0;
#0 stream_out_V_strb_V_1_sel_wr = 1'b0;
#0 stream_out_V_strb_V_1_state = 2'd0;
#0 stream_out_V_user_V_1_sel_rd = 1'b0;
#0 stream_out_V_user_V_1_sel_wr = 1'b0;
#0 stream_out_V_user_V_1_state = 2'd0;
#0 stream_out_V_last_V_1_sel_rd = 1'b0;
#0 stream_out_V_last_V_1_sel_wr = 1'b0;
#0 stream_out_V_last_V_1_state = 2'd0;
#0 stream_out_V_id_V_1_sel_rd = 1'b0;
#0 stream_out_V_id_V_1_sel_wr = 1'b0;
#0 stream_out_V_id_V_1_state = 2'd0;
#0 stream_out_V_dest_V_1_sel_rd = 1'b0;
#0 stream_out_V_dest_V_1_sel_wr = 1'b0;
#0 stream_out_V_dest_V_1_state = 2'd0;
#0 ip_index = 32'd0;
#0 channel_keep_V = 4'd0;
#0 channel_strb_V = 4'd0;
#0 channel_user_V = 2'd0;
#0 channel_id_V = 5'd0;
#0 channel_dest_V = 6'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_reg_ioackin_debug_dummy_ack = 1'b0;
end

sbs_spike_50_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
sbs_spike_50_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .debug(debug),
    .debug_ap_vld(debug_ap_vld),
    .layerSize(layerSize),
    .vectorSize(vectorSize)
);

sbs_spike_50_faddbkb #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
sbs_spike_50_faddbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(sum_load_reg_221),
    .din1(grp_fu_287_p1),
    .ce(grp_fu_287_ce),
    .dout(grp_fu_287_p2)
);

sbs_spike_50_fcmpcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
sbs_spike_50_fcmpcud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_292_p0),
    .din1(grp_fu_292_p1),
    .ce(grp_fu_292_ce),
    .opcode(grp_fu_292_opcode),
    .dout(grp_fu_292_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state7) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state7) & (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_subdone))))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state7);
        end else if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_debug_dummy_ack <= 1'b0;
    end else begin
        if ((((or_cond_reg_765 == 1'd1) & (tmp_29_reg_721 == 1'd1) & (ap_reg_pp0_iter1_tmp_10_reg_707 == 1'd1) & (tmp_last_V_reg_775 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_predicate_op166_write_state23 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
            ap_reg_ioackin_debug_dummy_ack <= 1'b0;
        end else if ((((or_cond_reg_765 == 1'd1) & (tmp_29_reg_721 == 1'd1) & (ap_reg_pp0_iter1_tmp_10_reg_707 == 1'd1) & (tmp_last_V_reg_775 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_01001)) | ((ap_predicate_op166_write_state23 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001)))) begin
            ap_reg_ioackin_debug_dummy_ack <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_data_V_0_ack_out == 1'b1) & (stream_in_V_data_V_0_vld_out == 1'b1))) begin
            stream_in_V_data_V_0_sel_rd <= ~stream_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_data_V_0_ack_in == 1'b1) & (stream_in_V_data_V_0_vld_in == 1'b1))) begin
            stream_in_V_data_V_0_sel_wr <= ~stream_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_data_V_0_state == 2'd2) & (stream_in_V_data_V_0_vld_in == 1'b0)) | ((stream_in_V_data_V_0_state == 2'd3) & (stream_in_V_data_V_0_vld_in == 1'b0) & (stream_in_V_data_V_0_ack_out == 1'b1)))) begin
            stream_in_V_data_V_0_state <= 2'd2;
        end else if ((((stream_in_V_data_V_0_state == 2'd1) & (stream_in_V_data_V_0_ack_out == 1'b0)) | ((stream_in_V_data_V_0_state == 2'd3) & (stream_in_V_data_V_0_ack_out == 1'b0) & (stream_in_V_data_V_0_vld_in == 1'b1)))) begin
            stream_in_V_data_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_data_V_0_vld_in == 1'b0) & (stream_in_V_data_V_0_ack_out == 1'b1)) & ~((stream_in_V_data_V_0_ack_out == 1'b0) & (stream_in_V_data_V_0_vld_in == 1'b1)) & (stream_in_V_data_V_0_state == 2'd3)) | ((stream_in_V_data_V_0_state == 2'd1) & (stream_in_V_data_V_0_ack_out == 1'b1)) | ((stream_in_V_data_V_0_state == 2'd2) & (stream_in_V_data_V_0_vld_in == 1'b1)))) begin
            stream_in_V_data_V_0_state <= 2'd3;
        end else begin
            stream_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_dest_V_0_ack_out == 1'b1) & (stream_in_V_dest_V_0_vld_out == 1'b1))) begin
            stream_in_V_dest_V_0_sel_rd <= ~stream_in_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_dest_V_0_ack_in == 1'b1) & (stream_in_V_dest_V_0_vld_in == 1'b1))) begin
            stream_in_V_dest_V_0_sel_wr <= ~stream_in_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_dest_V_0_state == 2'd2) & (stream_in_V_dest_V_0_vld_in == 1'b0)) | ((stream_in_V_dest_V_0_state == 2'd3) & (stream_in_V_dest_V_0_vld_in == 1'b0) & (stream_in_V_dest_V_0_ack_out == 1'b1)))) begin
            stream_in_V_dest_V_0_state <= 2'd2;
        end else if ((((stream_in_V_dest_V_0_state == 2'd1) & (stream_in_V_dest_V_0_ack_out == 1'b0)) | ((stream_in_V_dest_V_0_state == 2'd3) & (stream_in_V_dest_V_0_ack_out == 1'b0) & (stream_in_V_dest_V_0_vld_in == 1'b1)))) begin
            stream_in_V_dest_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_dest_V_0_vld_in == 1'b0) & (stream_in_V_dest_V_0_ack_out == 1'b1)) & ~((stream_in_V_dest_V_0_ack_out == 1'b0) & (stream_in_V_dest_V_0_vld_in == 1'b1)) & (stream_in_V_dest_V_0_state == 2'd3)) | ((stream_in_V_dest_V_0_state == 2'd1) & (stream_in_V_dest_V_0_ack_out == 1'b1)) | ((stream_in_V_dest_V_0_state == 2'd2) & (stream_in_V_dest_V_0_vld_in == 1'b1)))) begin
            stream_in_V_dest_V_0_state <= 2'd3;
        end else begin
            stream_in_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_id_V_0_ack_out == 1'b1) & (stream_in_V_id_V_0_vld_out == 1'b1))) begin
            stream_in_V_id_V_0_sel_rd <= ~stream_in_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_id_V_0_ack_in == 1'b1) & (stream_in_V_id_V_0_vld_in == 1'b1))) begin
            stream_in_V_id_V_0_sel_wr <= ~stream_in_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_id_V_0_state == 2'd2) & (stream_in_V_id_V_0_vld_in == 1'b0)) | ((stream_in_V_id_V_0_state == 2'd3) & (stream_in_V_id_V_0_vld_in == 1'b0) & (stream_in_V_id_V_0_ack_out == 1'b1)))) begin
            stream_in_V_id_V_0_state <= 2'd2;
        end else if ((((stream_in_V_id_V_0_state == 2'd1) & (stream_in_V_id_V_0_ack_out == 1'b0)) | ((stream_in_V_id_V_0_state == 2'd3) & (stream_in_V_id_V_0_ack_out == 1'b0) & (stream_in_V_id_V_0_vld_in == 1'b1)))) begin
            stream_in_V_id_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_id_V_0_vld_in == 1'b0) & (stream_in_V_id_V_0_ack_out == 1'b1)) & ~((stream_in_V_id_V_0_ack_out == 1'b0) & (stream_in_V_id_V_0_vld_in == 1'b1)) & (stream_in_V_id_V_0_state == 2'd3)) | ((stream_in_V_id_V_0_state == 2'd1) & (stream_in_V_id_V_0_ack_out == 1'b1)) | ((stream_in_V_id_V_0_state == 2'd2) & (stream_in_V_id_V_0_vld_in == 1'b1)))) begin
            stream_in_V_id_V_0_state <= 2'd3;
        end else begin
            stream_in_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_keep_V_0_ack_out == 1'b1) & (stream_in_V_keep_V_0_vld_out == 1'b1))) begin
            stream_in_V_keep_V_0_sel_rd <= ~stream_in_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_keep_V_0_ack_in == 1'b1) & (stream_in_V_keep_V_0_vld_in == 1'b1))) begin
            stream_in_V_keep_V_0_sel_wr <= ~stream_in_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_keep_V_0_state == 2'd2) & (stream_in_V_keep_V_0_vld_in == 1'b0)) | ((stream_in_V_keep_V_0_state == 2'd3) & (stream_in_V_keep_V_0_vld_in == 1'b0) & (stream_in_V_keep_V_0_ack_out == 1'b1)))) begin
            stream_in_V_keep_V_0_state <= 2'd2;
        end else if ((((stream_in_V_keep_V_0_state == 2'd1) & (stream_in_V_keep_V_0_ack_out == 1'b0)) | ((stream_in_V_keep_V_0_state == 2'd3) & (stream_in_V_keep_V_0_ack_out == 1'b0) & (stream_in_V_keep_V_0_vld_in == 1'b1)))) begin
            stream_in_V_keep_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_keep_V_0_vld_in == 1'b0) & (stream_in_V_keep_V_0_ack_out == 1'b1)) & ~((stream_in_V_keep_V_0_ack_out == 1'b0) & (stream_in_V_keep_V_0_vld_in == 1'b1)) & (stream_in_V_keep_V_0_state == 2'd3)) | ((stream_in_V_keep_V_0_state == 2'd1) & (stream_in_V_keep_V_0_ack_out == 1'b1)) | ((stream_in_V_keep_V_0_state == 2'd2) & (stream_in_V_keep_V_0_vld_in == 1'b1)))) begin
            stream_in_V_keep_V_0_state <= 2'd3;
        end else begin
            stream_in_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_strb_V_0_ack_out == 1'b1) & (stream_in_V_strb_V_0_vld_out == 1'b1))) begin
            stream_in_V_strb_V_0_sel_rd <= ~stream_in_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_strb_V_0_ack_in == 1'b1) & (stream_in_V_strb_V_0_vld_in == 1'b1))) begin
            stream_in_V_strb_V_0_sel_wr <= ~stream_in_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_strb_V_0_state == 2'd2) & (stream_in_V_strb_V_0_vld_in == 1'b0)) | ((stream_in_V_strb_V_0_state == 2'd3) & (stream_in_V_strb_V_0_vld_in == 1'b0) & (stream_in_V_strb_V_0_ack_out == 1'b1)))) begin
            stream_in_V_strb_V_0_state <= 2'd2;
        end else if ((((stream_in_V_strb_V_0_state == 2'd1) & (stream_in_V_strb_V_0_ack_out == 1'b0)) | ((stream_in_V_strb_V_0_state == 2'd3) & (stream_in_V_strb_V_0_ack_out == 1'b0) & (stream_in_V_strb_V_0_vld_in == 1'b1)))) begin
            stream_in_V_strb_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_strb_V_0_vld_in == 1'b0) & (stream_in_V_strb_V_0_ack_out == 1'b1)) & ~((stream_in_V_strb_V_0_ack_out == 1'b0) & (stream_in_V_strb_V_0_vld_in == 1'b1)) & (stream_in_V_strb_V_0_state == 2'd3)) | ((stream_in_V_strb_V_0_state == 2'd1) & (stream_in_V_strb_V_0_ack_out == 1'b1)) | ((stream_in_V_strb_V_0_state == 2'd2) & (stream_in_V_strb_V_0_vld_in == 1'b1)))) begin
            stream_in_V_strb_V_0_state <= 2'd3;
        end else begin
            stream_in_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_V_user_V_0_ack_out == 1'b1) & (stream_in_V_user_V_0_vld_out == 1'b1))) begin
            stream_in_V_user_V_0_sel_rd <= ~stream_in_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_V_user_V_0_ack_in == 1'b1) & (stream_in_V_user_V_0_vld_in == 1'b1))) begin
            stream_in_V_user_V_0_sel_wr <= ~stream_in_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_V_user_V_0_state == 2'd2) & (stream_in_V_user_V_0_vld_in == 1'b0)) | ((stream_in_V_user_V_0_state == 2'd3) & (stream_in_V_user_V_0_vld_in == 1'b0) & (stream_in_V_user_V_0_ack_out == 1'b1)))) begin
            stream_in_V_user_V_0_state <= 2'd2;
        end else if ((((stream_in_V_user_V_0_state == 2'd1) & (stream_in_V_user_V_0_ack_out == 1'b0)) | ((stream_in_V_user_V_0_state == 2'd3) & (stream_in_V_user_V_0_ack_out == 1'b0) & (stream_in_V_user_V_0_vld_in == 1'b1)))) begin
            stream_in_V_user_V_0_state <= 2'd1;
        end else if (((~((stream_in_V_user_V_0_vld_in == 1'b0) & (stream_in_V_user_V_0_ack_out == 1'b1)) & ~((stream_in_V_user_V_0_ack_out == 1'b0) & (stream_in_V_user_V_0_vld_in == 1'b1)) & (stream_in_V_user_V_0_state == 2'd3)) | ((stream_in_V_user_V_0_state == 2'd1) & (stream_in_V_user_V_0_ack_out == 1'b1)) | ((stream_in_V_user_V_0_state == 2'd2) & (stream_in_V_user_V_0_vld_in == 1'b1)))) begin
            stream_in_V_user_V_0_state <= 2'd3;
        end else begin
            stream_in_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_data_V_1_ack_out == 1'b1) & (stream_out_V_data_V_1_vld_out == 1'b1))) begin
            stream_out_V_data_V_1_sel_rd <= ~stream_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_data_V_1_ack_in == 1'b1) & (stream_out_V_data_V_1_vld_in == 1'b1))) begin
            stream_out_V_data_V_1_sel_wr <= ~stream_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_data_V_1_state == 2'd2) & (stream_out_V_data_V_1_vld_in == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_ack_out == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd2;
        end else if ((((stream_out_V_data_V_1_state == 2'd1) & (stream_out_V_data_V_1_ack_out == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_V_data_V_1_ack_out == 1'b0) & (stream_out_V_data_V_1_vld_in == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_ack_out == 1'b1)) & ~((stream_out_V_data_V_1_ack_out == 1'b0) & (stream_out_V_data_V_1_vld_in == 1'b1)) & (stream_out_V_data_V_1_state == 2'd3)) | ((stream_out_V_data_V_1_state == 2'd1) & (stream_out_V_data_V_1_ack_out == 1'b1)) | ((stream_out_V_data_V_1_state == 2'd2) & (stream_out_V_data_V_1_vld_in == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd3;
        end else begin
            stream_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_dest_V_1_ack_out == 1'b1) & (stream_out_V_dest_V_1_vld_out == 1'b1))) begin
            stream_out_V_dest_V_1_sel_rd <= ~stream_out_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_dest_V_1_ack_in == 1'b1) & (stream_out_V_dest_V_1_vld_in == 1'b1))) begin
            stream_out_V_dest_V_1_sel_wr <= ~stream_out_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_dest_V_1_state == 2'd2) & (stream_out_V_dest_V_1_vld_in == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_V_dest_V_1_vld_in == 1'b0) & (stream_out_V_dest_V_1_ack_out == 1'b1)))) begin
            stream_out_V_dest_V_1_state <= 2'd2;
        end else if ((((stream_out_V_dest_V_1_state == 2'd1) & (stream_out_V_dest_V_1_ack_out == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_V_dest_V_1_ack_out == 1'b0) & (stream_out_V_dest_V_1_vld_in == 1'b1)))) begin
            stream_out_V_dest_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_dest_V_1_vld_in == 1'b0) & (stream_out_V_dest_V_1_ack_out == 1'b1)) & ~((stream_out_V_dest_V_1_ack_out == 1'b0) & (stream_out_V_dest_V_1_vld_in == 1'b1)) & (stream_out_V_dest_V_1_state == 2'd3)) | ((stream_out_V_dest_V_1_state == 2'd1) & (stream_out_V_dest_V_1_ack_out == 1'b1)) | ((stream_out_V_dest_V_1_state == 2'd2) & (stream_out_V_dest_V_1_vld_in == 1'b1)))) begin
            stream_out_V_dest_V_1_state <= 2'd3;
        end else begin
            stream_out_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_id_V_1_ack_out == 1'b1) & (stream_out_V_id_V_1_vld_out == 1'b1))) begin
            stream_out_V_id_V_1_sel_rd <= ~stream_out_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_id_V_1_ack_in == 1'b1) & (stream_out_V_id_V_1_vld_in == 1'b1))) begin
            stream_out_V_id_V_1_sel_wr <= ~stream_out_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_id_V_1_state == 2'd2) & (stream_out_V_id_V_1_vld_in == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_V_id_V_1_vld_in == 1'b0) & (stream_out_V_id_V_1_ack_out == 1'b1)))) begin
            stream_out_V_id_V_1_state <= 2'd2;
        end else if ((((stream_out_V_id_V_1_state == 2'd1) & (stream_out_V_id_V_1_ack_out == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_V_id_V_1_ack_out == 1'b0) & (stream_out_V_id_V_1_vld_in == 1'b1)))) begin
            stream_out_V_id_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_id_V_1_vld_in == 1'b0) & (stream_out_V_id_V_1_ack_out == 1'b1)) & ~((stream_out_V_id_V_1_ack_out == 1'b0) & (stream_out_V_id_V_1_vld_in == 1'b1)) & (stream_out_V_id_V_1_state == 2'd3)) | ((stream_out_V_id_V_1_state == 2'd1) & (stream_out_V_id_V_1_ack_out == 1'b1)) | ((stream_out_V_id_V_1_state == 2'd2) & (stream_out_V_id_V_1_vld_in == 1'b1)))) begin
            stream_out_V_id_V_1_state <= 2'd3;
        end else begin
            stream_out_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_keep_V_1_ack_out == 1'b1) & (stream_out_V_keep_V_1_vld_out == 1'b1))) begin
            stream_out_V_keep_V_1_sel_rd <= ~stream_out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_keep_V_1_ack_in == 1'b1) & (stream_out_V_keep_V_1_vld_in == 1'b1))) begin
            stream_out_V_keep_V_1_sel_wr <= ~stream_out_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_keep_V_1_state == 2'd2) & (stream_out_V_keep_V_1_vld_in == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_V_keep_V_1_vld_in == 1'b0) & (stream_out_V_keep_V_1_ack_out == 1'b1)))) begin
            stream_out_V_keep_V_1_state <= 2'd2;
        end else if ((((stream_out_V_keep_V_1_state == 2'd1) & (stream_out_V_keep_V_1_ack_out == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_V_keep_V_1_ack_out == 1'b0) & (stream_out_V_keep_V_1_vld_in == 1'b1)))) begin
            stream_out_V_keep_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_keep_V_1_vld_in == 1'b0) & (stream_out_V_keep_V_1_ack_out == 1'b1)) & ~((stream_out_V_keep_V_1_ack_out == 1'b0) & (stream_out_V_keep_V_1_vld_in == 1'b1)) & (stream_out_V_keep_V_1_state == 2'd3)) | ((stream_out_V_keep_V_1_state == 2'd1) & (stream_out_V_keep_V_1_ack_out == 1'b1)) | ((stream_out_V_keep_V_1_state == 2'd2) & (stream_out_V_keep_V_1_vld_in == 1'b1)))) begin
            stream_out_V_keep_V_1_state <= 2'd3;
        end else begin
            stream_out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_last_V_1_ack_out == 1'b1) & (stream_out_V_last_V_1_vld_out == 1'b1))) begin
            stream_out_V_last_V_1_sel_rd <= ~stream_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_last_V_1_ack_in == 1'b1) & (stream_out_V_last_V_1_vld_in == 1'b1))) begin
            stream_out_V_last_V_1_sel_wr <= ~stream_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_last_V_1_state == 2'd2) & (stream_out_V_last_V_1_vld_in == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_V_last_V_1_vld_in == 1'b0) & (stream_out_V_last_V_1_ack_out == 1'b1)))) begin
            stream_out_V_last_V_1_state <= 2'd2;
        end else if ((((stream_out_V_last_V_1_state == 2'd1) & (stream_out_V_last_V_1_ack_out == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_V_last_V_1_ack_out == 1'b0) & (stream_out_V_last_V_1_vld_in == 1'b1)))) begin
            stream_out_V_last_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_last_V_1_vld_in == 1'b0) & (stream_out_V_last_V_1_ack_out == 1'b1)) & ~((stream_out_V_last_V_1_ack_out == 1'b0) & (stream_out_V_last_V_1_vld_in == 1'b1)) & (stream_out_V_last_V_1_state == 2'd3)) | ((stream_out_V_last_V_1_state == 2'd1) & (stream_out_V_last_V_1_ack_out == 1'b1)) | ((stream_out_V_last_V_1_state == 2'd2) & (stream_out_V_last_V_1_vld_in == 1'b1)))) begin
            stream_out_V_last_V_1_state <= 2'd3;
        end else begin
            stream_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_strb_V_1_ack_out == 1'b1) & (stream_out_V_strb_V_1_vld_out == 1'b1))) begin
            stream_out_V_strb_V_1_sel_rd <= ~stream_out_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_strb_V_1_ack_in == 1'b1) & (stream_out_V_strb_V_1_vld_in == 1'b1))) begin
            stream_out_V_strb_V_1_sel_wr <= ~stream_out_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_strb_V_1_state == 2'd2) & (stream_out_V_strb_V_1_vld_in == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_V_strb_V_1_vld_in == 1'b0) & (stream_out_V_strb_V_1_ack_out == 1'b1)))) begin
            stream_out_V_strb_V_1_state <= 2'd2;
        end else if ((((stream_out_V_strb_V_1_state == 2'd1) & (stream_out_V_strb_V_1_ack_out == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_V_strb_V_1_ack_out == 1'b0) & (stream_out_V_strb_V_1_vld_in == 1'b1)))) begin
            stream_out_V_strb_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_strb_V_1_vld_in == 1'b0) & (stream_out_V_strb_V_1_ack_out == 1'b1)) & ~((stream_out_V_strb_V_1_ack_out == 1'b0) & (stream_out_V_strb_V_1_vld_in == 1'b1)) & (stream_out_V_strb_V_1_state == 2'd3)) | ((stream_out_V_strb_V_1_state == 2'd1) & (stream_out_V_strb_V_1_ack_out == 1'b1)) | ((stream_out_V_strb_V_1_state == 2'd2) & (stream_out_V_strb_V_1_vld_in == 1'b1)))) begin
            stream_out_V_strb_V_1_state <= 2'd3;
        end else begin
            stream_out_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_user_V_1_ack_out == 1'b1) & (stream_out_V_user_V_1_vld_out == 1'b1))) begin
            stream_out_V_user_V_1_sel_rd <= ~stream_out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_user_V_1_ack_in == 1'b1) & (stream_out_V_user_V_1_vld_in == 1'b1))) begin
            stream_out_V_user_V_1_sel_wr <= ~stream_out_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_user_V_1_state == 2'd2) & (stream_out_V_user_V_1_vld_in == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_V_user_V_1_vld_in == 1'b0) & (stream_out_V_user_V_1_ack_out == 1'b1)))) begin
            stream_out_V_user_V_1_state <= 2'd2;
        end else if ((((stream_out_V_user_V_1_state == 2'd1) & (stream_out_V_user_V_1_ack_out == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_V_user_V_1_ack_out == 1'b0) & (stream_out_V_user_V_1_vld_in == 1'b1)))) begin
            stream_out_V_user_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_user_V_1_vld_in == 1'b0) & (stream_out_V_user_V_1_ack_out == 1'b1)) & ~((stream_out_V_user_V_1_ack_out == 1'b0) & (stream_out_V_user_V_1_vld_in == 1'b1)) & (stream_out_V_user_V_1_state == 2'd3)) | ((stream_out_V_user_V_1_state == 2'd1) & (stream_out_V_user_V_1_ack_out == 1'b1)) | ((stream_out_V_user_V_1_state == 2'd2) & (stream_out_V_user_V_1_vld_in == 1'b1)))) begin
            stream_out_V_user_V_1_state <= 2'd3;
        end else begin
            stream_out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_29_reg_721 == 1'd1) & (tmp_10_reg_707 == 1'd1) & (or_cond_fu_574_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
                ap_phi_reg_pp0_iter1_debug_load3_reg_272[17 : 0] <= tmp_17_fu_557_p2[17 : 0];
        ap_phi_reg_pp0_iter1_debug_load3_reg_272[31 : 19] <= tmp_17_fu_557_p2[31 : 19];
    end else if (((tmp_29_reg_721 == 1'd1) & (tmp_10_reg_707 == 1'd1) & (tmp_last_V_fu_585_p2 == 1'd1) & (or_cond_fu_574_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
                ap_phi_reg_pp0_iter1_debug_load3_reg_272[17 : 0] <= tmp_21_fu_590_p2[17 : 0];
        ap_phi_reg_pp0_iter1_debug_load3_reg_272[31 : 19] <= tmp_21_fu_590_p2[31 : 19];
    end else if (((tmp_29_reg_721 == 1'd1) & (tmp_10_reg_707 == 1'd1) & (or_cond_fu_574_p2 == 1'd1) & (tmp_last_V_fu_585_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
                ap_phi_reg_pp0_iter1_debug_load3_reg_272[17 : 0] <= tmp_20_fu_579_p2[17 : 0];
        ap_phi_reg_pp0_iter1_debug_load3_reg_272[31 : 19] <= tmp_20_fu_579_p2[31 : 19];
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001))) begin
                ap_phi_reg_pp0_iter1_debug_load3_reg_272[17 : 0] <= ap_phi_reg_pp0_iter0_debug_load3_reg_272[17 : 0];
        ap_phi_reg_pp0_iter1_debug_load3_reg_272[31 : 19] <= ap_phi_reg_pp0_iter0_debug_load3_reg_272[31 : 19];
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_data_V_0_vld_out == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            debug_load6_reg_201 <= tmp_9_fu_359_p2;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            debug_load6_reg_201 <= tmp_s_fu_352_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        debug_load_1_reg_180 <= debug_load_2_reg_233;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        debug_load_1_reg_180 <= tmp_3_cast_fu_320_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_tmp_10_reg_707 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        debug_load_2_reg_233 <= debug_load3_reg_272;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        debug_load_2_reg_233 <= debug_load6_reg_201;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_reg_707 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_load_reg_221 <= ap_phi_mux_sum_load8_phi_fu_260_p8;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        sum_load_reg_221 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_6_reg_190 <= tmp_15_fu_621_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_6_reg_190 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_reg_707 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_V_3_reg_245 <= tmp_22_reg_711;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_data_V_3_reg_245 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_reg_707 == 1'd1) & (tmp_29_reg_721 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_phi_reg_pp0_iter0_debug_load3_reg_272[17 : 0] <= tmp_12_fu_522_p2[17 : 0];
ap_phi_reg_pp0_iter0_debug_load3_reg_272[31 : 19] <= tmp_12_fu_522_p2[31 : 19];
        ap_phi_reg_pp0_iter0_sum_load8_reg_256 <= sum_load_reg_221;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001))) begin
        ap_phi_reg_pp0_iter1_sum_load8_reg_256 <= ap_phi_reg_pp0_iter0_sum_load8_reg_256;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_reg_pp0_iter1_tmp_10_reg_707 <= tmp_10_reg_707;
        ap_reg_pp0_iter1_tmp_data_V_4_reg_701[30 : 0] <= tmp_data_V_4_reg_701[30 : 0];
        tmp_10_reg_707 <= tmp_10_fu_434_p2;
        tmp_data_V_4_reg_701[30 : 0] <= tmp_data_V_4_fu_430_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        channel_dest_V <= stream_in_V_dest_V_0_data_out;
        channel_id_V <= stream_in_V_id_V_0_data_out;
        channel_keep_V <= stream_in_V_keep_V_0_data_out;
        channel_strb_V <= stream_in_V_strb_V_0_data_out;
        channel_user_V <= stream_in_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        debug_load3_reg_272[17 : 0] <= ap_phi_reg_pp0_iter1_debug_load3_reg_272[17 : 0];
debug_load3_reg_272[31 : 19] <= ap_phi_reg_pp0_iter1_debug_load3_reg_272[31 : 19];
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_id_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_user_V_1_ack_in == 1'b0) | (stream_out_V_strb_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        ip_index <= tmp_6_reg_190;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        layerSize_read_reg_633 <= layerSize;
        tmp_18_reg_644 <= tmp_18_fu_310_p1;
        tmp_reg_639 <= tmp_fu_306_p1;
        vectorSize_read_reg_627 <= vectorSize;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_fu_434_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        notlhs2_reg_716 <= notlhs2_fu_455_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_29_reg_721 == 1'd1) & (tmp_10_reg_707 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001))) begin
        notlhs6_reg_750 <= notlhs6_fu_545_p2;
        notrhs7_reg_755 <= notrhs7_fu_551_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        notrhs3_reg_696 <= notrhs3_fu_424_p2;
        tmp_2_reg_690 <= tmp_2_fu_416_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_29_reg_721 == 1'd1) & (tmp_10_reg_707 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_cond_reg_765 <= or_cond_fu_574_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        storemerge_reg_211 <= stream_in_V_data_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_data_V_0_load_A == 1'b1)) begin
        stream_in_V_data_V_0_payload_A <= stream_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_data_V_0_load_B == 1'b1)) begin
        stream_in_V_data_V_0_payload_B <= stream_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_dest_V_0_load_A == 1'b1)) begin
        stream_in_V_dest_V_0_payload_A <= stream_in_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_dest_V_0_load_B == 1'b1)) begin
        stream_in_V_dest_V_0_payload_B <= stream_in_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_id_V_0_load_A == 1'b1)) begin
        stream_in_V_id_V_0_payload_A <= stream_in_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_id_V_0_load_B == 1'b1)) begin
        stream_in_V_id_V_0_payload_B <= stream_in_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_keep_V_0_load_A == 1'b1)) begin
        stream_in_V_keep_V_0_payload_A <= stream_in_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_keep_V_0_load_B == 1'b1)) begin
        stream_in_V_keep_V_0_payload_B <= stream_in_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_strb_V_0_load_A == 1'b1)) begin
        stream_in_V_strb_V_0_payload_A <= stream_in_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_strb_V_0_load_B == 1'b1)) begin
        stream_in_V_strb_V_0_payload_B <= stream_in_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_user_V_0_load_A == 1'b1)) begin
        stream_in_V_user_V_0_payload_A <= stream_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_V_user_V_0_load_B == 1'b1)) begin
        stream_in_V_user_V_0_payload_B <= stream_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_data_V_1_load_A == 1'b1)) begin
        stream_out_V_data_V_1_payload_A <= ap_reg_pp0_iter1_tmp_data_V_4_reg_701;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_data_V_1_load_B == 1'b1)) begin
        stream_out_V_data_V_1_payload_B <= ap_reg_pp0_iter1_tmp_data_V_4_reg_701;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_dest_V_1_load_A == 1'b1)) begin
        stream_out_V_dest_V_1_payload_A <= channel_dest_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_dest_V_1_load_B == 1'b1)) begin
        stream_out_V_dest_V_1_payload_B <= channel_dest_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_id_V_1_load_A == 1'b1)) begin
        stream_out_V_id_V_1_payload_A <= channel_id_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_id_V_1_load_B == 1'b1)) begin
        stream_out_V_id_V_1_payload_B <= channel_id_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_keep_V_1_load_A == 1'b1)) begin
        stream_out_V_keep_V_1_payload_A <= channel_keep_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_keep_V_1_load_B == 1'b1)) begin
        stream_out_V_keep_V_1_payload_B <= channel_keep_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_last_V_1_load_A == 1'b1)) begin
        stream_out_V_last_V_1_payload_A <= tmp_last_V_reg_775;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_last_V_1_load_B == 1'b1)) begin
        stream_out_V_last_V_1_payload_B <= tmp_last_V_reg_775;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_strb_V_1_load_A == 1'b1)) begin
        stream_out_V_strb_V_1_payload_A <= channel_strb_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_strb_V_1_load_B == 1'b1)) begin
        stream_out_V_strb_V_1_payload_B <= channel_strb_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_user_V_1_load_A == 1'b1)) begin
        stream_out_V_user_V_1_payload_A <= channel_user_V;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_user_V_1_load_B == 1'b1)) begin
        stream_out_V_user_V_1_payload_B <= channel_user_V;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_reg_707 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        tmp_12_reg_735[17 : 0] <= tmp_12_fu_522_p2[17 : 0];
tmp_12_reg_735[31 : 19] <= tmp_12_fu_522_p2[31 : 19];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_29_reg_721 == 1'd1) & (tmp_10_reg_707 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001))) begin
        tmp_16_reg_741 <= grp_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_reg_707 == 1'd1) & (tmp_29_fu_507_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_19_reg_730 <= tmp_19_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_29_reg_721 == 1'd1) & (tmp_10_reg_707 == 1'd1) & (or_cond_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_20_reg_769[17 : 0] <= tmp_20_fu_579_p2[17 : 0];
tmp_20_reg_769[31 : 21] <= tmp_20_fu_579_p2[31 : 21];
        tmp_last_V_reg_775 <= tmp_last_V_fu_585_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_29_reg_721 == 1'd1) & (tmp_10_reg_707 == 1'd1) & (tmp_last_V_fu_585_p2 == 1'd1) & (or_cond_fu_574_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_21_reg_780[17 : 0] <= tmp_21_fu_590_p2[17 : 0];
tmp_21_reg_780[31 : 22] <= tmp_21_fu_590_p2[31 : 22];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_22_reg_711 <= tmp_22_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_10_reg_707 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_29_reg_721 <= tmp_29_fu_507_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_4_reg_654 <= tmp_4_fu_325_p2;
        tmp_5_reg_659 <= tmp_5_fu_330_p2;
    end
end

always @ (*) begin
    if ((tmp_10_fu_434_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((~((stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_id_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_user_V_1_ack_in == 1'b0) | (stream_out_V_strb_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0)) & (tmp_7_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp_29_reg_721 == 1'd1) & (tmp_10_reg_707 == 1'd1) & (or_cond_fu_574_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((tmp_29_reg_721 == 1'd1) & (tmp_10_reg_707 == 1'd1) & (or_cond_fu_574_p2 == 1'd1) & (tmp_last_V_fu_585_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((tmp_29_reg_721 == 1'd1) & (tmp_10_reg_707 == 1'd1) & (tmp_last_V_fu_585_p2 == 1'd1) & (or_cond_fu_574_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        ap_phi_mux_sum_load8_phi_fu_260_p8 = tmp_16_reg_741;
    end else begin
        ap_phi_mux_sum_load8_phi_fu_260_p8 = ap_phi_reg_pp0_iter1_sum_load8_reg_256;
    end
end

always @ (*) begin
    if (((tmp_10_reg_707 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_sum_load_phi_fu_225_p4 = ap_phi_mux_sum_load8_phi_fu_260_p8;
    end else begin
        ap_phi_mux_sum_load_phi_fu_225_p4 = sum_load_reg_221;
    end
end

always @ (*) begin
    if (((tmp_10_reg_707 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_tmp_data_V_3_phi_fu_249_p4 = tmp_22_reg_711;
    end else begin
        ap_phi_mux_tmp_data_V_3_phi_fu_249_p4 = tmp_data_V_3_reg_245;
    end
end

always @ (*) begin
    if ((~((stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_id_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_user_V_1_ack_in == 1'b0) | (stream_out_V_strb_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0)) & (tmp_7_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond_reg_765 == 1'd1) & (tmp_29_reg_721 == 1'd1) & (ap_reg_pp0_iter1_tmp_10_reg_707 == 1'd1) & (tmp_last_V_reg_775 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_01001))) begin
        debug = tmp_21_reg_780;
    end else if (((ap_predicate_op166_write_state23 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        debug = tmp_20_reg_769;
    end else if (((tmp_29_reg_721 == 1'd1) & (tmp_10_reg_707 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        debug = tmp_17_fu_557_p2;
    end else if (((tmp_10_reg_707 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_01001))) begin
        debug = tmp_12_reg_735;
    end else if (((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        debug = tmp_9_fu_359_p2;
    end else if (((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        debug = tmp_s_fu_352_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        debug = tmp_3_cast_fu_320_p1;
    end else begin
        debug = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((or_cond_reg_765 == 1'd1) & (tmp_29_reg_721 == 1'd1) & (ap_reg_pp0_iter1_tmp_10_reg_707 == 1'd1) & (tmp_last_V_reg_775 == 1'd1) & (ap_reg_ioackin_debug_dummy_ack == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_01001)) | ((ap_predicate_op166_write_state23 == 1'b1) & (ap_reg_ioackin_debug_dummy_ack == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_01001)) | ((tmp_29_reg_721 == 1'd1) & (tmp_10_reg_707 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001)) | ((tmp_10_reg_707 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_01001)) | ((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        debug_ap_vld = 1'b1;
    end else begin
        debug_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        grp_fu_287_ce = 1'b1;
    end else begin
        grp_fu_287_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        grp_fu_292_ce = 1'b1;
    end else begin
        grp_fu_292_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_1793)) begin
            grp_fu_292_opcode = 5'd5;
        end else if ((1'b1 == ap_condition_1789)) begin
            grp_fu_292_opcode = 5'd4;
        end else begin
            grp_fu_292_opcode = 'bx;
        end
    end else begin
        grp_fu_292_opcode = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12))) begin
            grp_fu_292_p0 = tmp_2_reg_690;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_292_p0 = ap_phi_mux_sum_load_phi_fu_225_p4;
        end else begin
            grp_fu_292_p0 = 'bx;
        end
    end else begin
        grp_fu_292_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12))) begin
            grp_fu_292_p1 = grp_fu_287_p2;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_292_p1 = tmp_2_reg_690;
        end else begin
            grp_fu_292_p1 = 'bx;
        end
    end else begin
        grp_fu_292_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_pp0_stage3) & (tmp_10_reg_707 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        stream_in_TDATA_blk_n = stream_in_V_data_V_0_state[1'd0];
    end else begin
        stream_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((tmp_10_reg_707 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        stream_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_data_V_0_sel == 1'b1)) begin
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_B;
    end else begin
        stream_in_V_data_V_0_data_out = stream_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((tmp_10_reg_707 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        stream_in_V_dest_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_dest_V_0_sel == 1'b1)) begin
        stream_in_V_dest_V_0_data_out = stream_in_V_dest_V_0_payload_B;
    end else begin
        stream_in_V_dest_V_0_data_out = stream_in_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((tmp_10_reg_707 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        stream_in_V_id_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_id_V_0_sel == 1'b1)) begin
        stream_in_V_id_V_0_data_out = stream_in_V_id_V_0_payload_B;
    end else begin
        stream_in_V_id_V_0_data_out = stream_in_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((tmp_10_reg_707 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        stream_in_V_keep_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_keep_V_0_sel == 1'b1)) begin
        stream_in_V_keep_V_0_data_out = stream_in_V_keep_V_0_payload_B;
    end else begin
        stream_in_V_keep_V_0_data_out = stream_in_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((tmp_10_reg_707 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        stream_in_V_strb_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_strb_V_0_sel == 1'b1)) begin
        stream_in_V_strb_V_0_data_out = stream_in_V_strb_V_0_payload_B;
    end else begin
        stream_in_V_strb_V_0_data_out = stream_in_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((tmp_10_reg_707 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        stream_in_V_user_V_0_ack_out = 1'b1;
    end else begin
        stream_in_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_V_user_V_0_sel == 1'b1)) begin
        stream_in_V_user_V_0_data_out = stream_in_V_user_V_0_payload_B;
    end else begin
        stream_in_V_user_V_0_data_out = stream_in_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (or_cond_reg_765 == 1'd1) & (tmp_29_reg_721 == 1'd1) & (ap_reg_pp0_iter1_tmp_10_reg_707 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (or_cond_reg_765 == 1'd1) & (tmp_29_reg_721 == 1'd1) & (ap_reg_pp0_iter1_tmp_10_reg_707 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        stream_out_TDATA_blk_n = stream_out_V_data_V_1_state[1'd1];
    end else begin
        stream_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((stream_out_V_data_V_1_sel == 1'b1)) begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_B;
    end else begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op166_write_state23 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        stream_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_dest_V_1_sel == 1'b1)) begin
        stream_out_V_dest_V_1_data_out = stream_out_V_dest_V_1_payload_B;
    end else begin
        stream_out_V_dest_V_1_data_out = stream_out_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op166_write_state23 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        stream_out_V_dest_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_id_V_1_sel == 1'b1)) begin
        stream_out_V_id_V_1_data_out = stream_out_V_id_V_1_payload_B;
    end else begin
        stream_out_V_id_V_1_data_out = stream_out_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op166_write_state23 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        stream_out_V_id_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_keep_V_1_sel == 1'b1)) begin
        stream_out_V_keep_V_1_data_out = stream_out_V_keep_V_1_payload_B;
    end else begin
        stream_out_V_keep_V_1_data_out = stream_out_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op166_write_state23 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        stream_out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_last_V_1_sel == 1'b1)) begin
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_B;
    end else begin
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op166_write_state23 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        stream_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_strb_V_1_sel == 1'b1)) begin
        stream_out_V_strb_V_1_data_out = stream_out_V_strb_V_1_payload_B;
    end else begin
        stream_out_V_strb_V_1_data_out = stream_out_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op166_write_state23 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        stream_out_V_strb_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stream_out_V_user_V_1_sel == 1'b1)) begin
        stream_out_V_user_V_1_data_out = stream_out_V_user_V_1_payload_B;
    end else begin
        stream_out_V_user_V_1_data_out = stream_out_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((ap_predicate_op166_write_state23 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        stream_out_V_user_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_id_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_user_V_1_ack_in == 1'b0) | (stream_out_V_strb_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0)) & (tmp_7_fu_341_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_id_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_user_V_1_ack_in == 1'b0) | (stream_out_V_strb_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0)) & (tmp_8_fu_346_p2 == 1'd1) & (tmp_7_fu_341_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if ((~((stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_id_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_user_V_1_ack_in == 1'b0) | (stream_out_V_strb_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0)) & (tmp_7_fu_341_p2 == 1'd1) & (tmp_8_fu_346_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((stream_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_10_fu_434_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_10_fu_434_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((1'b1 == ap_block_state23_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((1'b1 == ap_block_state23_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((1'b1 == ap_block_state24_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((1'b1 == ap_block_state24_io) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((tmp_10_reg_707 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((tmp_10_reg_707 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state10_pp0_stage3_iter0 = ((tmp_10_reg_707 == 1'd1) & (stream_in_V_data_V_0_vld_out == 1'b0));
end

assign ap_block_state11_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_io = ((ap_predicate_op166_write_state23 == 1'b1) & (stream_out_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state23_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_io = ((ap_predicate_op170_write_state24 == 1'b1) & (stream_out_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state24_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3 = ((stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_id_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_user_V_1_ack_in == 1'b0) | (stream_out_V_strb_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1789 = ((tmp_10_fu_434_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_00001));
end

always @ (*) begin
    ap_condition_1793 = ((ap_predicate_op136_fadd_state19 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_00001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op124_fadd_state10 = ((tmp_10_reg_707 == 1'd1) & (tmp_29_fu_507_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op136_fadd_state19 = ((tmp_29_reg_721 == 1'd1) & (tmp_10_reg_707 == 1'd1));
end

always @ (*) begin
    ap_predicate_op145_fcmp_state21 = ((tmp_29_reg_721 == 1'd1) & (tmp_10_reg_707 == 1'd1));
end

always @ (*) begin
    ap_predicate_op166_write_state23 = ((or_cond_reg_765 == 1'd1) & (tmp_29_reg_721 == 1'd1) & (ap_reg_pp0_iter1_tmp_10_reg_707 == 1'd1));
end

always @ (*) begin
    ap_predicate_op170_write_state24 = ((or_cond_reg_765 == 1'd1) & (tmp_29_reg_721 == 1'd1) & (ap_reg_pp0_iter1_tmp_10_reg_707 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_287_p1 = stream_in_V_data_V_0_data_out;

assign notlhs2_fu_455_p2 = ((tmp_23_fu_445_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs6_fu_545_p2 = ((tmp_30_fu_531_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_479_p2 = ((tmp_13_fu_465_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs3_fu_424_p2 = ((tmp_24_fu_420_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs7_fu_551_p2 = ((tmp_35_fu_541_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_485_p2 = ((tmp_31_fu_475_p1 == 23'd0) ? 1'b1 : 1'b0);

assign or_cond_fu_574_p2 = (tmp_34_fu_568_p2 | tmp_19_reg_730);

assign stream_in_TREADY = stream_in_V_dest_V_0_state[1'd1];

assign stream_in_V_data_V_0_ack_in = stream_in_V_data_V_0_state[1'd1];

assign stream_in_V_data_V_0_load_A = (stream_in_V_data_V_0_state_cmp_full & ~stream_in_V_data_V_0_sel_wr);

assign stream_in_V_data_V_0_load_B = (stream_in_V_data_V_0_state_cmp_full & stream_in_V_data_V_0_sel_wr);

assign stream_in_V_data_V_0_sel = stream_in_V_data_V_0_sel_rd;

assign stream_in_V_data_V_0_state_cmp_full = ((stream_in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_data_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_data_V_0_vld_out = stream_in_V_data_V_0_state[1'd0];

assign stream_in_V_dest_V_0_ack_in = stream_in_V_dest_V_0_state[1'd1];

assign stream_in_V_dest_V_0_load_A = (stream_in_V_dest_V_0_state_cmp_full & ~stream_in_V_dest_V_0_sel_wr);

assign stream_in_V_dest_V_0_load_B = (stream_in_V_dest_V_0_state_cmp_full & stream_in_V_dest_V_0_sel_wr);

assign stream_in_V_dest_V_0_sel = stream_in_V_dest_V_0_sel_rd;

assign stream_in_V_dest_V_0_state_cmp_full = ((stream_in_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_dest_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_dest_V_0_vld_out = stream_in_V_dest_V_0_state[1'd0];

assign stream_in_V_id_V_0_ack_in = stream_in_V_id_V_0_state[1'd1];

assign stream_in_V_id_V_0_load_A = (stream_in_V_id_V_0_state_cmp_full & ~stream_in_V_id_V_0_sel_wr);

assign stream_in_V_id_V_0_load_B = (stream_in_V_id_V_0_state_cmp_full & stream_in_V_id_V_0_sel_wr);

assign stream_in_V_id_V_0_sel = stream_in_V_id_V_0_sel_rd;

assign stream_in_V_id_V_0_state_cmp_full = ((stream_in_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_id_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_id_V_0_vld_out = stream_in_V_id_V_0_state[1'd0];

assign stream_in_V_keep_V_0_ack_in = stream_in_V_keep_V_0_state[1'd1];

assign stream_in_V_keep_V_0_load_A = (stream_in_V_keep_V_0_state_cmp_full & ~stream_in_V_keep_V_0_sel_wr);

assign stream_in_V_keep_V_0_load_B = (stream_in_V_keep_V_0_state_cmp_full & stream_in_V_keep_V_0_sel_wr);

assign stream_in_V_keep_V_0_sel = stream_in_V_keep_V_0_sel_rd;

assign stream_in_V_keep_V_0_state_cmp_full = ((stream_in_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_keep_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_keep_V_0_vld_out = stream_in_V_keep_V_0_state[1'd0];

assign stream_in_V_strb_V_0_ack_in = stream_in_V_strb_V_0_state[1'd1];

assign stream_in_V_strb_V_0_load_A = (stream_in_V_strb_V_0_state_cmp_full & ~stream_in_V_strb_V_0_sel_wr);

assign stream_in_V_strb_V_0_load_B = (stream_in_V_strb_V_0_state_cmp_full & stream_in_V_strb_V_0_sel_wr);

assign stream_in_V_strb_V_0_sel = stream_in_V_strb_V_0_sel_rd;

assign stream_in_V_strb_V_0_state_cmp_full = ((stream_in_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_strb_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_strb_V_0_vld_out = stream_in_V_strb_V_0_state[1'd0];

assign stream_in_V_user_V_0_ack_in = stream_in_V_user_V_0_state[1'd1];

assign stream_in_V_user_V_0_load_A = (stream_in_V_user_V_0_state_cmp_full & ~stream_in_V_user_V_0_sel_wr);

assign stream_in_V_user_V_0_load_B = (stream_in_V_user_V_0_state_cmp_full & stream_in_V_user_V_0_sel_wr);

assign stream_in_V_user_V_0_sel = stream_in_V_user_V_0_sel_rd;

assign stream_in_V_user_V_0_state_cmp_full = ((stream_in_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_V_user_V_0_vld_in = stream_in_TVALID;

assign stream_in_V_user_V_0_vld_out = stream_in_V_user_V_0_state[1'd0];

assign stream_out_TDATA = stream_out_V_data_V_1_data_out;

assign stream_out_TDEST = stream_out_V_dest_V_1_data_out;

assign stream_out_TID = stream_out_V_id_V_1_data_out;

assign stream_out_TKEEP = stream_out_V_keep_V_1_data_out;

assign stream_out_TLAST = stream_out_V_last_V_1_data_out;

assign stream_out_TSTRB = stream_out_V_strb_V_1_data_out;

assign stream_out_TUSER = stream_out_V_user_V_1_data_out;

assign stream_out_TVALID = stream_out_V_dest_V_1_state[1'd0];

assign stream_out_V_data_V_1_ack_in = stream_out_V_data_V_1_state[1'd1];

assign stream_out_V_data_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_data_V_1_load_A = (stream_out_V_data_V_1_state_cmp_full & ~stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_load_B = (stream_out_V_data_V_1_state_cmp_full & stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_sel = stream_out_V_data_V_1_sel_rd;

assign stream_out_V_data_V_1_state_cmp_full = ((stream_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_data_V_1_vld_out = stream_out_V_data_V_1_state[1'd0];

assign stream_out_V_dest_V_1_ack_in = stream_out_V_dest_V_1_state[1'd1];

assign stream_out_V_dest_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_dest_V_1_load_A = (stream_out_V_dest_V_1_state_cmp_full & ~stream_out_V_dest_V_1_sel_wr);

assign stream_out_V_dest_V_1_load_B = (stream_out_V_dest_V_1_state_cmp_full & stream_out_V_dest_V_1_sel_wr);

assign stream_out_V_dest_V_1_sel = stream_out_V_dest_V_1_sel_rd;

assign stream_out_V_dest_V_1_state_cmp_full = ((stream_out_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_dest_V_1_vld_out = stream_out_V_dest_V_1_state[1'd0];

assign stream_out_V_id_V_1_ack_in = stream_out_V_id_V_1_state[1'd1];

assign stream_out_V_id_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_id_V_1_load_A = (stream_out_V_id_V_1_state_cmp_full & ~stream_out_V_id_V_1_sel_wr);

assign stream_out_V_id_V_1_load_B = (stream_out_V_id_V_1_state_cmp_full & stream_out_V_id_V_1_sel_wr);

assign stream_out_V_id_V_1_sel = stream_out_V_id_V_1_sel_rd;

assign stream_out_V_id_V_1_state_cmp_full = ((stream_out_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_id_V_1_vld_out = stream_out_V_id_V_1_state[1'd0];

assign stream_out_V_keep_V_1_ack_in = stream_out_V_keep_V_1_state[1'd1];

assign stream_out_V_keep_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_keep_V_1_load_A = (stream_out_V_keep_V_1_state_cmp_full & ~stream_out_V_keep_V_1_sel_wr);

assign stream_out_V_keep_V_1_load_B = (stream_out_V_keep_V_1_state_cmp_full & stream_out_V_keep_V_1_sel_wr);

assign stream_out_V_keep_V_1_sel = stream_out_V_keep_V_1_sel_rd;

assign stream_out_V_keep_V_1_state_cmp_full = ((stream_out_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_keep_V_1_vld_out = stream_out_V_keep_V_1_state[1'd0];

assign stream_out_V_last_V_1_ack_in = stream_out_V_last_V_1_state[1'd1];

assign stream_out_V_last_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_last_V_1_load_A = (stream_out_V_last_V_1_state_cmp_full & ~stream_out_V_last_V_1_sel_wr);

assign stream_out_V_last_V_1_load_B = (stream_out_V_last_V_1_state_cmp_full & stream_out_V_last_V_1_sel_wr);

assign stream_out_V_last_V_1_sel = stream_out_V_last_V_1_sel_rd;

assign stream_out_V_last_V_1_state_cmp_full = ((stream_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_last_V_1_vld_out = stream_out_V_last_V_1_state[1'd0];

assign stream_out_V_strb_V_1_ack_in = stream_out_V_strb_V_1_state[1'd1];

assign stream_out_V_strb_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_strb_V_1_load_A = (stream_out_V_strb_V_1_state_cmp_full & ~stream_out_V_strb_V_1_sel_wr);

assign stream_out_V_strb_V_1_load_B = (stream_out_V_strb_V_1_state_cmp_full & stream_out_V_strb_V_1_sel_wr);

assign stream_out_V_strb_V_1_sel = stream_out_V_strb_V_1_sel_rd;

assign stream_out_V_strb_V_1_state_cmp_full = ((stream_out_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_strb_V_1_vld_out = stream_out_V_strb_V_1_state[1'd0];

assign stream_out_V_user_V_1_ack_in = stream_out_V_user_V_1_state[1'd1];

assign stream_out_V_user_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_user_V_1_load_A = (stream_out_V_user_V_1_state_cmp_full & ~stream_out_V_user_V_1_sel_wr);

assign stream_out_V_user_V_1_load_B = (stream_out_V_user_V_1_state_cmp_full & stream_out_V_user_V_1_sel_wr);

assign stream_out_V_user_V_1_sel = stream_out_V_user_V_1_sel_rd;

assign stream_out_V_user_V_1_state_cmp_full = ((stream_out_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_user_V_1_vld_out = stream_out_V_user_V_1_state[1'd0];

assign sum_load_to_int_fu_461_p1 = sum_load_reg_221;

assign tmp_10_fu_434_p2 = (($signed(tmp_data_V_4_fu_430_p1) < $signed(vectorSize_read_reg_627)) ? 1'b1 : 1'b0);

assign tmp_12_fu_522_p2 = (debug_load_2_reg_233 | 32'd262144);

assign tmp_13_fu_465_p4 = {{sum_load_to_int_fu_461_p1[30:23]}};

assign tmp_15_fu_621_p2 = (ip_index + 32'd1);

assign tmp_16_to_int_fu_528_p1 = tmp_16_reg_741;

assign tmp_17_fu_557_p2 = (debug_load_2_reg_233 | 32'd786432);

assign tmp_18_fu_310_p1 = vectorSize[7:0];

assign tmp_19_fu_518_p2 = ((tmp_data_V_4_reg_701 == tmp_4_reg_654) ? 1'b1 : 1'b0);

assign tmp_20_fu_579_p2 = (debug_load_2_reg_233 | 32'd1835008);

assign tmp_21_fu_590_p2 = (debug_load_2_reg_233 | 32'd3932160);

assign tmp_22_fu_439_p2 = (ap_phi_mux_tmp_data_V_3_phi_fu_249_p4 + 31'd1);

assign tmp_23_fu_445_p4 = {{storemerge_reg_211[30:23]}};

assign tmp_24_fu_420_p1 = storemerge_reg_211[22:0];

assign tmp_25_fu_491_p2 = (notrhs_fu_485_p2 | notlhs_fu_479_p2);

assign tmp_26_fu_497_p2 = (notrhs3_reg_696 | notlhs2_reg_716);

assign tmp_27_fu_501_p2 = (tmp_26_fu_497_p2 & tmp_25_fu_491_p2);

assign tmp_29_fu_507_p2 = (tmp_27_fu_501_p2 & grp_fu_292_p2);

assign tmp_2_fu_416_p1 = storemerge_reg_211;

assign tmp_30_fu_531_p4 = {{tmp_16_to_int_fu_528_p1[30:23]}};

assign tmp_31_fu_475_p1 = sum_load_to_int_fu_461_p1[22:0];

assign tmp_32_fu_564_p2 = (notrhs7_reg_755 | notlhs6_reg_750);

assign tmp_34_fu_568_p2 = (tmp_32_fu_564_p2 & grp_fu_292_p2);

assign tmp_35_fu_541_p1 = tmp_16_to_int_fu_528_p1[22:0];

assign tmp_3_cast_fu_320_p1 = tmp_3_fu_314_p3;

assign tmp_3_fu_314_p3 = {{tmp_18_reg_644}, {tmp_reg_639}};

assign tmp_4_fu_325_p2 = ($signed(32'd4294967295) + $signed(vectorSize_read_reg_627));

assign tmp_5_fu_330_p2 = ($signed(32'd4294967295) + $signed(layerSize_read_reg_633));

assign tmp_7_fu_341_p2 = (($signed(tmp_6_reg_190) < $signed(layerSize_read_reg_633)) ? 1'b1 : 1'b0);

assign tmp_8_fu_346_p2 = ((tmp_6_reg_190 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_9_fu_359_p2 = (debug_load_1_reg_180 | 32'd65536);

assign tmp_data_V_4_fu_430_p1 = ap_phi_mux_tmp_data_V_3_phi_fu_249_p4;

assign tmp_fu_306_p1 = layerSize[7:0];

assign tmp_last_V_fu_585_p2 = ((ip_index == tmp_5_reg_659) ? 1'b1 : 1'b0);

assign tmp_s_fu_352_p2 = (debug_load_1_reg_180 | 32'd131072);

always @ (posedge ap_clk) begin
    debug_load3_reg_272[18] <= 1'b1;
    tmp_data_V_4_reg_701[31] <= 1'b0;
    ap_reg_pp0_iter1_tmp_data_V_4_reg_701[31] <= 1'b0;
    tmp_12_reg_735[18] <= 1'b1;
    tmp_20_reg_769[20:18] <= 3'b111;
    tmp_21_reg_780[21:18] <= 4'b1111;
    ap_phi_reg_pp0_iter0_debug_load3_reg_272[18] <= 1'b1;
    ap_phi_reg_pp0_iter1_debug_load3_reg_272[18] <= 1'b1;
end

endmodule //sbs_spike_50
