-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sbs_spike_50 is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    stream_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    stream_in_TVALID : IN STD_LOGIC;
    stream_in_TREADY : OUT STD_LOGIC;
    stream_in_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    stream_in_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    stream_in_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    stream_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    stream_in_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    stream_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    stream_out_TVALID : OUT STD_LOGIC;
    stream_out_TREADY : IN STD_LOGIC;
    stream_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    stream_out_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    stream_out_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    stream_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    stream_out_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0);
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of sbs_spike_50 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sbs_spike_50,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.086000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=1713,HLS_SYN_LUT=2589}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_20000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_const_lv32_10000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_40000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_const_lv32_C0000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000011000000000000000000";
    constant ap_const_lv32_1C0000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000111000000000000000000";
    constant ap_const_lv32_3C0000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001111000000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal stream_in_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_in_V_data_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_data_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_data_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_data_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_in_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_in_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_data_V_0_sel : STD_LOGIC;
    signal stream_in_V_data_V_0_load_A : STD_LOGIC;
    signal stream_in_V_data_V_0_load_B : STD_LOGIC;
    signal stream_in_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_V_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_in_V_keep_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_keep_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_keep_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_keep_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_in_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_in_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_keep_V_0_sel : STD_LOGIC;
    signal stream_in_V_keep_V_0_load_A : STD_LOGIC;
    signal stream_in_V_keep_V_0_load_B : STD_LOGIC;
    signal stream_in_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_V_strb_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_in_V_strb_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_strb_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_strb_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_strb_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_in_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_in_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_strb_V_0_sel : STD_LOGIC;
    signal stream_in_V_strb_V_0_load_A : STD_LOGIC;
    signal stream_in_V_strb_V_0_load_B : STD_LOGIC;
    signal stream_in_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_V_user_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal stream_in_V_user_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_user_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_user_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_user_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_user_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal stream_in_V_user_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal stream_in_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_user_V_0_sel : STD_LOGIC;
    signal stream_in_V_user_V_0_load_A : STD_LOGIC;
    signal stream_in_V_user_V_0_load_B : STD_LOGIC;
    signal stream_in_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_V_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_in_V_id_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_id_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_id_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_id_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_in_V_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_in_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_id_V_0_sel : STD_LOGIC;
    signal stream_in_V_id_V_0_load_A : STD_LOGIC;
    signal stream_in_V_id_V_0_load_B : STD_LOGIC;
    signal stream_in_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_V_dest_V_0_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal stream_in_V_dest_V_0_vld_in : STD_LOGIC;
    signal stream_in_V_dest_V_0_vld_out : STD_LOGIC;
    signal stream_in_V_dest_V_0_ack_in : STD_LOGIC;
    signal stream_in_V_dest_V_0_ack_out : STD_LOGIC;
    signal stream_in_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal stream_in_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal stream_in_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_V_dest_V_0_sel : STD_LOGIC;
    signal stream_in_V_dest_V_0_load_A : STD_LOGIC;
    signal stream_in_V_dest_V_0_load_B : STD_LOGIC;
    signal stream_in_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal stream_out_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_out_V_data_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_data_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_data_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_data_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_data_V_1_sel : STD_LOGIC;
    signal stream_out_V_data_V_1_load_A : STD_LOGIC;
    signal stream_out_V_data_V_1_load_B : STD_LOGIC;
    signal stream_out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_out_V_keep_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_keep_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_keep_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_keep_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_out_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_out_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_keep_V_1_sel : STD_LOGIC;
    signal stream_out_V_keep_V_1_load_A : STD_LOGIC;
    signal stream_out_V_keep_V_1_load_B : STD_LOGIC;
    signal stream_out_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_out_V_strb_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_strb_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_strb_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_strb_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_out_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal stream_out_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_strb_V_1_sel : STD_LOGIC;
    signal stream_out_V_strb_V_1_load_A : STD_LOGIC;
    signal stream_out_V_strb_V_1_load_B : STD_LOGIC;
    signal stream_out_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_user_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal stream_out_V_user_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_user_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_user_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_user_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_user_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal stream_out_V_user_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal stream_out_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_user_V_1_sel : STD_LOGIC;
    signal stream_out_V_user_V_1_load_A : STD_LOGIC;
    signal stream_out_V_user_V_1_load_B : STD_LOGIC;
    signal stream_out_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_last_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_last_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_last_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_last_V_1_sel : STD_LOGIC;
    signal stream_out_V_last_V_1_load_A : STD_LOGIC;
    signal stream_out_V_last_V_1_load_B : STD_LOGIC;
    signal stream_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_out_V_id_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_id_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_id_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_id_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_id_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_out_V_id_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal stream_out_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_id_V_1_sel : STD_LOGIC;
    signal stream_out_V_id_V_1_load_A : STD_LOGIC;
    signal stream_out_V_id_V_1_load_B : STD_LOGIC;
    signal stream_out_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_dest_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal stream_out_V_dest_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_dest_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_dest_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_dest_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal stream_out_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal stream_out_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_dest_V_1_sel : STD_LOGIC;
    signal stream_out_V_dest_V_1_load_A : STD_LOGIC;
    signal stream_out_V_dest_V_1_load_B : STD_LOGIC;
    signal stream_out_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal debug : STD_LOGIC_VECTOR (31 downto 0);
    signal debug_ap_vld : STD_LOGIC;
    signal layerSize : STD_LOGIC_VECTOR (31 downto 0);
    signal vectorSize : STD_LOGIC_VECTOR (31 downto 0);
    signal ip_index : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal channel_keep_V : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal channel_strb_V : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal channel_user_V : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal channel_id_V : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal channel_dest_V : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal stream_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal tmp_10_reg_707 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_reg_pp0_iter1_tmp_10_reg_707 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_reg_721 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_765 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal sum_load_reg_221 : STD_LOGIC_VECTOR (31 downto 0);
    signal debug_load_2_reg_233 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_3_reg_245 : STD_LOGIC_VECTOR (30 downto 0);
    signal debug_load3_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal vectorSize_read_reg_627 : STD_LOGIC_VECTOR (31 downto 0);
    signal layerSize_read_reg_633 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_306_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_639 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_310_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_reg_644 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_cast_fu_320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_4_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_659 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_416_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal notrhs3_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs3_reg_696 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_4_fu_430_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_data_V_4_reg_701 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_tmp_data_V_4_reg_701 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_439_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_22_reg_711 : STD_LOGIC_VECTOR (30 downto 0);
    signal notlhs2_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs2_reg_716 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state10_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_19_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_730 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_735 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state11_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal grp_fu_287_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_741 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_state19_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal notlhs6_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs6_reg_750 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_state21_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal notrhs7_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs7_reg_755 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_557_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_579_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_769 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_V_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_775 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_590_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_780 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state8_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter1 : BOOLEAN;
    signal ap_predicate_op166_write_state23 : BOOLEAN;
    signal ap_block_state23_io : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_15_fu_621_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state7 : STD_LOGIC;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter1 : BOOLEAN;
    signal ap_predicate_op170_write_state24 : BOOLEAN;
    signal ap_block_state24_io : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal debug_load_1_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal debug_load6_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_sum_load_phi_fu_225_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_sum_load8_phi_fu_260_p8 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_phi_mux_tmp_data_V_3_phi_fu_249_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_phi_reg_pp0_iter0_sum_load8_reg_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_sum_load8_reg_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_debug_load3_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_debug_load3_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3 : BOOLEAN;
    signal ap_block_pp0_stage14_01001 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal ap_reg_ioackin_debug_dummy_ack : STD_LOGIC := '0';
    signal grp_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_292_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_292_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal tmp_3_fu_314_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_420_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_23_fu_445_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_load_to_int_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_465_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_475_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal tmp_16_to_int_fu_528_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_531_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_fu_541_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_32_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_287_ce : STD_LOGIC;
    signal ap_predicate_op124_fadd_state10 : BOOLEAN;
    signal ap_predicate_op136_fadd_state19 : BOOLEAN;
    signal ap_block_state12_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state13_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state14_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state15_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state16_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state17_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state18_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal grp_fu_292_ce : STD_LOGIC;
    signal ap_predicate_op145_fcmp_state21 : BOOLEAN;
    signal ap_block_state20_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal grp_fu_292_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage12_00001 : BOOLEAN;
    signal tmp_7_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_1789 : BOOLEAN;
    signal ap_condition_1793 : BOOLEAN;

    component sbs_spike_50_faddbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sbs_spike_50_fcmpcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component sbs_spike_50_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        debug : IN STD_LOGIC_VECTOR (31 downto 0);
        debug_ap_vld : IN STD_LOGIC;
        layerSize : OUT STD_LOGIC_VECTOR (31 downto 0);
        vectorSize : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sbs_spike_50_CRTL_BUS_s_axi_U : component sbs_spike_50_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        debug => debug,
        debug_ap_vld => debug_ap_vld,
        layerSize => layerSize,
        vectorSize => vectorSize);

    sbs_spike_50_faddbkb_U1 : component sbs_spike_50_faddbkb
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sum_load_reg_221,
        din1 => grp_fu_287_p1,
        ce => grp_fu_287_ce,
        dout => grp_fu_287_p2);

    sbs_spike_50_fcmpcud_U2 : component sbs_spike_50_fcmpcud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_292_p0,
        din1 => grp_fu_292_p1,
        ce => grp_fu_292_ce,
        opcode => grp_fu_292_opcode,
        dout => grp_fu_292_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7) and (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_subdone))))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state7);
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_debug_dummy_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_debug_dummy_ack <= ap_const_logic_0;
            else
                if ((((or_cond_reg_765 = ap_const_lv1_1) and (tmp_29_reg_721 = ap_const_lv1_1) and (ap_reg_pp0_iter1_tmp_10_reg_707 = ap_const_lv1_1) and (tmp_last_V_reg_775 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_predicate_op166_write_state23 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
                    ap_reg_ioackin_debug_dummy_ack <= ap_const_logic_0;
                elsif ((((or_cond_reg_765 = ap_const_lv1_1) and (tmp_29_reg_721 = ap_const_lv1_1) and (ap_reg_pp0_iter1_tmp_10_reg_707 = ap_const_lv1_1) and (tmp_last_V_reg_775 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_01001)) or ((ap_predicate_op166_write_state23 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001)))) then 
                    ap_reg_ioackin_debug_dummy_ack <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_V_data_V_0_ack_out = ap_const_logic_1) and (stream_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_V_data_V_0_sel_rd <= not(stream_in_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_V_data_V_0_ack_in = ap_const_logic_1) and (stream_in_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_V_data_V_0_sel_wr <= not(stream_in_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_data_V_0_state = ap_const_lv2_2) and (stream_in_V_data_V_0_vld_in = ap_const_logic_0)) or ((stream_in_V_data_V_0_state = ap_const_lv2_3) and (stream_in_V_data_V_0_vld_in = ap_const_logic_0) and (stream_in_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_data_V_0_state = ap_const_lv2_1) and (stream_in_V_data_V_0_ack_out = ap_const_logic_0)) or ((stream_in_V_data_V_0_state = ap_const_lv2_3) and (stream_in_V_data_V_0_ack_out = ap_const_logic_0) and (stream_in_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_data_V_0_vld_in = ap_const_logic_0) and (stream_in_V_data_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_data_V_0_ack_out = ap_const_logic_0) and (stream_in_V_data_V_0_vld_in = ap_const_logic_1))) and (stream_in_V_data_V_0_state = ap_const_lv2_3)) or ((stream_in_V_data_V_0_state = ap_const_lv2_1) and (stream_in_V_data_V_0_ack_out = ap_const_logic_1)) or ((stream_in_V_data_V_0_state = ap_const_lv2_2) and (stream_in_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_V_dest_V_0_ack_out = ap_const_logic_1) and (stream_in_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_V_dest_V_0_sel_rd <= not(stream_in_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_V_dest_V_0_ack_in = ap_const_logic_1) and (stream_in_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_V_dest_V_0_sel_wr <= not(stream_in_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_dest_V_0_state = ap_const_lv2_2) and (stream_in_V_dest_V_0_vld_in = ap_const_logic_0)) or ((stream_in_V_dest_V_0_state = ap_const_lv2_3) and (stream_in_V_dest_V_0_vld_in = ap_const_logic_0) and (stream_in_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_dest_V_0_state = ap_const_lv2_1) and (stream_in_V_dest_V_0_ack_out = ap_const_logic_0)) or ((stream_in_V_dest_V_0_state = ap_const_lv2_3) and (stream_in_V_dest_V_0_ack_out = ap_const_logic_0) and (stream_in_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_dest_V_0_vld_in = ap_const_logic_0) and (stream_in_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_dest_V_0_ack_out = ap_const_logic_0) and (stream_in_V_dest_V_0_vld_in = ap_const_logic_1))) and (stream_in_V_dest_V_0_state = ap_const_lv2_3)) or ((stream_in_V_dest_V_0_state = ap_const_lv2_1) and (stream_in_V_dest_V_0_ack_out = ap_const_logic_1)) or ((stream_in_V_dest_V_0_state = ap_const_lv2_2) and (stream_in_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_V_id_V_0_ack_out = ap_const_logic_1) and (stream_in_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_V_id_V_0_sel_rd <= not(stream_in_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_V_id_V_0_ack_in = ap_const_logic_1) and (stream_in_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_V_id_V_0_sel_wr <= not(stream_in_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_id_V_0_state = ap_const_lv2_2) and (stream_in_V_id_V_0_vld_in = ap_const_logic_0)) or ((stream_in_V_id_V_0_state = ap_const_lv2_3) and (stream_in_V_id_V_0_vld_in = ap_const_logic_0) and (stream_in_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_id_V_0_state = ap_const_lv2_1) and (stream_in_V_id_V_0_ack_out = ap_const_logic_0)) or ((stream_in_V_id_V_0_state = ap_const_lv2_3) and (stream_in_V_id_V_0_ack_out = ap_const_logic_0) and (stream_in_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_id_V_0_vld_in = ap_const_logic_0) and (stream_in_V_id_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_id_V_0_ack_out = ap_const_logic_0) and (stream_in_V_id_V_0_vld_in = ap_const_logic_1))) and (stream_in_V_id_V_0_state = ap_const_lv2_3)) or ((stream_in_V_id_V_0_state = ap_const_lv2_1) and (stream_in_V_id_V_0_ack_out = ap_const_logic_1)) or ((stream_in_V_id_V_0_state = ap_const_lv2_2) and (stream_in_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_V_keep_V_0_ack_out = ap_const_logic_1) and (stream_in_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_V_keep_V_0_sel_rd <= not(stream_in_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_V_keep_V_0_ack_in = ap_const_logic_1) and (stream_in_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_V_keep_V_0_sel_wr <= not(stream_in_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_keep_V_0_state = ap_const_lv2_2) and (stream_in_V_keep_V_0_vld_in = ap_const_logic_0)) or ((stream_in_V_keep_V_0_state = ap_const_lv2_3) and (stream_in_V_keep_V_0_vld_in = ap_const_logic_0) and (stream_in_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_keep_V_0_state = ap_const_lv2_1) and (stream_in_V_keep_V_0_ack_out = ap_const_logic_0)) or ((stream_in_V_keep_V_0_state = ap_const_lv2_3) and (stream_in_V_keep_V_0_ack_out = ap_const_logic_0) and (stream_in_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_keep_V_0_vld_in = ap_const_logic_0) and (stream_in_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_keep_V_0_ack_out = ap_const_logic_0) and (stream_in_V_keep_V_0_vld_in = ap_const_logic_1))) and (stream_in_V_keep_V_0_state = ap_const_lv2_3)) or ((stream_in_V_keep_V_0_state = ap_const_lv2_1) and (stream_in_V_keep_V_0_ack_out = ap_const_logic_1)) or ((stream_in_V_keep_V_0_state = ap_const_lv2_2) and (stream_in_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_V_strb_V_0_ack_out = ap_const_logic_1) and (stream_in_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_V_strb_V_0_sel_rd <= not(stream_in_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_V_strb_V_0_ack_in = ap_const_logic_1) and (stream_in_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_V_strb_V_0_sel_wr <= not(stream_in_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_strb_V_0_state = ap_const_lv2_2) and (stream_in_V_strb_V_0_vld_in = ap_const_logic_0)) or ((stream_in_V_strb_V_0_state = ap_const_lv2_3) and (stream_in_V_strb_V_0_vld_in = ap_const_logic_0) and (stream_in_V_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_strb_V_0_state = ap_const_lv2_1) and (stream_in_V_strb_V_0_ack_out = ap_const_logic_0)) or ((stream_in_V_strb_V_0_state = ap_const_lv2_3) and (stream_in_V_strb_V_0_ack_out = ap_const_logic_0) and (stream_in_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_strb_V_0_vld_in = ap_const_logic_0) and (stream_in_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_strb_V_0_ack_out = ap_const_logic_0) and (stream_in_V_strb_V_0_vld_in = ap_const_logic_1))) and (stream_in_V_strb_V_0_state = ap_const_lv2_3)) or ((stream_in_V_strb_V_0_state = ap_const_lv2_1) and (stream_in_V_strb_V_0_ack_out = ap_const_logic_1)) or ((stream_in_V_strb_V_0_state = ap_const_lv2_2) and (stream_in_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_V_user_V_0_ack_out = ap_const_logic_1) and (stream_in_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_V_user_V_0_sel_rd <= not(stream_in_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_V_user_V_0_ack_in = ap_const_logic_1) and (stream_in_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_V_user_V_0_sel_wr <= not(stream_in_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_V_user_V_0_state = ap_const_lv2_2) and (stream_in_V_user_V_0_vld_in = ap_const_logic_0)) or ((stream_in_V_user_V_0_state = ap_const_lv2_3) and (stream_in_V_user_V_0_vld_in = ap_const_logic_0) and (stream_in_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_V_user_V_0_state = ap_const_lv2_1) and (stream_in_V_user_V_0_ack_out = ap_const_logic_0)) or ((stream_in_V_user_V_0_state = ap_const_lv2_3) and (stream_in_V_user_V_0_ack_out = ap_const_logic_0) and (stream_in_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_V_user_V_0_vld_in = ap_const_logic_0) and (stream_in_V_user_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_V_user_V_0_ack_out = ap_const_logic_0) and (stream_in_V_user_V_0_vld_in = ap_const_logic_1))) and (stream_in_V_user_V_0_state = ap_const_lv2_3)) or ((stream_in_V_user_V_0_state = ap_const_lv2_1) and (stream_in_V_user_V_0_ack_out = ap_const_logic_1)) or ((stream_in_V_user_V_0_state = ap_const_lv2_2) and (stream_in_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_data_V_1_ack_out = ap_const_logic_1) and (stream_out_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_data_V_1_sel_rd <= not(stream_out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_data_V_1_ack_in = ap_const_logic_1) and (stream_out_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_data_V_1_sel_wr <= not(stream_out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_data_V_1_state = ap_const_lv2_2) and (stream_out_V_data_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_data_V_1_state = ap_const_lv2_3) and (stream_out_V_data_V_1_vld_in = ap_const_logic_0) and (stream_out_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_data_V_1_state = ap_const_lv2_1) and (stream_out_V_data_V_1_ack_out = ap_const_logic_0)) or ((stream_out_V_data_V_1_state = ap_const_lv2_3) and (stream_out_V_data_V_1_ack_out = ap_const_logic_0) and (stream_out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_data_V_1_vld_in = ap_const_logic_0) and (stream_out_V_data_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_data_V_1_ack_out = ap_const_logic_0) and (stream_out_V_data_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_data_V_1_state = ap_const_lv2_3)) or ((stream_out_V_data_V_1_state = ap_const_lv2_1) and (stream_out_V_data_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_data_V_1_state = ap_const_lv2_2) and (stream_out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_dest_V_1_ack_out = ap_const_logic_1) and (stream_out_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_dest_V_1_sel_rd <= not(stream_out_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_dest_V_1_ack_in = ap_const_logic_1) and (stream_out_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_dest_V_1_sel_wr <= not(stream_out_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_dest_V_1_state = ap_const_lv2_2) and (stream_out_V_dest_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_dest_V_1_state = ap_const_lv2_3) and (stream_out_V_dest_V_1_vld_in = ap_const_logic_0) and (stream_out_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_dest_V_1_state = ap_const_lv2_1) and (stream_out_V_dest_V_1_ack_out = ap_const_logic_0)) or ((stream_out_V_dest_V_1_state = ap_const_lv2_3) and (stream_out_V_dest_V_1_ack_out = ap_const_logic_0) and (stream_out_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_dest_V_1_vld_in = ap_const_logic_0) and (stream_out_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_dest_V_1_ack_out = ap_const_logic_0) and (stream_out_V_dest_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_dest_V_1_state = ap_const_lv2_3)) or ((stream_out_V_dest_V_1_state = ap_const_lv2_1) and (stream_out_V_dest_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_dest_V_1_state = ap_const_lv2_2) and (stream_out_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_id_V_1_ack_out = ap_const_logic_1) and (stream_out_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_id_V_1_sel_rd <= not(stream_out_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_id_V_1_ack_in = ap_const_logic_1) and (stream_out_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_id_V_1_sel_wr <= not(stream_out_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_id_V_1_state = ap_const_lv2_2) and (stream_out_V_id_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_id_V_1_state = ap_const_lv2_3) and (stream_out_V_id_V_1_vld_in = ap_const_logic_0) and (stream_out_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_id_V_1_state = ap_const_lv2_1) and (stream_out_V_id_V_1_ack_out = ap_const_logic_0)) or ((stream_out_V_id_V_1_state = ap_const_lv2_3) and (stream_out_V_id_V_1_ack_out = ap_const_logic_0) and (stream_out_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_id_V_1_vld_in = ap_const_logic_0) and (stream_out_V_id_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_id_V_1_ack_out = ap_const_logic_0) and (stream_out_V_id_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_id_V_1_state = ap_const_lv2_3)) or ((stream_out_V_id_V_1_state = ap_const_lv2_1) and (stream_out_V_id_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_id_V_1_state = ap_const_lv2_2) and (stream_out_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_keep_V_1_ack_out = ap_const_logic_1) and (stream_out_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_keep_V_1_sel_rd <= not(stream_out_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_keep_V_1_ack_in = ap_const_logic_1) and (stream_out_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_keep_V_1_sel_wr <= not(stream_out_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_keep_V_1_state = ap_const_lv2_2) and (stream_out_V_keep_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_keep_V_1_state = ap_const_lv2_3) and (stream_out_V_keep_V_1_vld_in = ap_const_logic_0) and (stream_out_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_keep_V_1_state = ap_const_lv2_1) and (stream_out_V_keep_V_1_ack_out = ap_const_logic_0)) or ((stream_out_V_keep_V_1_state = ap_const_lv2_3) and (stream_out_V_keep_V_1_ack_out = ap_const_logic_0) and (stream_out_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_keep_V_1_vld_in = ap_const_logic_0) and (stream_out_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_keep_V_1_ack_out = ap_const_logic_0) and (stream_out_V_keep_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_keep_V_1_state = ap_const_lv2_3)) or ((stream_out_V_keep_V_1_state = ap_const_lv2_1) and (stream_out_V_keep_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_keep_V_1_state = ap_const_lv2_2) and (stream_out_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_last_V_1_ack_out = ap_const_logic_1) and (stream_out_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_last_V_1_sel_rd <= not(stream_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_last_V_1_ack_in = ap_const_logic_1) and (stream_out_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_last_V_1_sel_wr <= not(stream_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_last_V_1_state = ap_const_lv2_2) and (stream_out_V_last_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_last_V_1_state = ap_const_lv2_3) and (stream_out_V_last_V_1_vld_in = ap_const_logic_0) and (stream_out_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_last_V_1_state = ap_const_lv2_1) and (stream_out_V_last_V_1_ack_out = ap_const_logic_0)) or ((stream_out_V_last_V_1_state = ap_const_lv2_3) and (stream_out_V_last_V_1_ack_out = ap_const_logic_0) and (stream_out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_last_V_1_vld_in = ap_const_logic_0) and (stream_out_V_last_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_last_V_1_ack_out = ap_const_logic_0) and (stream_out_V_last_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_last_V_1_state = ap_const_lv2_3)) or ((stream_out_V_last_V_1_state = ap_const_lv2_1) and (stream_out_V_last_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_last_V_1_state = ap_const_lv2_2) and (stream_out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_strb_V_1_ack_out = ap_const_logic_1) and (stream_out_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_strb_V_1_sel_rd <= not(stream_out_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_strb_V_1_ack_in = ap_const_logic_1) and (stream_out_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_strb_V_1_sel_wr <= not(stream_out_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_strb_V_1_state = ap_const_lv2_2) and (stream_out_V_strb_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_strb_V_1_state = ap_const_lv2_3) and (stream_out_V_strb_V_1_vld_in = ap_const_logic_0) and (stream_out_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_strb_V_1_state = ap_const_lv2_1) and (stream_out_V_strb_V_1_ack_out = ap_const_logic_0)) or ((stream_out_V_strb_V_1_state = ap_const_lv2_3) and (stream_out_V_strb_V_1_ack_out = ap_const_logic_0) and (stream_out_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_strb_V_1_vld_in = ap_const_logic_0) and (stream_out_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_strb_V_1_ack_out = ap_const_logic_0) and (stream_out_V_strb_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_strb_V_1_state = ap_const_lv2_3)) or ((stream_out_V_strb_V_1_state = ap_const_lv2_1) and (stream_out_V_strb_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_strb_V_1_state = ap_const_lv2_2) and (stream_out_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_user_V_1_ack_out = ap_const_logic_1) and (stream_out_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_user_V_1_sel_rd <= not(stream_out_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_user_V_1_ack_in = ap_const_logic_1) and (stream_out_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_user_V_1_sel_wr <= not(stream_out_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_user_V_1_state = ap_const_lv2_2) and (stream_out_V_user_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_user_V_1_state = ap_const_lv2_3) and (stream_out_V_user_V_1_vld_in = ap_const_logic_0) and (stream_out_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_user_V_1_state = ap_const_lv2_1) and (stream_out_V_user_V_1_ack_out = ap_const_logic_0)) or ((stream_out_V_user_V_1_state = ap_const_lv2_3) and (stream_out_V_user_V_1_ack_out = ap_const_logic_0) and (stream_out_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_user_V_1_vld_in = ap_const_logic_0) and (stream_out_V_user_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_user_V_1_ack_out = ap_const_logic_0) and (stream_out_V_user_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_user_V_1_state = ap_const_lv2_3)) or ((stream_out_V_user_V_1_state = ap_const_lv2_1) and (stream_out_V_user_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_user_V_1_state = ap_const_lv2_2) and (stream_out_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_debug_load3_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_29_reg_721 = ap_const_lv1_1) and (tmp_10_reg_707 = ap_const_lv1_1) and (or_cond_fu_574_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                                ap_phi_reg_pp0_iter1_debug_load3_reg_272(17 downto 0) <= tmp_17_fu_557_p2(17 downto 0);                ap_phi_reg_pp0_iter1_debug_load3_reg_272(31 downto 19) <= tmp_17_fu_557_p2(31 downto 19);
            elsif (((tmp_29_reg_721 = ap_const_lv1_1) and (tmp_10_reg_707 = ap_const_lv1_1) and (tmp_last_V_fu_585_p2 = ap_const_lv1_1) and (or_cond_fu_574_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                                ap_phi_reg_pp0_iter1_debug_load3_reg_272(17 downto 0) <= tmp_21_fu_590_p2(17 downto 0);                ap_phi_reg_pp0_iter1_debug_load3_reg_272(31 downto 19) <= tmp_21_fu_590_p2(31 downto 19);
            elsif (((tmp_29_reg_721 = ap_const_lv1_1) and (tmp_10_reg_707 = ap_const_lv1_1) and (or_cond_fu_574_p2 = ap_const_lv1_1) and (tmp_last_V_fu_585_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                                ap_phi_reg_pp0_iter1_debug_load3_reg_272(17 downto 0) <= tmp_20_fu_579_p2(17 downto 0);                ap_phi_reg_pp0_iter1_debug_load3_reg_272(31 downto 19) <= tmp_20_fu_579_p2(31 downto 19);
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001))) then 
                                ap_phi_reg_pp0_iter1_debug_load3_reg_272(17 downto 0) <= ap_phi_reg_pp0_iter0_debug_load3_reg_272(17 downto 0);                ap_phi_reg_pp0_iter1_debug_load3_reg_272(31 downto 19) <= ap_phi_reg_pp0_iter0_debug_load3_reg_272(31 downto 19);
            end if; 
        end if;
    end process;

    debug_load6_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_data_V_0_vld_out = ap_const_logic_1)) then
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    debug_load6_reg_201 <= tmp_9_fu_359_p2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    debug_load6_reg_201 <= tmp_s_fu_352_p2;
                end if;
            end if; 
        end if;
    end process;

    debug_load_1_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                debug_load_1_reg_180 <= debug_load_2_reg_233;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                debug_load_1_reg_180 <= tmp_3_cast_fu_320_p1;
            end if; 
        end if;
    end process;

    debug_load_2_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_tmp_10_reg_707 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                debug_load_2_reg_233 <= debug_load3_reg_272;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                debug_load_2_reg_233 <= debug_load6_reg_201;
            end if; 
        end if;
    end process;

    sum_load_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_reg_707 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sum_load_reg_221 <= ap_phi_mux_sum_load8_phi_fu_260_p8;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                sum_load_reg_221 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_6_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                tmp_6_reg_190 <= tmp_15_fu_621_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                tmp_6_reg_190 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    tmp_data_V_3_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_reg_707 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_data_V_3_reg_245 <= tmp_22_reg_711;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                tmp_data_V_3_reg_245 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_reg_707 = ap_const_lv1_1) and (tmp_29_reg_721 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                    ap_phi_reg_pp0_iter0_debug_load3_reg_272(17 downto 0) <= tmp_12_fu_522_p2(17 downto 0);    ap_phi_reg_pp0_iter0_debug_load3_reg_272(31 downto 19) <= tmp_12_fu_522_p2(31 downto 19);
                ap_phi_reg_pp0_iter0_sum_load8_reg_256 <= sum_load_reg_221;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001))) then
                ap_phi_reg_pp0_iter1_sum_load8_reg_256 <= ap_phi_reg_pp0_iter0_sum_load8_reg_256;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_reg_pp0_iter1_tmp_10_reg_707 <= tmp_10_reg_707;
                    ap_reg_pp0_iter1_tmp_data_V_4_reg_701(30 downto 0) <= tmp_data_V_4_reg_701(30 downto 0);
                tmp_10_reg_707 <= tmp_10_fu_434_p2;
                    tmp_data_V_4_reg_701(30 downto 0) <= tmp_data_V_4_fu_430_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((stream_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                channel_dest_V <= stream_in_V_dest_V_0_data_out;
                channel_id_V <= stream_in_V_id_V_0_data_out;
                channel_keep_V <= stream_in_V_keep_V_0_data_out;
                channel_strb_V <= stream_in_V_strb_V_0_data_out;
                channel_user_V <= stream_in_V_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                    debug_load3_reg_272(17 downto 0) <= ap_phi_reg_pp0_iter1_debug_load3_reg_272(17 downto 0);    debug_load3_reg_272(31 downto 19) <= ap_phi_reg_pp0_iter1_debug_load3_reg_272(31 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_out_V_dest_V_1_ack_in = ap_const_logic_0) or (stream_out_V_id_V_1_ack_in = ap_const_logic_0) or (stream_out_V_last_V_1_ack_in = ap_const_logic_0) or (stream_out_V_user_V_1_ack_in = ap_const_logic_0) or (stream_out_V_strb_V_1_ack_in = ap_const_logic_0) or (stream_out_V_keep_V_1_ack_in = ap_const_logic_0) or (stream_out_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                ip_index <= tmp_6_reg_190;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                layerSize_read_reg_633 <= layerSize;
                tmp_18_reg_644 <= tmp_18_fu_310_p1;
                tmp_reg_639 <= tmp_fu_306_p1;
                vectorSize_read_reg_627 <= vectorSize;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_fu_434_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                notlhs2_reg_716 <= notlhs2_fu_455_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_29_reg_721 = ap_const_lv1_1) and (tmp_10_reg_707 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001))) then
                notlhs6_reg_750 <= notlhs6_fu_545_p2;
                notrhs7_reg_755 <= notrhs7_fu_551_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                notrhs3_reg_696 <= notrhs3_fu_424_p2;
                tmp_2_reg_690 <= tmp_2_fu_416_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_29_reg_721 = ap_const_lv1_1) and (tmp_10_reg_707 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                or_cond_reg_765 <= or_cond_fu_574_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((stream_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((stream_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then
                storemerge_reg_211 <= stream_in_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_data_V_0_load_A = ap_const_logic_1)) then
                stream_in_V_data_V_0_payload_A <= stream_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_data_V_0_load_B = ap_const_logic_1)) then
                stream_in_V_data_V_0_payload_B <= stream_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_dest_V_0_load_A = ap_const_logic_1)) then
                stream_in_V_dest_V_0_payload_A <= stream_in_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_dest_V_0_load_B = ap_const_logic_1)) then
                stream_in_V_dest_V_0_payload_B <= stream_in_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_id_V_0_load_A = ap_const_logic_1)) then
                stream_in_V_id_V_0_payload_A <= stream_in_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_id_V_0_load_B = ap_const_logic_1)) then
                stream_in_V_id_V_0_payload_B <= stream_in_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_keep_V_0_load_A = ap_const_logic_1)) then
                stream_in_V_keep_V_0_payload_A <= stream_in_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_keep_V_0_load_B = ap_const_logic_1)) then
                stream_in_V_keep_V_0_payload_B <= stream_in_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_strb_V_0_load_A = ap_const_logic_1)) then
                stream_in_V_strb_V_0_payload_A <= stream_in_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_strb_V_0_load_B = ap_const_logic_1)) then
                stream_in_V_strb_V_0_payload_B <= stream_in_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_user_V_0_load_A = ap_const_logic_1)) then
                stream_in_V_user_V_0_payload_A <= stream_in_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_V_user_V_0_load_B = ap_const_logic_1)) then
                stream_in_V_user_V_0_payload_B <= stream_in_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_data_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_data_V_1_payload_A <= ap_reg_pp0_iter1_tmp_data_V_4_reg_701;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_data_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_data_V_1_payload_B <= ap_reg_pp0_iter1_tmp_data_V_4_reg_701;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_dest_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_dest_V_1_payload_A <= channel_dest_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_dest_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_dest_V_1_payload_B <= channel_dest_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_id_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_id_V_1_payload_A <= channel_id_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_id_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_id_V_1_payload_B <= channel_id_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_keep_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_keep_V_1_payload_A <= channel_keep_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_keep_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_keep_V_1_payload_B <= channel_keep_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_last_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_last_V_1_payload_A <= tmp_last_V_reg_775;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_last_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_last_V_1_payload_B <= tmp_last_V_reg_775;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_strb_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_strb_V_1_payload_A <= channel_strb_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_strb_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_strb_V_1_payload_B <= channel_strb_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_user_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_user_V_1_payload_A <= channel_user_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_user_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_user_V_1_payload_B <= channel_user_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_reg_707 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                    tmp_12_reg_735(17 downto 0) <= tmp_12_fu_522_p2(17 downto 0);    tmp_12_reg_735(31 downto 19) <= tmp_12_fu_522_p2(31 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_29_reg_721 = ap_const_lv1_1) and (tmp_10_reg_707 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001))) then
                tmp_16_reg_741 <= grp_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_reg_707 = ap_const_lv1_1) and (tmp_29_fu_507_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                tmp_19_reg_730 <= tmp_19_fu_518_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_29_reg_721 = ap_const_lv1_1) and (tmp_10_reg_707 = ap_const_lv1_1) and (or_cond_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    tmp_20_reg_769(17 downto 0) <= tmp_20_fu_579_p2(17 downto 0);    tmp_20_reg_769(31 downto 21) <= tmp_20_fu_579_p2(31 downto 21);
                tmp_last_V_reg_775 <= tmp_last_V_fu_585_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_29_reg_721 = ap_const_lv1_1) and (tmp_10_reg_707 = ap_const_lv1_1) and (tmp_last_V_fu_585_p2 = ap_const_lv1_1) and (or_cond_fu_574_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    tmp_21_reg_780(17 downto 0) <= tmp_21_fu_590_p2(17 downto 0);    tmp_21_reg_780(31 downto 22) <= tmp_21_fu_590_p2(31 downto 22);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_22_reg_711 <= tmp_22_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_reg_707 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                tmp_29_reg_721 <= tmp_29_fu_507_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_4_reg_654 <= tmp_4_fu_325_p2;
                tmp_5_reg_659 <= tmp_5_fu_330_p2;
            end if;
        end if;
    end process;
    debug_load3_reg_272(18) <= '1';
    tmp_data_V_4_reg_701(31) <= '0';
    ap_reg_pp0_iter1_tmp_data_V_4_reg_701(31) <= '0';
    tmp_12_reg_735(18) <= '1';
    tmp_20_reg_769(20 downto 18) <= "111";
    tmp_21_reg_780(21 downto 18) <= "1111";
    ap_phi_reg_pp0_iter0_debug_load3_reg_272(18) <= '1';
    ap_phi_reg_pp0_iter1_debug_load3_reg_272(18) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, stream_in_V_data_V_0_vld_out, stream_out_V_data_V_1_ack_in, stream_out_V_keep_V_1_ack_in, stream_out_V_strb_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in, stream_out_V_id_V_1_ack_in, stream_out_V_dest_V_1_ack_in, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, tmp_10_fu_434_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage2_subdone, ap_CS_fsm_state3, tmp_7_fu_341_p2, tmp_8_fu_346_p2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not(((stream_out_V_dest_V_1_ack_in = ap_const_logic_0) or (stream_out_V_id_V_1_ack_in = ap_const_logic_0) or (stream_out_V_last_V_1_ack_in = ap_const_logic_0) or (stream_out_V_user_V_1_ack_in = ap_const_logic_0) or (stream_out_V_strb_V_1_ack_in = ap_const_logic_0) or (stream_out_V_keep_V_1_ack_in = ap_const_logic_0) or (stream_out_V_data_V_1_ack_in = ap_const_logic_0))) and (tmp_7_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((stream_out_V_dest_V_1_ack_in = ap_const_logic_0) or (stream_out_V_id_V_1_ack_in = ap_const_logic_0) or (stream_out_V_last_V_1_ack_in = ap_const_logic_0) or (stream_out_V_user_V_1_ack_in = ap_const_logic_0) or (stream_out_V_strb_V_1_ack_in = ap_const_logic_0) or (stream_out_V_keep_V_1_ack_in = ap_const_logic_0) or (stream_out_V_data_V_1_ack_in = ap_const_logic_0))) and (tmp_8_fu_346_p2 = ap_const_lv1_1) and (tmp_7_fu_341_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif ((not(((stream_out_V_dest_V_1_ack_in = ap_const_logic_0) or (stream_out_V_id_V_1_ack_in = ap_const_logic_0) or (stream_out_V_last_V_1_ack_in = ap_const_logic_0) or (stream_out_V_user_V_1_ack_in = ap_const_logic_0) or (stream_out_V_strb_V_1_ack_in = ap_const_logic_0) or (stream_out_V_keep_V_1_ack_in = ap_const_logic_0) or (stream_out_V_data_V_1_ack_in = ap_const_logic_0))) and (tmp_7_fu_341_p2 = ap_const_lv1_1) and (tmp_8_fu_346_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((stream_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((stream_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (tmp_10_fu_434_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (tmp_10_fu_434_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(15);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state23_io)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_const_boolean_1 = ap_block_state23_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state23_io)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_const_boolean_1 = ap_block_state23_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state24_io)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_const_boolean_1 = ap_block_state24_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state24_io)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_const_boolean_1 = ap_block_state24_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(stream_in_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, tmp_10_reg_707)
    begin
                ap_block_pp0_stage3_11001 <= ((tmp_10_reg_707 = ap_const_lv1_1) and (stream_in_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(stream_in_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0, tmp_10_reg_707)
    begin
                ap_block_pp0_stage3_subdone <= ((tmp_10_reg_707 = ap_const_lv1_1) and (stream_in_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state10_pp0_stage3_iter0_assign_proc : process(stream_in_V_data_V_0_vld_out, tmp_10_reg_707)
    begin
                ap_block_state10_pp0_stage3_iter0 <= ((tmp_10_reg_707 = ap_const_lv1_1) and (stream_in_V_data_V_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state11_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_io_assign_proc : process(stream_out_V_data_V_1_ack_in, ap_predicate_op166_write_state23)
    begin
                ap_block_state23_io <= ((ap_predicate_op166_write_state23 = ap_const_boolean_1) and (stream_out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state23_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_io_assign_proc : process(stream_out_V_data_V_1_ack_in, ap_predicate_op170_write_state24)
    begin
                ap_block_state24_io <= ((ap_predicate_op170_write_state24 = ap_const_boolean_1) and (stream_out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state24_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_assign_proc : process(stream_out_V_data_V_1_ack_in, stream_out_V_keep_V_1_ack_in, stream_out_V_strb_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in, stream_out_V_id_V_1_ack_in, stream_out_V_dest_V_1_ack_in)
    begin
                ap_block_state3 <= ((stream_out_V_dest_V_1_ack_in = ap_const_logic_0) or (stream_out_V_id_V_1_ack_in = ap_const_logic_0) or (stream_out_V_last_V_1_ack_in = ap_const_logic_0) or (stream_out_V_user_V_1_ack_in = ap_const_logic_0) or (stream_out_V_strb_V_1_ack_in = ap_const_logic_0) or (stream_out_V_keep_V_1_ack_in = ap_const_logic_0) or (stream_out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1789_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_10_fu_434_p2, ap_block_pp0_stage0_00001)
    begin
                ap_condition_1789 <= ((tmp_10_fu_434_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001));
    end process;


    ap_condition_1793_assign_proc : process(ap_CS_fsm_pp0_stage12, ap_predicate_op136_fadd_state19, ap_block_pp0_stage12_00001)
    begin
                ap_condition_1793 <= ((ap_predicate_op136_fadd_state19 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_00001));
    end process;


    ap_condition_pp0_exit_iter0_state7_assign_proc : process(tmp_10_fu_434_p2)
    begin
        if ((tmp_10_fu_434_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(stream_out_V_data_V_1_ack_in, stream_out_V_keep_V_1_ack_in, stream_out_V_strb_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in, stream_out_V_id_V_1_ack_in, stream_out_V_dest_V_1_ack_in, ap_CS_fsm_state3, tmp_7_fu_341_p2)
    begin
        if ((not(((stream_out_V_dest_V_1_ack_in = ap_const_logic_0) or (stream_out_V_id_V_1_ack_in = ap_const_logic_0) or (stream_out_V_last_V_1_ack_in = ap_const_logic_0) or (stream_out_V_user_V_1_ack_in = ap_const_logic_0) or (stream_out_V_strb_V_1_ack_in = ap_const_logic_0) or (stream_out_V_keep_V_1_ack_in = ap_const_logic_0) or (stream_out_V_data_V_1_ack_in = ap_const_logic_0))) and (tmp_7_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_sum_load8_phi_fu_260_p8_assign_proc : process(tmp_10_reg_707, ap_enable_reg_pp0_iter1, tmp_29_reg_721, ap_CS_fsm_pp0_stage0, tmp_16_reg_741, or_cond_fu_574_p2, tmp_last_V_fu_585_p2, ap_block_pp0_stage0, ap_phi_reg_pp0_iter1_sum_load8_reg_256)
    begin
        if ((((tmp_29_reg_721 = ap_const_lv1_1) and (tmp_10_reg_707 = ap_const_lv1_1) and (or_cond_fu_574_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((tmp_29_reg_721 = ap_const_lv1_1) and (tmp_10_reg_707 = ap_const_lv1_1) and (or_cond_fu_574_p2 = ap_const_lv1_1) and (tmp_last_V_fu_585_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((tmp_29_reg_721 = ap_const_lv1_1) and (tmp_10_reg_707 = ap_const_lv1_1) and (tmp_last_V_fu_585_p2 = ap_const_lv1_1) and (or_cond_fu_574_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            ap_phi_mux_sum_load8_phi_fu_260_p8 <= tmp_16_reg_741;
        else 
            ap_phi_mux_sum_load8_phi_fu_260_p8 <= ap_phi_reg_pp0_iter1_sum_load8_reg_256;
        end if; 
    end process;


    ap_phi_mux_sum_load_phi_fu_225_p4_assign_proc : process(tmp_10_reg_707, ap_enable_reg_pp0_iter1, sum_load_reg_221, ap_CS_fsm_pp0_stage0, ap_phi_mux_sum_load8_phi_fu_260_p8, ap_block_pp0_stage0)
    begin
        if (((tmp_10_reg_707 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_sum_load_phi_fu_225_p4 <= ap_phi_mux_sum_load8_phi_fu_260_p8;
        else 
            ap_phi_mux_sum_load_phi_fu_225_p4 <= sum_load_reg_221;
        end if; 
    end process;


    ap_phi_mux_tmp_data_V_3_phi_fu_249_p4_assign_proc : process(tmp_10_reg_707, ap_enable_reg_pp0_iter1, tmp_data_V_3_reg_245, ap_CS_fsm_pp0_stage0, tmp_22_reg_711, ap_block_pp0_stage0)
    begin
        if (((tmp_10_reg_707 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_tmp_data_V_3_phi_fu_249_p4 <= tmp_22_reg_711;
        else 
            ap_phi_mux_tmp_data_V_3_phi_fu_249_p4 <= tmp_data_V_3_reg_245;
        end if; 
    end process;


    ap_predicate_op124_fadd_state10_assign_proc : process(tmp_10_reg_707, tmp_29_fu_507_p2)
    begin
                ap_predicate_op124_fadd_state10 <= ((tmp_10_reg_707 = ap_const_lv1_1) and (tmp_29_fu_507_p2 = ap_const_lv1_1));
    end process;


    ap_predicate_op136_fadd_state19_assign_proc : process(tmp_10_reg_707, tmp_29_reg_721)
    begin
                ap_predicate_op136_fadd_state19 <= ((tmp_29_reg_721 = ap_const_lv1_1) and (tmp_10_reg_707 = ap_const_lv1_1));
    end process;


    ap_predicate_op145_fcmp_state21_assign_proc : process(tmp_10_reg_707, tmp_29_reg_721)
    begin
                ap_predicate_op145_fcmp_state21 <= ((tmp_29_reg_721 = ap_const_lv1_1) and (tmp_10_reg_707 = ap_const_lv1_1));
    end process;


    ap_predicate_op166_write_state23_assign_proc : process(ap_reg_pp0_iter1_tmp_10_reg_707, tmp_29_reg_721, or_cond_reg_765)
    begin
                ap_predicate_op166_write_state23 <= ((or_cond_reg_765 = ap_const_lv1_1) and (tmp_29_reg_721 = ap_const_lv1_1) and (ap_reg_pp0_iter1_tmp_10_reg_707 = ap_const_lv1_1));
    end process;


    ap_predicate_op170_write_state24_assign_proc : process(ap_reg_pp0_iter1_tmp_10_reg_707, tmp_29_reg_721, or_cond_reg_765)
    begin
                ap_predicate_op170_write_state24 <= ((or_cond_reg_765 = ap_const_lv1_1) and (tmp_29_reg_721 = ap_const_lv1_1) and (ap_reg_pp0_iter1_tmp_10_reg_707 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(stream_out_V_data_V_1_ack_in, stream_out_V_keep_V_1_ack_in, stream_out_V_strb_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in, stream_out_V_id_V_1_ack_in, stream_out_V_dest_V_1_ack_in, ap_CS_fsm_state3, tmp_7_fu_341_p2)
    begin
        if ((not(((stream_out_V_dest_V_1_ack_in = ap_const_logic_0) or (stream_out_V_id_V_1_ack_in = ap_const_logic_0) or (stream_out_V_last_V_1_ack_in = ap_const_logic_0) or (stream_out_V_user_V_1_ack_in = ap_const_logic_0) or (stream_out_V_strb_V_1_ack_in = ap_const_logic_0) or (stream_out_V_keep_V_1_ack_in = ap_const_logic_0) or (stream_out_V_data_V_1_ack_in = ap_const_logic_0))) and (tmp_7_fu_341_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    debug_assign_proc : process(stream_in_V_data_V_0_vld_out, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_enable_reg_pp0_iter0, tmp_10_reg_707, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_tmp_10_reg_707, tmp_29_reg_721, or_cond_reg_765, ap_CS_fsm_pp0_stage2, tmp_3_cast_fu_320_p1, ap_CS_fsm_state2, tmp_s_fu_352_p2, tmp_9_fu_359_p2, ap_CS_fsm_pp0_stage0, tmp_12_reg_735, ap_CS_fsm_pp0_stage14, tmp_17_fu_557_p2, tmp_20_reg_769, tmp_last_V_reg_775, tmp_21_reg_780, ap_predicate_op166_write_state23, ap_block_pp0_stage14_01001, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001, ap_block_pp0_stage2_01001)
    begin
        if (((or_cond_reg_765 = ap_const_lv1_1) and (tmp_29_reg_721 = ap_const_lv1_1) and (ap_reg_pp0_iter1_tmp_10_reg_707 = ap_const_lv1_1) and (tmp_last_V_reg_775 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_01001))) then 
            debug <= tmp_21_reg_780;
        elsif (((ap_predicate_op166_write_state23 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001))) then 
            debug <= tmp_20_reg_769;
        elsif (((tmp_29_reg_721 = ap_const_lv1_1) and (tmp_10_reg_707 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            debug <= tmp_17_fu_557_p2;
        elsif (((tmp_10_reg_707 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_01001))) then 
            debug <= tmp_12_reg_735;
        elsif (((stream_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            debug <= tmp_9_fu_359_p2;
        elsif (((stream_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            debug <= tmp_s_fu_352_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            debug <= tmp_3_cast_fu_320_p1;
        else 
            debug <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    debug_ap_vld_assign_proc : process(stream_in_V_data_V_0_vld_out, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_enable_reg_pp0_iter0, tmp_10_reg_707, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_reg_pp0_iter1_tmp_10_reg_707, tmp_29_reg_721, or_cond_reg_765, ap_CS_fsm_pp0_stage2, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage14, tmp_last_V_reg_775, ap_predicate_op166_write_state23, ap_block_pp0_stage14_01001, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001, ap_block_pp0_stage2_01001, ap_reg_ioackin_debug_dummy_ack)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((or_cond_reg_765 = ap_const_lv1_1) and (tmp_29_reg_721 = ap_const_lv1_1) and (ap_reg_pp0_iter1_tmp_10_reg_707 = ap_const_lv1_1) and (tmp_last_V_reg_775 = ap_const_lv1_1) and (ap_reg_ioackin_debug_dummy_ack = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_01001)) or ((ap_predicate_op166_write_state23 = ap_const_boolean_1) and (ap_reg_ioackin_debug_dummy_ack = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_01001)) or ((tmp_29_reg_721 = ap_const_lv1_1) and (tmp_10_reg_707 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001)) or ((tmp_10_reg_707 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_01001)) or ((stream_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((stream_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            debug_ap_vld <= ap_const_logic_1;
        else 
            debug_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_287_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage11)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
            grp_fu_287_ce <= ap_const_logic_1;
        else 
            grp_fu_287_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_287_p1 <= stream_in_V_data_V_0_data_out;

    grp_fu_292_ce_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage13_11001, ap_CS_fsm_pp0_stage13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_292_ce <= ap_const_logic_1;
        else 
            grp_fu_292_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_292_opcode_assign_proc : process(ap_enable_reg_pp0_iter0, ap_condition_1789, ap_condition_1793)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_1793)) then 
                grp_fu_292_opcode <= ap_const_lv5_5;
            elsif ((ap_const_boolean_1 = ap_condition_1789)) then 
                grp_fu_292_opcode <= ap_const_lv5_4;
            else 
                grp_fu_292_opcode <= "XXXXX";
            end if;
        else 
            grp_fu_292_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_292_p0_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_2_reg_690, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage12, ap_phi_mux_sum_load_phi_fu_225_p4, ap_block_pp0_stage0, ap_block_pp0_stage12)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12))) then 
                grp_fu_292_p0 <= tmp_2_reg_690;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                grp_fu_292_p0 <= ap_phi_mux_sum_load_phi_fu_225_p4;
            else 
                grp_fu_292_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_292_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_292_p1_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_2_reg_690, ap_CS_fsm_pp0_stage0, grp_fu_287_p2, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage0, ap_block_pp0_stage12)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_const_boolean_0 = ap_block_pp0_stage12))) then 
                grp_fu_292_p1 <= grp_fu_287_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                grp_fu_292_p1 <= tmp_2_reg_690;
            else 
                grp_fu_292_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_292_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    notlhs2_fu_455_p2 <= "0" when (tmp_23_fu_445_p4 = ap_const_lv8_FF) else "1";
    notlhs6_fu_545_p2 <= "0" when (tmp_30_fu_531_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_479_p2 <= "0" when (tmp_13_fu_465_p4 = ap_const_lv8_FF) else "1";
    notrhs3_fu_424_p2 <= "1" when (tmp_24_fu_420_p1 = ap_const_lv23_0) else "0";
    notrhs7_fu_551_p2 <= "1" when (tmp_35_fu_541_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_485_p2 <= "1" when (tmp_31_fu_475_p1 = ap_const_lv23_0) else "0";
    or_cond_fu_574_p2 <= (tmp_34_fu_568_p2 or tmp_19_reg_730);

    stream_in_TDATA_blk_n_assign_proc : process(stream_in_V_data_V_0_state, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, ap_block_pp0_stage3, tmp_10_reg_707)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (tmp_10_reg_707 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            stream_in_TDATA_blk_n <= stream_in_V_data_V_0_state(0);
        else 
            stream_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_in_TREADY <= stream_in_V_dest_V_0_state(1);
    stream_in_V_data_V_0_ack_in <= stream_in_V_data_V_0_state(1);

    stream_in_V_data_V_0_ack_out_assign_proc : process(stream_in_V_data_V_0_vld_out, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, tmp_10_reg_707, ap_block_pp0_stage3_11001)
    begin
        if ((((tmp_10_reg_707 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((stream_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((stream_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            stream_in_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_data_V_0_data_out_assign_proc : process(stream_in_V_data_V_0_payload_A, stream_in_V_data_V_0_payload_B, stream_in_V_data_V_0_sel)
    begin
        if ((stream_in_V_data_V_0_sel = ap_const_logic_1)) then 
            stream_in_V_data_V_0_data_out <= stream_in_V_data_V_0_payload_B;
        else 
            stream_in_V_data_V_0_data_out <= stream_in_V_data_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_data_V_0_load_A <= (stream_in_V_data_V_0_state_cmp_full and not(stream_in_V_data_V_0_sel_wr));
    stream_in_V_data_V_0_load_B <= (stream_in_V_data_V_0_state_cmp_full and stream_in_V_data_V_0_sel_wr);
    stream_in_V_data_V_0_sel <= stream_in_V_data_V_0_sel_rd;
    stream_in_V_data_V_0_state_cmp_full <= '0' when (stream_in_V_data_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_data_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_data_V_0_vld_out <= stream_in_V_data_V_0_state(0);
    stream_in_V_dest_V_0_ack_in <= stream_in_V_dest_V_0_state(1);

    stream_in_V_dest_V_0_ack_out_assign_proc : process(stream_in_V_data_V_0_vld_out, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, tmp_10_reg_707, ap_block_pp0_stage3_11001)
    begin
        if ((((tmp_10_reg_707 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((stream_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((stream_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            stream_in_V_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_dest_V_0_data_out_assign_proc : process(stream_in_V_dest_V_0_payload_A, stream_in_V_dest_V_0_payload_B, stream_in_V_dest_V_0_sel)
    begin
        if ((stream_in_V_dest_V_0_sel = ap_const_logic_1)) then 
            stream_in_V_dest_V_0_data_out <= stream_in_V_dest_V_0_payload_B;
        else 
            stream_in_V_dest_V_0_data_out <= stream_in_V_dest_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_dest_V_0_load_A <= (stream_in_V_dest_V_0_state_cmp_full and not(stream_in_V_dest_V_0_sel_wr));
    stream_in_V_dest_V_0_load_B <= (stream_in_V_dest_V_0_state_cmp_full and stream_in_V_dest_V_0_sel_wr);
    stream_in_V_dest_V_0_sel <= stream_in_V_dest_V_0_sel_rd;
    stream_in_V_dest_V_0_state_cmp_full <= '0' when (stream_in_V_dest_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_dest_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_dest_V_0_vld_out <= stream_in_V_dest_V_0_state(0);
    stream_in_V_id_V_0_ack_in <= stream_in_V_id_V_0_state(1);

    stream_in_V_id_V_0_ack_out_assign_proc : process(stream_in_V_data_V_0_vld_out, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, tmp_10_reg_707, ap_block_pp0_stage3_11001)
    begin
        if ((((tmp_10_reg_707 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((stream_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((stream_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            stream_in_V_id_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_id_V_0_data_out_assign_proc : process(stream_in_V_id_V_0_payload_A, stream_in_V_id_V_0_payload_B, stream_in_V_id_V_0_sel)
    begin
        if ((stream_in_V_id_V_0_sel = ap_const_logic_1)) then 
            stream_in_V_id_V_0_data_out <= stream_in_V_id_V_0_payload_B;
        else 
            stream_in_V_id_V_0_data_out <= stream_in_V_id_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_id_V_0_load_A <= (stream_in_V_id_V_0_state_cmp_full and not(stream_in_V_id_V_0_sel_wr));
    stream_in_V_id_V_0_load_B <= (stream_in_V_id_V_0_state_cmp_full and stream_in_V_id_V_0_sel_wr);
    stream_in_V_id_V_0_sel <= stream_in_V_id_V_0_sel_rd;
    stream_in_V_id_V_0_state_cmp_full <= '0' when (stream_in_V_id_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_id_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_id_V_0_vld_out <= stream_in_V_id_V_0_state(0);
    stream_in_V_keep_V_0_ack_in <= stream_in_V_keep_V_0_state(1);

    stream_in_V_keep_V_0_ack_out_assign_proc : process(stream_in_V_data_V_0_vld_out, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, tmp_10_reg_707, ap_block_pp0_stage3_11001)
    begin
        if ((((tmp_10_reg_707 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((stream_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((stream_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            stream_in_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_keep_V_0_data_out_assign_proc : process(stream_in_V_keep_V_0_payload_A, stream_in_V_keep_V_0_payload_B, stream_in_V_keep_V_0_sel)
    begin
        if ((stream_in_V_keep_V_0_sel = ap_const_logic_1)) then 
            stream_in_V_keep_V_0_data_out <= stream_in_V_keep_V_0_payload_B;
        else 
            stream_in_V_keep_V_0_data_out <= stream_in_V_keep_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_keep_V_0_load_A <= (stream_in_V_keep_V_0_state_cmp_full and not(stream_in_V_keep_V_0_sel_wr));
    stream_in_V_keep_V_0_load_B <= (stream_in_V_keep_V_0_state_cmp_full and stream_in_V_keep_V_0_sel_wr);
    stream_in_V_keep_V_0_sel <= stream_in_V_keep_V_0_sel_rd;
    stream_in_V_keep_V_0_state_cmp_full <= '0' when (stream_in_V_keep_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_keep_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_keep_V_0_vld_out <= stream_in_V_keep_V_0_state(0);
    stream_in_V_strb_V_0_ack_in <= stream_in_V_strb_V_0_state(1);

    stream_in_V_strb_V_0_ack_out_assign_proc : process(stream_in_V_data_V_0_vld_out, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, tmp_10_reg_707, ap_block_pp0_stage3_11001)
    begin
        if ((((tmp_10_reg_707 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((stream_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((stream_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            stream_in_V_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_strb_V_0_data_out_assign_proc : process(stream_in_V_strb_V_0_payload_A, stream_in_V_strb_V_0_payload_B, stream_in_V_strb_V_0_sel)
    begin
        if ((stream_in_V_strb_V_0_sel = ap_const_logic_1)) then 
            stream_in_V_strb_V_0_data_out <= stream_in_V_strb_V_0_payload_B;
        else 
            stream_in_V_strb_V_0_data_out <= stream_in_V_strb_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_strb_V_0_load_A <= (stream_in_V_strb_V_0_state_cmp_full and not(stream_in_V_strb_V_0_sel_wr));
    stream_in_V_strb_V_0_load_B <= (stream_in_V_strb_V_0_state_cmp_full and stream_in_V_strb_V_0_sel_wr);
    stream_in_V_strb_V_0_sel <= stream_in_V_strb_V_0_sel_rd;
    stream_in_V_strb_V_0_state_cmp_full <= '0' when (stream_in_V_strb_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_strb_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_strb_V_0_vld_out <= stream_in_V_strb_V_0_state(0);
    stream_in_V_user_V_0_ack_in <= stream_in_V_user_V_0_state(1);

    stream_in_V_user_V_0_ack_out_assign_proc : process(stream_in_V_data_V_0_vld_out, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, tmp_10_reg_707, ap_block_pp0_stage3_11001)
    begin
        if ((((tmp_10_reg_707 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((stream_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((stream_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            stream_in_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            stream_in_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_V_user_V_0_data_out_assign_proc : process(stream_in_V_user_V_0_payload_A, stream_in_V_user_V_0_payload_B, stream_in_V_user_V_0_sel)
    begin
        if ((stream_in_V_user_V_0_sel = ap_const_logic_1)) then 
            stream_in_V_user_V_0_data_out <= stream_in_V_user_V_0_payload_B;
        else 
            stream_in_V_user_V_0_data_out <= stream_in_V_user_V_0_payload_A;
        end if; 
    end process;

    stream_in_V_user_V_0_load_A <= (stream_in_V_user_V_0_state_cmp_full and not(stream_in_V_user_V_0_sel_wr));
    stream_in_V_user_V_0_load_B <= (stream_in_V_user_V_0_state_cmp_full and stream_in_V_user_V_0_sel_wr);
    stream_in_V_user_V_0_sel <= stream_in_V_user_V_0_sel_rd;
    stream_in_V_user_V_0_state_cmp_full <= '0' when (stream_in_V_user_V_0_state = ap_const_lv2_1) else '1';
    stream_in_V_user_V_0_vld_in <= stream_in_TVALID;
    stream_in_V_user_V_0_vld_out <= stream_in_V_user_V_0_state(0);
    stream_out_TDATA <= stream_out_V_data_V_1_data_out;

    stream_out_TDATA_blk_n_assign_proc : process(stream_out_V_data_V_1_state, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_reg_pp0_iter1_tmp_10_reg_707, tmp_29_reg_721, or_cond_reg_765, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (or_cond_reg_765 = ap_const_lv1_1) and (tmp_29_reg_721 = ap_const_lv1_1) and (ap_reg_pp0_iter1_tmp_10_reg_707 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (or_cond_reg_765 = ap_const_lv1_1) and (tmp_29_reg_721 = ap_const_lv1_1) and (ap_reg_pp0_iter1_tmp_10_reg_707 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            stream_out_TDATA_blk_n <= stream_out_V_data_V_1_state(1);
        else 
            stream_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_TDEST <= stream_out_V_dest_V_1_data_out;
    stream_out_TID <= stream_out_V_id_V_1_data_out;
    stream_out_TKEEP <= stream_out_V_keep_V_1_data_out;
    stream_out_TLAST <= stream_out_V_last_V_1_data_out;
    stream_out_TSTRB <= stream_out_V_strb_V_1_data_out;
    stream_out_TUSER <= stream_out_V_user_V_1_data_out;
    stream_out_TVALID <= stream_out_V_dest_V_1_state(0);
    stream_out_V_data_V_1_ack_in <= stream_out_V_data_V_1_state(1);
    stream_out_V_data_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_data_V_1_data_out_assign_proc : process(stream_out_V_data_V_1_payload_A, stream_out_V_data_V_1_payload_B, stream_out_V_data_V_1_sel)
    begin
        if ((stream_out_V_data_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_data_V_1_data_out <= stream_out_V_data_V_1_payload_B;
        else 
            stream_out_V_data_V_1_data_out <= stream_out_V_data_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_data_V_1_load_A <= (stream_out_V_data_V_1_state_cmp_full and not(stream_out_V_data_V_1_sel_wr));
    stream_out_V_data_V_1_load_B <= (stream_out_V_data_V_1_state_cmp_full and stream_out_V_data_V_1_sel_wr);
    stream_out_V_data_V_1_sel <= stream_out_V_data_V_1_sel_rd;
    stream_out_V_data_V_1_state_cmp_full <= '0' when (stream_out_V_data_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_predicate_op166_write_state23, ap_block_pp0_stage1_11001)
    begin
        if (((ap_predicate_op166_write_state23 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            stream_out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_data_V_1_vld_out <= stream_out_V_data_V_1_state(0);
    stream_out_V_dest_V_1_ack_in <= stream_out_V_dest_V_1_state(1);
    stream_out_V_dest_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_dest_V_1_data_out_assign_proc : process(stream_out_V_dest_V_1_payload_A, stream_out_V_dest_V_1_payload_B, stream_out_V_dest_V_1_sel)
    begin
        if ((stream_out_V_dest_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_dest_V_1_data_out <= stream_out_V_dest_V_1_payload_B;
        else 
            stream_out_V_dest_V_1_data_out <= stream_out_V_dest_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_dest_V_1_load_A <= (stream_out_V_dest_V_1_state_cmp_full and not(stream_out_V_dest_V_1_sel_wr));
    stream_out_V_dest_V_1_load_B <= (stream_out_V_dest_V_1_state_cmp_full and stream_out_V_dest_V_1_sel_wr);
    stream_out_V_dest_V_1_sel <= stream_out_V_dest_V_1_sel_rd;
    stream_out_V_dest_V_1_state_cmp_full <= '0' when (stream_out_V_dest_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_predicate_op166_write_state23, ap_block_pp0_stage1_11001)
    begin
        if (((ap_predicate_op166_write_state23 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            stream_out_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_dest_V_1_vld_out <= stream_out_V_dest_V_1_state(0);
    stream_out_V_id_V_1_ack_in <= stream_out_V_id_V_1_state(1);
    stream_out_V_id_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_id_V_1_data_out_assign_proc : process(stream_out_V_id_V_1_payload_A, stream_out_V_id_V_1_payload_B, stream_out_V_id_V_1_sel)
    begin
        if ((stream_out_V_id_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_id_V_1_data_out <= stream_out_V_id_V_1_payload_B;
        else 
            stream_out_V_id_V_1_data_out <= stream_out_V_id_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_id_V_1_load_A <= (stream_out_V_id_V_1_state_cmp_full and not(stream_out_V_id_V_1_sel_wr));
    stream_out_V_id_V_1_load_B <= (stream_out_V_id_V_1_state_cmp_full and stream_out_V_id_V_1_sel_wr);
    stream_out_V_id_V_1_sel <= stream_out_V_id_V_1_sel_rd;
    stream_out_V_id_V_1_state_cmp_full <= '0' when (stream_out_V_id_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_predicate_op166_write_state23, ap_block_pp0_stage1_11001)
    begin
        if (((ap_predicate_op166_write_state23 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            stream_out_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_id_V_1_vld_out <= stream_out_V_id_V_1_state(0);
    stream_out_V_keep_V_1_ack_in <= stream_out_V_keep_V_1_state(1);
    stream_out_V_keep_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_keep_V_1_data_out_assign_proc : process(stream_out_V_keep_V_1_payload_A, stream_out_V_keep_V_1_payload_B, stream_out_V_keep_V_1_sel)
    begin
        if ((stream_out_V_keep_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_keep_V_1_data_out <= stream_out_V_keep_V_1_payload_B;
        else 
            stream_out_V_keep_V_1_data_out <= stream_out_V_keep_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_keep_V_1_load_A <= (stream_out_V_keep_V_1_state_cmp_full and not(stream_out_V_keep_V_1_sel_wr));
    stream_out_V_keep_V_1_load_B <= (stream_out_V_keep_V_1_state_cmp_full and stream_out_V_keep_V_1_sel_wr);
    stream_out_V_keep_V_1_sel <= stream_out_V_keep_V_1_sel_rd;
    stream_out_V_keep_V_1_state_cmp_full <= '0' when (stream_out_V_keep_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_predicate_op166_write_state23, ap_block_pp0_stage1_11001)
    begin
        if (((ap_predicate_op166_write_state23 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            stream_out_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_keep_V_1_vld_out <= stream_out_V_keep_V_1_state(0);
    stream_out_V_last_V_1_ack_in <= stream_out_V_last_V_1_state(1);
    stream_out_V_last_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_last_V_1_data_out_assign_proc : process(stream_out_V_last_V_1_payload_A, stream_out_V_last_V_1_payload_B, stream_out_V_last_V_1_sel)
    begin
        if ((stream_out_V_last_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_last_V_1_data_out <= stream_out_V_last_V_1_payload_B;
        else 
            stream_out_V_last_V_1_data_out <= stream_out_V_last_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_last_V_1_load_A <= (stream_out_V_last_V_1_state_cmp_full and not(stream_out_V_last_V_1_sel_wr));
    stream_out_V_last_V_1_load_B <= (stream_out_V_last_V_1_state_cmp_full and stream_out_V_last_V_1_sel_wr);
    stream_out_V_last_V_1_sel <= stream_out_V_last_V_1_sel_rd;
    stream_out_V_last_V_1_state_cmp_full <= '0' when (stream_out_V_last_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_predicate_op166_write_state23, ap_block_pp0_stage1_11001)
    begin
        if (((ap_predicate_op166_write_state23 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            stream_out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_last_V_1_vld_out <= stream_out_V_last_V_1_state(0);
    stream_out_V_strb_V_1_ack_in <= stream_out_V_strb_V_1_state(1);
    stream_out_V_strb_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_strb_V_1_data_out_assign_proc : process(stream_out_V_strb_V_1_payload_A, stream_out_V_strb_V_1_payload_B, stream_out_V_strb_V_1_sel)
    begin
        if ((stream_out_V_strb_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_strb_V_1_data_out <= stream_out_V_strb_V_1_payload_B;
        else 
            stream_out_V_strb_V_1_data_out <= stream_out_V_strb_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_strb_V_1_load_A <= (stream_out_V_strb_V_1_state_cmp_full and not(stream_out_V_strb_V_1_sel_wr));
    stream_out_V_strb_V_1_load_B <= (stream_out_V_strb_V_1_state_cmp_full and stream_out_V_strb_V_1_sel_wr);
    stream_out_V_strb_V_1_sel <= stream_out_V_strb_V_1_sel_rd;
    stream_out_V_strb_V_1_state_cmp_full <= '0' when (stream_out_V_strb_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_predicate_op166_write_state23, ap_block_pp0_stage1_11001)
    begin
        if (((ap_predicate_op166_write_state23 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            stream_out_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_strb_V_1_vld_out <= stream_out_V_strb_V_1_state(0);
    stream_out_V_user_V_1_ack_in <= stream_out_V_user_V_1_state(1);
    stream_out_V_user_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_user_V_1_data_out_assign_proc : process(stream_out_V_user_V_1_payload_A, stream_out_V_user_V_1_payload_B, stream_out_V_user_V_1_sel)
    begin
        if ((stream_out_V_user_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_user_V_1_data_out <= stream_out_V_user_V_1_payload_B;
        else 
            stream_out_V_user_V_1_data_out <= stream_out_V_user_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_user_V_1_load_A <= (stream_out_V_user_V_1_state_cmp_full and not(stream_out_V_user_V_1_sel_wr));
    stream_out_V_user_V_1_load_B <= (stream_out_V_user_V_1_state_cmp_full and stream_out_V_user_V_1_sel_wr);
    stream_out_V_user_V_1_sel <= stream_out_V_user_V_1_sel_rd;
    stream_out_V_user_V_1_state_cmp_full <= '0' when (stream_out_V_user_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_predicate_op166_write_state23, ap_block_pp0_stage1_11001)
    begin
        if (((ap_predicate_op166_write_state23 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            stream_out_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_user_V_1_vld_out <= stream_out_V_user_V_1_state(0);
    sum_load_to_int_fu_461_p1 <= sum_load_reg_221;
    tmp_10_fu_434_p2 <= "1" when (signed(tmp_data_V_4_fu_430_p1) < signed(vectorSize_read_reg_627)) else "0";
    tmp_12_fu_522_p2 <= (debug_load_2_reg_233 or ap_const_lv32_40000);
    tmp_13_fu_465_p4 <= sum_load_to_int_fu_461_p1(30 downto 23);
    tmp_15_fu_621_p2 <= std_logic_vector(unsigned(ip_index) + unsigned(ap_const_lv32_1));
    tmp_16_to_int_fu_528_p1 <= tmp_16_reg_741;
    tmp_17_fu_557_p2 <= (debug_load_2_reg_233 or ap_const_lv32_C0000);
    tmp_18_fu_310_p1 <= vectorSize(8 - 1 downto 0);
    tmp_19_fu_518_p2 <= "1" when (tmp_data_V_4_reg_701 = tmp_4_reg_654) else "0";
    tmp_20_fu_579_p2 <= (debug_load_2_reg_233 or ap_const_lv32_1C0000);
    tmp_21_fu_590_p2 <= (debug_load_2_reg_233 or ap_const_lv32_3C0000);
    tmp_22_fu_439_p2 <= std_logic_vector(unsigned(ap_phi_mux_tmp_data_V_3_phi_fu_249_p4) + unsigned(ap_const_lv31_1));
    tmp_23_fu_445_p4 <= storemerge_reg_211(30 downto 23);
    tmp_24_fu_420_p1 <= storemerge_reg_211(23 - 1 downto 0);
    tmp_25_fu_491_p2 <= (notrhs_fu_485_p2 or notlhs_fu_479_p2);
    tmp_26_fu_497_p2 <= (notrhs3_reg_696 or notlhs2_reg_716);
    tmp_27_fu_501_p2 <= (tmp_26_fu_497_p2 and tmp_25_fu_491_p2);
    tmp_29_fu_507_p2 <= (tmp_27_fu_501_p2 and grp_fu_292_p2);
    tmp_2_fu_416_p1 <= storemerge_reg_211;
    tmp_30_fu_531_p4 <= tmp_16_to_int_fu_528_p1(30 downto 23);
    tmp_31_fu_475_p1 <= sum_load_to_int_fu_461_p1(23 - 1 downto 0);
    tmp_32_fu_564_p2 <= (notrhs7_reg_755 or notlhs6_reg_750);
    tmp_34_fu_568_p2 <= (tmp_32_fu_564_p2 and grp_fu_292_p2);
    tmp_35_fu_541_p1 <= tmp_16_to_int_fu_528_p1(23 - 1 downto 0);
    tmp_3_cast_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_314_p3),32));
    tmp_3_fu_314_p3 <= (tmp_18_reg_644 & tmp_reg_639);
    tmp_4_fu_325_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(vectorSize_read_reg_627));
    tmp_5_fu_330_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(layerSize_read_reg_633));
    tmp_7_fu_341_p2 <= "1" when (signed(tmp_6_reg_190) < signed(layerSize_read_reg_633)) else "0";
    tmp_8_fu_346_p2 <= "1" when (tmp_6_reg_190 = ap_const_lv32_0) else "0";
    tmp_9_fu_359_p2 <= (debug_load_1_reg_180 or ap_const_lv32_10000);
    tmp_data_V_4_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_tmp_data_V_3_phi_fu_249_p4),32));
    tmp_fu_306_p1 <= layerSize(8 - 1 downto 0);
    tmp_last_V_fu_585_p2 <= "1" when (ip_index = tmp_5_reg_659) else "0";
    tmp_s_fu_352_p2 <= (debug_load_1_reg_180 or ap_const_lv32_20000);
end behav;
