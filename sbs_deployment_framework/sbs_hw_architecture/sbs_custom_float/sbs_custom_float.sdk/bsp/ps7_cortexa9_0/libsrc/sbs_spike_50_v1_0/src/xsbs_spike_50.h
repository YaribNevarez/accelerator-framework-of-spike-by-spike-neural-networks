// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XSBS_SPIKE_50_H
#define XSBS_SPIKE_50_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xsbs_spike_50_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Crtl_bus_BaseAddress;
} XSbs_spike_50_Config;
#endif

typedef struct {
    u32 Crtl_bus_BaseAddress;
    u32 IsReady;
} XSbs_spike_50;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XSbs_spike_50_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XSbs_spike_50_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XSbs_spike_50_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XSbs_spike_50_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XSbs_spike_50_Initialize(XSbs_spike_50 *InstancePtr, u16 DeviceId);
XSbs_spike_50_Config* XSbs_spike_50_LookupConfig(u16 DeviceId);
int XSbs_spike_50_CfgInitialize(XSbs_spike_50 *InstancePtr, XSbs_spike_50_Config *ConfigPtr);
#else
int XSbs_spike_50_Initialize(XSbs_spike_50 *InstancePtr, const char* InstanceName);
int XSbs_spike_50_Release(XSbs_spike_50 *InstancePtr);
#endif

void XSbs_spike_50_Start(XSbs_spike_50 *InstancePtr);
u32 XSbs_spike_50_IsDone(XSbs_spike_50 *InstancePtr);
u32 XSbs_spike_50_IsIdle(XSbs_spike_50 *InstancePtr);
u32 XSbs_spike_50_IsReady(XSbs_spike_50 *InstancePtr);
void XSbs_spike_50_EnableAutoRestart(XSbs_spike_50 *InstancePtr);
void XSbs_spike_50_DisableAutoRestart(XSbs_spike_50 *InstancePtr);

u32 XSbs_spike_50_Get_debug(XSbs_spike_50 *InstancePtr);
u32 XSbs_spike_50_Get_debug_vld(XSbs_spike_50 *InstancePtr);
void XSbs_spike_50_Set_layerSize(XSbs_spike_50 *InstancePtr, u32 Data);
u32 XSbs_spike_50_Get_layerSize(XSbs_spike_50 *InstancePtr);
void XSbs_spike_50_Set_vectorSize(XSbs_spike_50 *InstancePtr, u32 Data);
u32 XSbs_spike_50_Get_vectorSize(XSbs_spike_50 *InstancePtr);

void XSbs_spike_50_InterruptGlobalEnable(XSbs_spike_50 *InstancePtr);
void XSbs_spike_50_InterruptGlobalDisable(XSbs_spike_50 *InstancePtr);
void XSbs_spike_50_InterruptEnable(XSbs_spike_50 *InstancePtr, u32 Mask);
void XSbs_spike_50_InterruptDisable(XSbs_spike_50 *InstancePtr, u32 Mask);
void XSbs_spike_50_InterruptClear(XSbs_spike_50 *InstancePtr, u32 Mask);
u32 XSbs_spike_50_InterruptGetEnabled(XSbs_spike_50 *InstancePtr);
u32 XSbs_spike_50_InterruptGetStatus(XSbs_spike_50 *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
